/* tslint:disable */
/* eslint-disable */
/**
 * Cosmos SDK - Legacy REST and gRPC Gateway docs
 * A REST interface for state queries, legacy transactions
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";
import { AnyI } from "../codec/any";

/**
 *
 * @export
 * @interface BaseReq
 */
export interface BaseReq {
  /**
   * Sender address or Keybase name to generate a transaction
   * @type {string}
   * @memberof BaseReq
   */
  from?: string;
  /**
   *
   * @type {string}
   * @memberof BaseReq
   */
  memo?: string;
  /**
   *
   * @type {string}
   * @memberof BaseReq
   */
  chain_id?: string;
  /**
   *
   * @type {string}
   * @memberof BaseReq
   */
  account_number?: string;
  /**
   *
   * @type {string}
   * @memberof BaseReq
   */
  sequence?: string;
  /**
   *
   * @type {string}
   * @memberof BaseReq
   */
  gas?: string;
  /**
   *
   * @type {string}
   * @memberof BaseReq
   */
  gas_adjustment?: string;
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof BaseReq
   */
  fees?: Array<TxQueryTxFeeAmount>;
  /**
   * Estimate gas for a transaction (cannot be used in conjunction with generate_only)
   * @type {boolean}
   * @memberof BaseReq
   */
  simulate?: boolean;
}
/**
 * Consensus captures the consensus rules for processing a block in the blockchain, including all blockchain data structures and the rules of the application\'s state transition machine.
 * @export
 * @interface BasicBlockInfo
 */
export interface BasicBlockInfo {
  /**
   *
   * @type {string}
   * @memberof BasicBlockInfo
   */
  block?: string;
  /**
   *
   * @type {string}
   * @memberof BasicBlockInfo
   */
  app?: string;
}
/**
 * CompactBitArray is an implementation of a space efficient bit array. This is used to ensure that the encoded data takes up a minimal amount of space after proto encoding. This is not thread safe, and is not intended for concurrent usage.
 * @export
 * @interface BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning
 */
export interface BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning {
  /**
   *
   * @type {number}
   * @memberof BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning
   */
  extra_bits_stored?: number;
  /**
   *
   * @type {string}
   * @memberof BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning
   */
  elems?: string;
}
/**
 *
 * @export
 * @interface Block
 */
export interface Block {
  /**
   *
   * @type {BlockHeader}
   * @memberof Block
   */
  header?: BlockHeader;
  /**
   *
   * @type {Array<string>}
   * @memberof Block
   */
  txs?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Block
   */
  evidence?: Array<string>;
  /**
   *
   * @type {BlockLastCommit}
   * @memberof Block
   */
  last_commit?: BlockLastCommit;
}
/**
 *
 * @export
 * @interface BlockHeader
 */
export interface BlockHeader {
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  chain_id?: string;
  /**
   *
   * @type {number}
   * @memberof BlockHeader
   */
  height?: number;
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  time?: string;
  /**
   *
   * @type {number}
   * @memberof BlockHeader
   */
  num_txs?: number;
  /**
   *
   * @type {BlockHeaderLastBlockId}
   * @memberof BlockHeader
   */
  last_block_id?: BlockHeaderLastBlockId;
  /**
   *
   * @type {number}
   * @memberof BlockHeader
   */
  total_txs?: number;
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  last_commit_hash?: string;
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  data_hash?: string;
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  validators_hash?: string;
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  next_validators_hash?: string;
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  consensus_hash?: string;
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  app_hash?: string;
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  last_results_hash?: string;
  /**
   *
   * @type {string}
   * @memberof BlockHeader
   */
  evidence_hash?: string;
  /**
   * bech32 encoded address
   * @type {string}
   * @memberof BlockHeader
   */
  proposer_address?: string;
  /**
   *
   * @type {BlockHeaderVersion}
   * @memberof BlockHeader
   */
  version?: BlockHeaderVersion;
}
/**
 *
 * @export
 * @interface BlockHeaderLastBlockId
 */
export interface BlockHeaderLastBlockId {
  /**
   *
   * @type {string}
   * @memberof BlockHeaderLastBlockId
   */
  hash?: string;
  /**
   *
   * @type {BlockIDParts}
   * @memberof BlockHeaderLastBlockId
   */
  parts?: BlockIDParts;
}
/**
 *
 * @export
 * @interface BlockHeaderVersion
 */
export interface BlockHeaderVersion {
  /**
   *
   * @type {string}
   * @memberof BlockHeaderVersion
   */
  block?: string;
  /**
   *
   * @type {string}
   * @memberof BlockHeaderVersion
   */
  app?: string;
}
/**
 *
 * @export
 * @interface BlockID
 */
export interface BlockID {
  /**
   *
   * @type {string}
   * @memberof BlockID
   */
  hash?: string;
  /**
   *
   * @type {BlockIDParts}
   * @memberof BlockID
   */
  parts?: BlockIDParts;
}
/**
 *
 * @export
 * @interface BlockID1
 */
export interface BlockID1 {
  /**
   *
   * @type {string}
   * @memberof BlockID1
   */
  hash?: string;
  /**
   *
   * @type {PartsetHeader}
   * @memberof BlockID1
   */
  part_set_header?: PartsetHeader;
}
/**
 *
 * @export
 * @interface BlockIDParts
 */
export interface BlockIDParts {
  /**
   *
   * @type {number}
   * @memberof BlockIDParts
   */
  total?: number;
  /**
   *
   * @type {string}
   * @memberof BlockIDParts
   */
  hash?: string;
}
/**
 *
 * @export
 * @interface BlockLastCommit
 */
export interface BlockLastCommit {
  /**
   *
   * @type {BlockHeaderLastBlockId}
   * @memberof BlockLastCommit
   */
  block_id?: BlockHeaderLastBlockId;
  /**
   *
   * @type {Array<BlockLastCommitPrecommits>}
   * @memberof BlockLastCommit
   */
  precommits?: Array<BlockLastCommitPrecommits>;
}
/**
 *
 * @export
 * @interface BlockLastCommitPrecommits
 */
export interface BlockLastCommitPrecommits {
  /**
   *
   * @type {string}
   * @memberof BlockLastCommitPrecommits
   */
  validator_address?: string;
  /**
   *
   * @type {string}
   * @memberof BlockLastCommitPrecommits
   */
  validator_index?: string;
  /**
   *
   * @type {string}
   * @memberof BlockLastCommitPrecommits
   */
  height?: string;
  /**
   *
   * @type {string}
   * @memberof BlockLastCommitPrecommits
   */
  round?: string;
  /**
   *
   * @type {string}
   * @memberof BlockLastCommitPrecommits
   */
  timestamp?: string;
  /**
   *
   * @type {number}
   * @memberof BlockLastCommitPrecommits
   */
  type?: number;
  /**
   *
   * @type {BlockHeaderLastBlockId}
   * @memberof BlockLastCommitPrecommits
   */
  block_id?: BlockHeaderLastBlockId;
  /**
   *
   * @type {string}
   * @memberof BlockLastCommitPrecommits
   */
  signature?: string;
}
/**
 *
 * @export
 * @interface BlockQuery
 */
export interface BlockQuery {
  /**
   *
   * @type {BlockQueryBlockMeta}
   * @memberof BlockQuery
   */
  block_meta?: BlockQueryBlockMeta;
  /**
   *
   * @type {BlockQueryBlock}
   * @memberof BlockQuery
   */
  block?: BlockQueryBlock;
}
/**
 *
 * @export
 * @interface BlockQueryBlock
 */
export interface BlockQueryBlock {
  /**
   *
   * @type {BlockHeader}
   * @memberof BlockQueryBlock
   */
  header?: BlockHeader;
  /**
   *
   * @type {Array<string>}
   * @memberof BlockQueryBlock
   */
  txs?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof BlockQueryBlock
   */
  evidence?: Array<string>;
  /**
   *
   * @type {BlockLastCommit}
   * @memberof BlockQueryBlock
   */
  last_commit?: BlockLastCommit;
}
/**
 *
 * @export
 * @interface BlockQueryBlockMeta
 */
export interface BlockQueryBlockMeta {
  /**
   *
   * @type {BlockHeader}
   * @memberof BlockQueryBlockMeta
   */
  header?: BlockHeader;
  /**
   *
   * @type {BlockHeaderLastBlockId}
   * @memberof BlockQueryBlockMeta
   */
  block_id?: BlockHeaderLastBlockId;
}
/**
 * TxBody is the body of a transaction that all signers sign over.
 * @export
 * @interface BodyIsTheProcessableContentOfTheTransaction
 */
export interface BodyIsTheProcessableContentOfTheTransaction {
  /**
   * messages is a list of messages to be executed. The required signers of those messages define the number and order of elements in AuthInfo\'s signer_infos and Tx\'s signatures. Each required signer address is added to the list only the first time it occurs.  By convention, the first required signer (usually from the first message) is referred to as the primary signer and pays the fee for the whole transaction.
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof BodyIsTheProcessableContentOfTheTransaction
   */
  messages?: Array<InlineResponseDefaultDetails>;
  /**
   *
   * @type {string}
   * @memberof BodyIsTheProcessableContentOfTheTransaction
   */
  memo?: string;
  /**
   *
   * @type {string}
   * @memberof BodyIsTheProcessableContentOfTheTransaction
   */
  timeout_height?: string;
  /**
   *
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof BodyIsTheProcessableContentOfTheTransaction
   */
  extension_options?: Array<InlineResponseDefaultDetails>;
  /**
   *
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof BodyIsTheProcessableContentOfTheTransaction
   */
  non_critical_extension_options?: Array<InlineResponseDefaultDetails>;
}
/**
 *
 * @export
 * @interface BroadcastTxCommitResult
 */
export interface BroadcastTxCommitResult {
  /**
   *
   * @type {BroadcastTxCommitResultCheckTx}
   * @memberof BroadcastTxCommitResult
   */
  check_tx?: BroadcastTxCommitResultCheckTx;
  /**
   *
   * @type {BroadcastTxCommitResultDeliverTx}
   * @memberof BroadcastTxCommitResult
   */
  deliver_tx?: BroadcastTxCommitResultDeliverTx;
  /**
   *
   * @type {string}
   * @memberof BroadcastTxCommitResult
   */
  hash?: string;
  /**
   *
   * @type {number}
   * @memberof BroadcastTxCommitResult
   */
  height?: number;
}
/**
 *
 * @export
 * @interface BroadcastTxCommitResultCheckTx
 */
export interface BroadcastTxCommitResultCheckTx {
  /**
   *
   * @type {number}
   * @memberof BroadcastTxCommitResultCheckTx
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof BroadcastTxCommitResultCheckTx
   */
  data?: string;
  /**
   *
   * @type {number}
   * @memberof BroadcastTxCommitResultCheckTx
   */
  gas_used?: number;
  /**
   *
   * @type {number}
   * @memberof BroadcastTxCommitResultCheckTx
   */
  gas_wanted?: number;
  /**
   *
   * @type {string}
   * @memberof BroadcastTxCommitResultCheckTx
   */
  info?: string;
  /**
   *
   * @type {string}
   * @memberof BroadcastTxCommitResultCheckTx
   */
  log?: string;
  /**
   *
   * @type {Array<CheckTxResultTags>}
   * @memberof BroadcastTxCommitResultCheckTx
   */
  tags?: Array<CheckTxResultTags>;
}
/**
 *
 * @export
 * @interface BroadcastTxCommitResultDeliverTx
 */
export interface BroadcastTxCommitResultDeliverTx {
  /**
   *
   * @type {number}
   * @memberof BroadcastTxCommitResultDeliverTx
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof BroadcastTxCommitResultDeliverTx
   */
  data?: string;
  /**
   *
   * @type {number}
   * @memberof BroadcastTxCommitResultDeliverTx
   */
  gas_used?: number;
  /**
   *
   * @type {number}
   * @memberof BroadcastTxCommitResultDeliverTx
   */
  gas_wanted?: number;
  /**
   *
   * @type {string}
   * @memberof BroadcastTxCommitResultDeliverTx
   */
  info?: string;
  /**
   *
   * @type {string}
   * @memberof BroadcastTxCommitResultDeliverTx
   */
  log?: string;
  /**
   *
   * @type {Array<CheckTxResultTags>}
   * @memberof BroadcastTxCommitResultDeliverTx
   */
  tags?: Array<CheckTxResultTags>;
}
/**
 * Channel defines pipeline for exactly-once packet delivery between specific modules on separate blockchains, which has at least one end capable of sending packets and one end capable of receiving packets.
 * @export
 * @interface ChannelAssociatedWithTheRequestIdentifiers
 */
export interface ChannelAssociatedWithTheRequestIdentifiers {
  /**
   * State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.   - STATE_UNINITIALIZED_UNSPECIFIED: Default State  - STATE_INIT: A channel has just started the opening handshake.  - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.  - STATE_OPEN: A channel has completed the handshake. Open channels are ready to send and receive packets.  - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive packets.
   * @type {string}
   * @memberof ChannelAssociatedWithTheRequestIdentifiers
   */
  state?: ChannelAssociatedWithTheRequestIdentifiersStateEnum;
  /**
   * - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering  - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in which they were sent.  - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
   * @type {string}
   * @memberof ChannelAssociatedWithTheRequestIdentifiers
   */
  ordering?: ChannelAssociatedWithTheRequestIdentifiersOrderingEnum;
  /**
   *
   * @type {CounterpartyChannelEnd}
   * @memberof ChannelAssociatedWithTheRequestIdentifiers
   */
  counterparty?: CounterpartyChannelEnd;
  /**
   *
   * @type {Array<string>}
   * @memberof ChannelAssociatedWithTheRequestIdentifiers
   */
  connection_hops?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ChannelAssociatedWithTheRequestIdentifiers
   */
  version?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ChannelAssociatedWithTheRequestIdentifiersStateEnum {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
  Closed = "STATE_CLOSED",
}
/**
 * @export
 * @enum {string}
 */
export enum ChannelAssociatedWithTheRequestIdentifiersOrderingEnum {
  NoneUnspecified = "ORDER_NONE_UNSPECIFIED",
  Unordered = "ORDER_UNORDERED",
  Ordered = "ORDER_ORDERED",
}

/**
 *
 * @export
 * @interface CheckTxResult
 */
export interface CheckTxResult {
  /**
   *
   * @type {number}
   * @memberof CheckTxResult
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof CheckTxResult
   */
  data?: string;
  /**
   *
   * @type {number}
   * @memberof CheckTxResult
   */
  gas_used?: number;
  /**
   *
   * @type {number}
   * @memberof CheckTxResult
   */
  gas_wanted?: number;
  /**
   *
   * @type {string}
   * @memberof CheckTxResult
   */
  info?: string;
  /**
   *
   * @type {string}
   * @memberof CheckTxResult
   */
  log?: string;
  /**
   *
   * @type {Array<CheckTxResultTags>}
   * @memberof CheckTxResult
   */
  tags?: Array<CheckTxResultTags>;
}
/**
 *
 * @export
 * @interface CheckTxResultTags
 */
export interface CheckTxResultTags {
  /**
   *
   * @type {string}
   * @memberof CheckTxResultTags
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof CheckTxResultTags
   */
  value?: string;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ClientState
 */
export interface ClientState {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof ClientState
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof ClientState
   */
  value?: string;
}
/**
 * IdentifiedClientState defines a client state with an additional client identifier field.
 * @export
 * @interface ClientStateAssociatedWithTheChannel
 */
export interface ClientStateAssociatedWithTheChannel {
  /**
   *
   * @type {string}
   * @memberof ClientStateAssociatedWithTheChannel
   */
  client_id?: string;
  /**
   *
   * @type {ClientState}
   * @memberof ClientStateAssociatedWithTheChannel
   */
  client_state?: ClientState;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ClientStateAssociatedWithTheRequestIdentifier
 */
export interface ClientStateAssociatedWithTheRequestIdentifier {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof ClientStateAssociatedWithTheRequestIdentifier
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof ClientStateAssociatedWithTheRequestIdentifier
   */
  value?: string;
}
/**
 *
 * @export
 * @interface Coin
 */
export interface Coin {
  /**
   *
   * @type {string}
   * @memberof Coin
   */
  denom?: string;
  /**
   *
   * @type {string}
   * @memberof Coin
   */
  amount?: string;
}
/**
 * ConnectionEnd defines a stateful object on a chain connected to another separate one. NOTE: there must only be 2 defined ConnectionEnds to establish a connection between two chains.
 * @export
 * @interface ConnectionAssociatedWithTheRequestIdentifier
 */
export interface ConnectionAssociatedWithTheRequestIdentifier {
  /**
   * client associated with this connection.
   * @type {string}
   * @memberof ConnectionAssociatedWithTheRequestIdentifier
   */
  client_id?: string;
  /**
   * IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection.
   * @type {Array<InlineResponse20055Versions>}
   * @memberof ConnectionAssociatedWithTheRequestIdentifier
   */
  versions?: Array<InlineResponse20055Versions>;
  /**
   * current state of the connection end.
   * @type {string}
   * @memberof ConnectionAssociatedWithTheRequestIdentifier
   */
  state?: ConnectionAssociatedWithTheRequestIdentifierStateEnum;
  /**
   *
   * @type {InlineResponse20055Counterparty}
   * @memberof ConnectionAssociatedWithTheRequestIdentifier
   */
  counterparty?: InlineResponse20055Counterparty;
  /**
   * delay period that must pass before a consensus state can be used for packet-verification NOTE: delay period logic is only implemented by some clients.
   * @type {string}
   * @memberof ConnectionAssociatedWithTheRequestIdentifier
   */
  delay_period?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ConnectionAssociatedWithTheRequestIdentifierStateEnum {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ConsensusState
 */
export interface ConsensusState {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof ConsensusState
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof ConsensusState
   */
  value?: string;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ConsensusStateAssociatedWithTheChannel
 */
export interface ConsensusStateAssociatedWithTheChannel {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof ConsensusStateAssociatedWithTheChannel
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof ConsensusStateAssociatedWithTheChannel
   */
  value?: string;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ConsensusStateAssociatedWithTheClientIdentifierAtTheGivenHeight
 */
export interface ConsensusStateAssociatedWithTheClientIdentifierAtTheGivenHeight {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof ConsensusStateAssociatedWithTheClientIdentifierAtTheGivenHeight
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof ConsensusStateAssociatedWithTheClientIdentifierAtTheGivenHeight
   */
  value?: string;
}
/**
 * Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset
 * @export
 * @interface ConsensusStateHeight
 */
export interface ConsensusStateHeight {
  /**
   *
   * @type {string}
   * @memberof ConsensusStateHeight
   */
  revision_number?: string;
  /**
   *
   * @type {string}
   * @memberof ConsensusStateHeight
   */
  revision_height?: string;
}
/**
 * Params defines the parameters for the auth module.
 * @export
 * @interface CosmosAuthV1beta1Params
 */
export interface CosmosAuthV1beta1Params {
  /**
   *
   * @type {string}
   * @memberof CosmosAuthV1beta1Params
   */
  max_memo_characters?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosAuthV1beta1Params
   */
  tx_sig_limit?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosAuthV1beta1Params
   */
  tx_size_cost_per_byte?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosAuthV1beta1Params
   */
  sig_verify_cost_ed25519?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosAuthV1beta1Params
   */
  sig_verify_cost_secp256k1?: string;
}
/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 * @export
 * @interface CosmosAuthV1beta1QueryAccountResponse
 */
export interface CosmosAuthV1beta1QueryAccountResponse {
  /**
   *
   * @type {InlineResponse200Account}
   * @memberof CosmosAuthV1beta1QueryAccountResponse
   */
  account?: InlineResponse200Account;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface CosmosAuthV1beta1QueryParamsResponse
 */
export interface CosmosAuthV1beta1QueryParamsResponse {
  /**
   *
   * @type {InlineResponse2001Params}
   * @memberof CosmosAuthV1beta1QueryParamsResponse
   */
  params?: InlineResponse2001Params;
}
/**
 * Params defines the parameters for the bank module.
 * @export
 * @interface CosmosBankV1beta1Params
 */
export interface CosmosBankV1beta1Params {
  /**
   *
   * @type {Array<InlineResponse2004ParamsSendEnabled>}
   * @memberof CosmosBankV1beta1Params
   */
  send_enabled?: Array<InlineResponse2004ParamsSendEnabled>;
  /**
   *
   * @type {boolean}
   * @memberof CosmosBankV1beta1Params
   */
  default_send_enabled?: boolean;
}
/**
 * QueryAllBalancesResponse is the response type for the Query/AllBalances RPC method.
 * @export
 * @interface CosmosBankV1beta1QueryAllBalancesResponse
 */
export interface CosmosBankV1beta1QueryAllBalancesResponse {
  /**
   * balances is the balances of all the coins.
   * @type {Array<InlineResponse2002Balances>}
   * @memberof CosmosBankV1beta1QueryAllBalancesResponse
   */
  balances?: Array<InlineResponse2002Balances>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosBankV1beta1QueryAllBalancesResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method.
 * @export
 * @interface CosmosBankV1beta1QueryBalanceResponse
 */
export interface CosmosBankV1beta1QueryBalanceResponse {
  /**
   *
   * @type {InlineResponse2003Balance}
   * @memberof CosmosBankV1beta1QueryBalanceResponse
   */
  balance?: InlineResponse2003Balance;
}
/**
 * QueryParamsResponse defines the response type for querying x/bank parameters.
 * @export
 * @interface CosmosBankV1beta1QueryParamsResponse
 */
export interface CosmosBankV1beta1QueryParamsResponse {
  /**
   *
   * @type {InlineResponse2004Params}
   * @memberof CosmosBankV1beta1QueryParamsResponse
   */
  params?: InlineResponse2004Params;
}
/**
 * QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
 * @export
 * @interface CosmosBankV1beta1QuerySupplyOfResponse
 */
export interface CosmosBankV1beta1QuerySupplyOfResponse {
  /**
   *
   * @type {InlineResponse2005Amount}
   * @memberof CosmosBankV1beta1QuerySupplyOfResponse
   */
  amount?: InlineResponse2005Amount;
}
/**
 *
 * @export
 * @interface CosmosBankV1beta1QueryTotalSupplyResponse
 */
export interface CosmosBankV1beta1QueryTotalSupplyResponse {
  /**
   *
   * @type {Array<InlineResponse2002Balances>}
   * @memberof CosmosBankV1beta1QueryTotalSupplyResponse
   */
  supply?: Array<InlineResponse2002Balances>;
}
/**
 * SendEnabled maps coin denom to a send_enabled status (whether a denom is sendable).
 * @export
 * @interface CosmosBankV1beta1SendEnabled
 */
export interface CosmosBankV1beta1SendEnabled {
  /**
   *
   * @type {string}
   * @memberof CosmosBankV1beta1SendEnabled
   */
  denom?: string;
  /**
   *
   * @type {boolean}
   * @memberof CosmosBankV1beta1SendEnabled
   */
  enabled?: boolean;
}
/**
 * ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
 * @export
 * @interface CosmosBaseAbciV1beta1ABCIMessageLog
 */
export interface CosmosBaseAbciV1beta1ABCIMessageLog {
  /**
   *
   * @type {number}
   * @memberof CosmosBaseAbciV1beta1ABCIMessageLog
   */
  msg_index?: number;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1ABCIMessageLog
   */
  log?: string;
  /**
   * Events contains a slice of Event objects that were emitted during some execution.
   * @type {Array<InlineResponse20046TxResponseEvents>}
   * @memberof CosmosBaseAbciV1beta1ABCIMessageLog
   */
  events?: Array<InlineResponse20046TxResponseEvents>;
}
/**
 * Attribute defines an attribute wrapper where the key and value are strings instead of raw bytes.
 * @export
 * @interface CosmosBaseAbciV1beta1Attribute
 */
export interface CosmosBaseAbciV1beta1Attribute {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1Attribute
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1Attribute
   */
  value?: string;
}
/**
 * GasInfo defines tx execution gas context.
 * @export
 * @interface CosmosBaseAbciV1beta1GasInfo
 */
export interface CosmosBaseAbciV1beta1GasInfo {
  /**
   * GasWanted is the maximum units of work we allow this tx to perform.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1GasInfo
   */
  gas_wanted?: string;
  /**
   * GasUsed is the amount of gas actually consumed.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1GasInfo
   */
  gas_used?: string;
}
/**
 * Result is the union of ResponseFormat and ResponseCheckTx.
 * @export
 * @interface CosmosBaseAbciV1beta1Result
 */
export interface CosmosBaseAbciV1beta1Result {
  /**
   * Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1Result
   */
  data?: string;
  /**
   * Log contains the log information from message or handler execution.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1Result
   */
  log?: string;
  /**
   * Events contains a slice of Event objects that were emitted during message or handler execution.
   * @type {Array<InlineResponse20045ResultEvents>}
   * @memberof CosmosBaseAbciV1beta1Result
   */
  events?: Array<InlineResponse20045ResultEvents>;
}
/**
 * StringEvent defines en Event object wrapper where all the attributes contain key/value pairs that are strings instead of raw bytes.
 * @export
 * @interface CosmosBaseAbciV1beta1StringEvent
 */
export interface CosmosBaseAbciV1beta1StringEvent {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1StringEvent
   */
  type?: string;
  /**
   *
   * @type {Array<InlineResponse20046TxResponseAttributes>}
   * @memberof CosmosBaseAbciV1beta1StringEvent
   */
  attributes?: Array<InlineResponse20046TxResponseAttributes>;
}
/**
 * TxResponse defines a structure containing relevant tx data and metadata. The tags are stringified and the log is JSON decoded.
 * @export
 * @interface CosmosBaseAbciV1beta1TxResponse
 */
export interface CosmosBaseAbciV1beta1TxResponse {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  height?: string;
  /**
   * The transaction hash.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  txhash?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  codespace?: string;
  /**
   * Response code.
   * @type {number}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  code?: number;
  /**
   * Result bytes, if any.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  data?: string;
  /**
   * The output of the application\'s logger (raw string). May be non-deterministic.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  raw_log?: string;
  /**
   * The output of the application\'s logger (typed). May be non-deterministic.
   * @type {Array<InlineResponse20046TxResponseLogs>}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  logs?: Array<InlineResponse20046TxResponseLogs>;
  /**
   * Additional information. May be non-deterministic.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  info?: string;
  /**
   * Amount of gas requested for transaction.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  gas_wanted?: string;
  /**
   * Amount of gas consumed by transaction.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  gas_used?: string;
  /**
   *
   * @type {InlineResponse20046TxResponseTx}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  tx?: InlineResponse20046TxResponseTx;
  /**
   * Time of the previous block. For heights > 1, it\'s the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it\'s genesis time.
   * @type {string}
   * @memberof CosmosBaseAbciV1beta1TxResponse
   */
  timestamp?: string;
}
/**
 * message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageRequest
 */
export interface CosmosBaseQueryV1beta1PageRequest {
  /**
   * key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @type {string}
   * @memberof CosmosBaseQueryV1beta1PageRequest
   */
  key?: string;
  /**
   * offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @type {string}
   * @memberof CosmosBaseQueryV1beta1PageRequest
   */
  offset?: string;
  /**
   * limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @type {string}
   * @memberof CosmosBaseQueryV1beta1PageRequest
   */
  limit?: string;
  /**
   * count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @type {boolean}
   * @memberof CosmosBaseQueryV1beta1PageRequest
   */
  count_total?: boolean;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageResponse
 */
export interface CosmosBaseQueryV1beta1PageResponse {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseQueryV1beta1PageResponse
   */
  next_key?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseQueryV1beta1PageResponse
   */
  total?: string;
}
/**
 * GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetBlockByHeightResponse
 */
export interface CosmosBaseTendermintV1beta1GetBlockByHeightResponse {
  /**
   *
   * @type {BlockID1}
   * @memberof CosmosBaseTendermintV1beta1GetBlockByHeightResponse
   */
  block_id?: BlockID1;
  /**
   *
   * @type {InlineResponse2006Block}
   * @memberof CosmosBaseTendermintV1beta1GetBlockByHeightResponse
   */
  block?: InlineResponse2006Block;
}
/**
 * GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetLatestBlockResponse
 */
export interface CosmosBaseTendermintV1beta1GetLatestBlockResponse {
  /**
   *
   * @type {BlockID1}
   * @memberof CosmosBaseTendermintV1beta1GetLatestBlockResponse
   */
  block_id?: BlockID1;
  /**
   *
   * @type {InlineResponse2006Block}
   * @memberof CosmosBaseTendermintV1beta1GetLatestBlockResponse
   */
  block?: InlineResponse2006Block;
}
/**
 * GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse
 */
export interface CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse
   */
  block_height?: string;
  /**
   *
   * @type {Array<InlineResponse20010Validators>}
   * @memberof CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse
   */
  validators?: Array<InlineResponse20010Validators>;
  /**
   *
   * @type {InlineResponse20010Pagination}
   * @memberof CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse
   */
  pagination?: InlineResponse20010Pagination;
}
/**
 * GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetNodeInfoResponse
 */
export interface CosmosBaseTendermintV1beta1GetNodeInfoResponse {
  /**
   *
   * @type {InlineResponse2008DefaultNodeInfo}
   * @memberof CosmosBaseTendermintV1beta1GetNodeInfoResponse
   */
  default_node_info?: InlineResponse2008DefaultNodeInfo;
  /**
   *
   * @type {InlineResponse2008ApplicationVersion}
   * @memberof CosmosBaseTendermintV1beta1GetNodeInfoResponse
   */
  application_version?: InlineResponse2008ApplicationVersion;
}
/**
 * GetSyncingResponse is the response type for the Query/GetSyncing RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetSyncingResponse
 */
export interface CosmosBaseTendermintV1beta1GetSyncingResponse {
  /**
   *
   * @type {boolean}
   * @memberof CosmosBaseTendermintV1beta1GetSyncingResponse
   */
  syncing?: boolean;
}
/**
 * GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse
 */
export interface CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse
   */
  block_height?: string;
  /**
   *
   * @type {Array<InlineResponse20010Validators>}
   * @memberof CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse
   */
  validators?: Array<InlineResponse20010Validators>;
  /**
   *
   * @type {InlineResponse20010Pagination}
   * @memberof CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse
   */
  pagination?: InlineResponse20010Pagination;
}
/**
 *
 * @export
 * @interface CosmosBaseTendermintV1beta1Module
 */
export interface CosmosBaseTendermintV1beta1Module {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1Module
   */
  path?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1Module
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1Module
   */
  sum?: string;
}
/**
 * Validator is the type for the validator-set.
 * @export
 * @interface CosmosBaseTendermintV1beta1Validator
 */
export interface CosmosBaseTendermintV1beta1Validator {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1Validator
   */
  address?: string;
  /**
   *
   * @type {InlineResponseDefaultDetails}
   * @memberof CosmosBaseTendermintV1beta1Validator
   */
  pub_key?: InlineResponseDefaultDetails;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1Validator
   */
  voting_power?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1Validator
   */
  proposer_priority?: string;
}
/**
 * VersionInfo is the type for the GetNodeInfoResponse message.
 * @export
 * @interface CosmosBaseTendermintV1beta1VersionInfo
 */
export interface CosmosBaseTendermintV1beta1VersionInfo {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1VersionInfo
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1VersionInfo
   */
  app_name?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1VersionInfo
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1VersionInfo
   */
  git_commit?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1VersionInfo
   */
  build_tags?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseTendermintV1beta1VersionInfo
   */
  go_version?: string;
  /**
   *
   * @type {Array<ModuleIsTheTypeForVersionInfo>}
   * @memberof CosmosBaseTendermintV1beta1VersionInfo
   */
  build_deps?: Array<ModuleIsTheTypeForVersionInfo>;
}
/**
 * Coin defines a token with a denomination and an amount.  NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @export
 * @interface CosmosBaseV1beta1Coin
 */
export interface CosmosBaseV1beta1Coin {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseV1beta1Coin
   */
  denom?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseV1beta1Coin
   */
  amount?: string;
}
/**
 * DecCoin defines a token with a denomination and a decimal amount.  NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto.
 * @export
 * @interface CosmosBaseV1beta1DecCoin
 */
export interface CosmosBaseV1beta1DecCoin {
  /**
   *
   * @type {string}
   * @memberof CosmosBaseV1beta1DecCoin
   */
  denom?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosBaseV1beta1DecCoin
   */
  amount?: string;
}
/**
 * CompactBitArray is an implementation of a space efficient bit array. This is used to ensure that the encoded data takes up a minimal amount of space after proto encoding. This is not thread safe, and is not intended for concurrent usage.
 * @export
 * @interface CosmosCryptoMultisigV1beta1CompactBitArray
 */
export interface CosmosCryptoMultisigV1beta1CompactBitArray {
  /**
   *
   * @type {number}
   * @memberof CosmosCryptoMultisigV1beta1CompactBitArray
   */
  extra_bits_stored?: number;
  /**
   *
   * @type {string}
   * @memberof CosmosCryptoMultisigV1beta1CompactBitArray
   */
  elems?: string;
}
/**
 * DelegationDelegatorReward represents the properties of a delegator\'s delegation reward.
 * @export
 * @interface CosmosDistributionV1beta1DelegationDelegatorReward
 */
export interface CosmosDistributionV1beta1DelegationDelegatorReward {
  /**
   *
   * @type {string}
   * @memberof CosmosDistributionV1beta1DelegationDelegatorReward
   */
  validator_address?: string;
  /**
   *
   * @type {Array<InlineResponse20012Pool>}
   * @memberof CosmosDistributionV1beta1DelegationDelegatorReward
   */
  reward?: Array<InlineResponse20012Pool>;
}
/**
 * Params defines the set of params for the distribution module.
 * @export
 * @interface CosmosDistributionV1beta1Params
 */
export interface CosmosDistributionV1beta1Params {
  /**
   *
   * @type {string}
   * @memberof CosmosDistributionV1beta1Params
   */
  community_tax?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosDistributionV1beta1Params
   */
  base_proposer_reward?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosDistributionV1beta1Params
   */
  bonus_proposer_reward?: string;
  /**
   *
   * @type {boolean}
   * @memberof CosmosDistributionV1beta1Params
   */
  withdraw_addr_enabled?: boolean;
}
/**
 * QueryCommunityPoolResponse is the response type for the Query/CommunityPool RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryCommunityPoolResponse
 */
export interface CosmosDistributionV1beta1QueryCommunityPoolResponse {
  /**
   * pool defines community pool\'s coins.
   * @type {Array<InlineResponse20012Pool>}
   * @memberof CosmosDistributionV1beta1QueryCommunityPoolResponse
   */
  pool?: Array<InlineResponse20012Pool>;
}
/**
 * QueryDelegationRewardsResponse is the response type for the Query/DelegationRewards RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryDelegationRewardsResponse
 */
export interface CosmosDistributionV1beta1QueryDelegationRewardsResponse {
  /**
   * rewards defines the rewards accrued by a delegation.
   * @type {Array<InlineResponse20012Pool>}
   * @memberof CosmosDistributionV1beta1QueryDelegationRewardsResponse
   */
  rewards?: Array<InlineResponse20012Pool>;
}
/**
 * QueryDelegationTotalRewardsResponse is the response type for the Query/DelegationTotalRewards RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryDelegationTotalRewardsResponse
 */
export interface CosmosDistributionV1beta1QueryDelegationTotalRewardsResponse {
  /**
   * rewards defines all the rewards accrued by a delegator.
   * @type {Array<InlineResponse20013Rewards>}
   * @memberof CosmosDistributionV1beta1QueryDelegationTotalRewardsResponse
   */
  rewards?: Array<InlineResponse20013Rewards>;
  /**
   * total defines the sum of all the rewards.
   * @type {Array<InlineResponse20012Pool>}
   * @memberof CosmosDistributionV1beta1QueryDelegationTotalRewardsResponse
   */
  total?: Array<InlineResponse20012Pool>;
}
/**
 * QueryDelegatorValidatorsResponse is the response type for the Query/DelegatorValidators RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryDelegatorValidatorsResponse
 */
export interface CosmosDistributionV1beta1QueryDelegatorValidatorsResponse {
  /**
   * validators defines the validators a delegator is delegating for.
   * @type {Array<string>}
   * @memberof CosmosDistributionV1beta1QueryDelegatorValidatorsResponse
   */
  validators?: Array<string>;
}
/**
 * QueryDelegatorWithdrawAddressResponse is the response type for the Query/DelegatorWithdrawAddress RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryDelegatorWithdrawAddressResponse
 */
export interface CosmosDistributionV1beta1QueryDelegatorWithdrawAddressResponse {
  /**
   * withdraw_address defines the delegator address to query for.
   * @type {string}
   * @memberof CosmosDistributionV1beta1QueryDelegatorWithdrawAddressResponse
   */
  withdraw_address?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryParamsResponse
 */
export interface CosmosDistributionV1beta1QueryParamsResponse {
  /**
   *
   * @type {InlineResponse20017Params}
   * @memberof CosmosDistributionV1beta1QueryParamsResponse
   */
  params?: InlineResponse20017Params;
}
/**
 *
 * @export
 * @interface CosmosDistributionV1beta1QueryValidatorCommissionResponse
 */
export interface CosmosDistributionV1beta1QueryValidatorCommissionResponse {
  /**
   *
   * @type {QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission}
   * @memberof CosmosDistributionV1beta1QueryValidatorCommissionResponse
   */
  commission?: QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission;
}
/**
 * QueryValidatorOutstandingRewardsResponse is the response type for the Query/ValidatorOutstandingRewards RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryValidatorOutstandingRewardsResponse
 */
export interface CosmosDistributionV1beta1QueryValidatorOutstandingRewardsResponse {
  /**
   *
   * @type {InlineResponse20018Rewards}
   * @memberof CosmosDistributionV1beta1QueryValidatorOutstandingRewardsResponse
   */
  rewards?: InlineResponse20018Rewards;
}
/**
 * QueryValidatorSlashesResponse is the response type for the Query/ValidatorSlashes RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryValidatorSlashesResponse
 */
export interface CosmosDistributionV1beta1QueryValidatorSlashesResponse {
  /**
   * slashes defines the slashes the validator received.
   * @type {Array<InlineResponse20019Slashes>}
   * @memberof CosmosDistributionV1beta1QueryValidatorSlashesResponse
   */
  slashes?: Array<InlineResponse20019Slashes>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosDistributionV1beta1QueryValidatorSlashesResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * ValidatorAccumulatedCommission represents accumulated commission for a validator kept as a running counter, can be withdrawn at any time.
 * @export
 * @interface CosmosDistributionV1beta1ValidatorAccumulatedCommission
 */
export interface CosmosDistributionV1beta1ValidatorAccumulatedCommission {
  /**
   *
   * @type {Array<InlineResponse20012Pool>}
   * @memberof CosmosDistributionV1beta1ValidatorAccumulatedCommission
   */
  commission?: Array<InlineResponse20012Pool>;
}
/**
 * ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards for a validator inexpensive to track, allows simple sanity checks.
 * @export
 * @interface CosmosDistributionV1beta1ValidatorOutstandingRewards
 */
export interface CosmosDistributionV1beta1ValidatorOutstandingRewards {
  /**
   *
   * @type {Array<InlineResponse20012Pool>}
   * @memberof CosmosDistributionV1beta1ValidatorOutstandingRewards
   */
  rewards?: Array<InlineResponse20012Pool>;
}
/**
 * ValidatorSlashEvent represents a validator slash event. Height is implicit within the store key. This is needed to calculate appropriate amount of staking tokens for delegations which are withdrawn after a slash has occurred.
 * @export
 * @interface CosmosDistributionV1beta1ValidatorSlashEvent
 */
export interface CosmosDistributionV1beta1ValidatorSlashEvent {
  /**
   *
   * @type {string}
   * @memberof CosmosDistributionV1beta1ValidatorSlashEvent
   */
  validator_period?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosDistributionV1beta1ValidatorSlashEvent
   */
  fraction?: string;
}
/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC method.
 * @export
 * @interface CosmosEvidenceV1beta1QueryAllEvidenceResponse
 */
export interface CosmosEvidenceV1beta1QueryAllEvidenceResponse {
  /**
   * evidence returns all evidences.
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof CosmosEvidenceV1beta1QueryAllEvidenceResponse
   */
  evidence?: Array<InlineResponseDefaultDetails>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosEvidenceV1beta1QueryAllEvidenceResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
 * @export
 * @interface CosmosEvidenceV1beta1QueryEvidenceResponse
 */
export interface CosmosEvidenceV1beta1QueryEvidenceResponse {
  /**
   *
   * @type {InlineResponse20021Evidence}
   * @memberof CosmosEvidenceV1beta1QueryEvidenceResponse
   */
  evidence?: InlineResponse20021Evidence;
}
/**
 * Deposit defines an amount deposited by an account address to an active proposal.
 * @export
 * @interface CosmosGovV1beta1Deposit
 */
export interface CosmosGovV1beta1Deposit {
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1Deposit
   */
  proposal_id?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1Deposit
   */
  depositor?: string;
  /**
   *
   * @type {Array<InlineResponse2002Balances>}
   * @memberof CosmosGovV1beta1Deposit
   */
  amount?: Array<InlineResponse2002Balances>;
}
/**
 * DepositParams defines the params for deposits on governance proposals.
 * @export
 * @interface CosmosGovV1beta1DepositParams
 */
export interface CosmosGovV1beta1DepositParams {
  /**
   * Minimum deposit for a proposal to enter voting period.
   * @type {Array<InlineResponse2002Balances>}
   * @memberof CosmosGovV1beta1DepositParams
   */
  min_deposit?: Array<InlineResponse2002Balances>;
  /**
   * Maximum period for Atom holders to deposit on a proposal. Initial value: 2  months.
   * @type {string}
   * @memberof CosmosGovV1beta1DepositParams
   */
  max_deposit_period?: string;
}
/**
 * Proposal defines the core field members of a governance proposal.
 * @export
 * @interface CosmosGovV1beta1Proposal
 */
export interface CosmosGovV1beta1Proposal {
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1Proposal
   */
  proposal_id?: string;
  /**
   *
   * @type {InlineResponseDefaultDetails}
   * @memberof CosmosGovV1beta1Proposal
   */
  content?: InlineResponseDefaultDetails;
  /**
   * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
   * @type {string}
   * @memberof CosmosGovV1beta1Proposal
   */
  status?: CosmosGovV1beta1ProposalStatusEnum;
  /**
   *
   * @type {InlineResponse20023FinalTallyResult}
   * @memberof CosmosGovV1beta1Proposal
   */
  final_tally_result?: InlineResponse20023FinalTallyResult;
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1Proposal
   */
  submit_time?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1Proposal
   */
  deposit_end_time?: string;
  /**
   *
   * @type {Array<InlineResponse2002Balances>}
   * @memberof CosmosGovV1beta1Proposal
   */
  total_deposit?: Array<InlineResponse2002Balances>;
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1Proposal
   */
  voting_start_time?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1Proposal
   */
  voting_end_time?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum CosmosGovV1beta1ProposalStatusEnum {
  Unspecified = "PROPOSAL_STATUS_UNSPECIFIED",
  DepositPeriod = "PROPOSAL_STATUS_DEPOSIT_PERIOD",
  VotingPeriod = "PROPOSAL_STATUS_VOTING_PERIOD",
  Passed = "PROPOSAL_STATUS_PASSED",
  Rejected = "PROPOSAL_STATUS_REJECTED",
  Failed = "PROPOSAL_STATUS_FAILED",
}

/**
 * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
 * @export
 * @enum {string}
 */
export enum CosmosGovV1beta1ProposalStatus {
  Unspecified = "PROPOSAL_STATUS_UNSPECIFIED",
  DepositPeriod = "PROPOSAL_STATUS_DEPOSIT_PERIOD",
  VotingPeriod = "PROPOSAL_STATUS_VOTING_PERIOD",
  Passed = "PROPOSAL_STATUS_PASSED",
  Rejected = "PROPOSAL_STATUS_REJECTED",
  Failed = "PROPOSAL_STATUS_FAILED",
}

/**
 * QueryDepositResponse is the response type for the Query/Deposit RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryDepositResponse
 */
export interface CosmosGovV1beta1QueryDepositResponse {
  /**
   *
   * @type {InlineResponse20026Deposit}
   * @memberof CosmosGovV1beta1QueryDepositResponse
   */
  deposit?: InlineResponse20026Deposit;
}
/**
 * QueryDepositsResponse is the response type for the Query/Deposits RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryDepositsResponse
 */
export interface CosmosGovV1beta1QueryDepositsResponse {
  /**
   *
   * @type {Array<InlineResponse20025Deposits>}
   * @memberof CosmosGovV1beta1QueryDepositsResponse
   */
  deposits?: Array<InlineResponse20025Deposits>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosGovV1beta1QueryDepositsResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryParamsResponse
 */
export interface CosmosGovV1beta1QueryParamsResponse {
  /**
   *
   * @type {InlineResponse20022VotingParams}
   * @memberof CosmosGovV1beta1QueryParamsResponse
   */
  voting_params?: InlineResponse20022VotingParams;
  /**
   *
   * @type {InlineResponse20022DepositParams}
   * @memberof CosmosGovV1beta1QueryParamsResponse
   */
  deposit_params?: InlineResponse20022DepositParams;
  /**
   *
   * @type {InlineResponse20022TallyParams}
   * @memberof CosmosGovV1beta1QueryParamsResponse
   */
  tally_params?: InlineResponse20022TallyParams;
}
/**
 * QueryProposalResponse is the response type for the Query/Proposal RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryProposalResponse
 */
export interface CosmosGovV1beta1QueryProposalResponse {
  /**
   *
   * @type {InlineResponse20023Proposals}
   * @memberof CosmosGovV1beta1QueryProposalResponse
   */
  proposal?: InlineResponse20023Proposals;
}
/**
 * QueryProposalsResponse is the response type for the Query/Proposals RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryProposalsResponse
 */
export interface CosmosGovV1beta1QueryProposalsResponse {
  /**
   *
   * @type {Array<InlineResponse20023Proposals>}
   * @memberof CosmosGovV1beta1QueryProposalsResponse
   */
  proposals?: Array<InlineResponse20023Proposals>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosGovV1beta1QueryProposalsResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryTallyResultResponse is the response type for the Query/Tally RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryTallyResultResponse
 */
export interface CosmosGovV1beta1QueryTallyResultResponse {
  /**
   *
   * @type {InlineResponse20027Tally}
   * @memberof CosmosGovV1beta1QueryTallyResultResponse
   */
  tally?: InlineResponse20027Tally;
}
/**
 * QueryVoteResponse is the response type for the Query/Vote RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryVoteResponse
 */
export interface CosmosGovV1beta1QueryVoteResponse {
  /**
   *
   * @type {InlineResponse20029Vote}
   * @memberof CosmosGovV1beta1QueryVoteResponse
   */
  vote?: InlineResponse20029Vote;
}
/**
 * QueryVotesResponse is the response type for the Query/Votes RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryVotesResponse
 */
export interface CosmosGovV1beta1QueryVotesResponse {
  /**
   * votes defined the queried votes.
   * @type {Array<InlineResponse20028Votes>}
   * @memberof CosmosGovV1beta1QueryVotesResponse
   */
  votes?: Array<InlineResponse20028Votes>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosGovV1beta1QueryVotesResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * TallyParams defines the params for tallying votes on governance proposals.
 * @export
 * @interface CosmosGovV1beta1TallyParams
 */
export interface CosmosGovV1beta1TallyParams {
  /**
   * Minimum percentage of total stake needed to vote for a result to be  considered valid.
   * @type {string}
   * @memberof CosmosGovV1beta1TallyParams
   */
  quorum?: string;
  /**
   * Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
   * @type {string}
   * @memberof CosmosGovV1beta1TallyParams
   */
  threshold?: string;
  /**
   * Minimum value of Veto votes to Total votes ratio for proposal to be  vetoed. Default value: 1/3.
   * @type {string}
   * @memberof CosmosGovV1beta1TallyParams
   */
  veto_threshold?: string;
}
/**
 * TallyResult defines a standard tally for a governance proposal.
 * @export
 * @interface CosmosGovV1beta1TallyResult
 */
export interface CosmosGovV1beta1TallyResult {
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1TallyResult
   */
  yes?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1TallyResult
   */
  abstain?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1TallyResult
   */
  no?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1TallyResult
   */
  no_with_veto?: string;
}
/**
 * Vote defines a vote on a governance proposal. A Vote consists of a proposal ID, the voter, and the vote option.
 * @export
 * @interface CosmosGovV1beta1Vote
 */
export interface CosmosGovV1beta1Vote {
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1Vote
   */
  proposal_id?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosGovV1beta1Vote
   */
  voter?: string;
  /**
   * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
   * @type {string}
   * @memberof CosmosGovV1beta1Vote
   */
  option?: CosmosGovV1beta1VoteOptionEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum CosmosGovV1beta1VoteOptionEnum {
  Unspecified = "VOTE_OPTION_UNSPECIFIED",
  Yes = "VOTE_OPTION_YES",
  Abstain = "VOTE_OPTION_ABSTAIN",
  No = "VOTE_OPTION_NO",
  NoWithVeto = "VOTE_OPTION_NO_WITH_VETO",
}

/**
 * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
 * @export
 * @enum {string}
 */
export enum CosmosGovV1beta1VoteOption {
  Unspecified = "VOTE_OPTION_UNSPECIFIED",
  Yes = "VOTE_OPTION_YES",
  Abstain = "VOTE_OPTION_ABSTAIN",
  No = "VOTE_OPTION_NO",
  NoWithVeto = "VOTE_OPTION_NO_WITH_VETO",
}

/**
 * VotingParams defines the params for voting on governance proposals.
 * @export
 * @interface CosmosGovV1beta1VotingParams
 */
export interface CosmosGovV1beta1VotingParams {
  /**
   * Length of the voting period.
   * @type {string}
   * @memberof CosmosGovV1beta1VotingParams
   */
  voting_period?: string;
}
/**
 * Params holds parameters for the mint module.
 * @export
 * @interface CosmosMintV1beta1Params
 */
export interface CosmosMintV1beta1Params {
  /**
   *
   * @type {string}
   * @memberof CosmosMintV1beta1Params
   */
  mint_denom?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosMintV1beta1Params
   */
  inflation_rate_change?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosMintV1beta1Params
   */
  inflation_max?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosMintV1beta1Params
   */
  inflation_min?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosMintV1beta1Params
   */
  goal_bonded?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosMintV1beta1Params
   */
  blocks_per_year?: string;
}
/**
 * QueryAnnualProvisionsResponse is the response type for the Query/AnnualProvisions RPC method.
 * @export
 * @interface CosmosMintV1beta1QueryAnnualProvisionsResponse
 */
export interface CosmosMintV1beta1QueryAnnualProvisionsResponse {
  /**
   * annual_provisions is the current minting annual provisions value.
   * @type {string}
   * @memberof CosmosMintV1beta1QueryAnnualProvisionsResponse
   */
  annual_provisions?: string;
}
/**
 * QueryInflationResponse is the response type for the Query/Inflation RPC method.
 * @export
 * @interface CosmosMintV1beta1QueryInflationResponse
 */
export interface CosmosMintV1beta1QueryInflationResponse {
  /**
   * inflation is the current minting inflation value.
   * @type {string}
   * @memberof CosmosMintV1beta1QueryInflationResponse
   */
  inflation?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface CosmosMintV1beta1QueryParamsResponse
 */
export interface CosmosMintV1beta1QueryParamsResponse {
  /**
   *
   * @type {InlineResponse20032Params}
   * @memberof CosmosMintV1beta1QueryParamsResponse
   */
  params?: InlineResponse20032Params;
}
/**
 * ParamChange defines an individual parameter change, for use in ParameterChangeProposal.
 * @export
 * @interface CosmosParamsV1beta1ParamChange
 */
export interface CosmosParamsV1beta1ParamChange {
  /**
   *
   * @type {string}
   * @memberof CosmosParamsV1beta1ParamChange
   */
  subspace?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosParamsV1beta1ParamChange
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosParamsV1beta1ParamChange
   */
  value?: string;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface CosmosParamsV1beta1QueryParamsResponse
 */
export interface CosmosParamsV1beta1QueryParamsResponse {
  /**
   *
   * @type {InlineResponse20033Param}
   * @memberof CosmosParamsV1beta1QueryParamsResponse
   */
  param?: InlineResponse20033Param;
}
/**
 * Params represents the parameters used for by the slashing module.
 * @export
 * @interface CosmosSlashingV1beta1Params
 */
export interface CosmosSlashingV1beta1Params {
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1Params
   */
  signed_blocks_window?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1Params
   */
  min_signed_per_window?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1Params
   */
  downtime_jail_duration?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1Params
   */
  slash_fraction_double_sign?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1Params
   */
  slash_fraction_downtime?: string;
}
/**
 *
 * @export
 * @interface CosmosSlashingV1beta1QueryParamsResponse
 */
export interface CosmosSlashingV1beta1QueryParamsResponse {
  /**
   *
   * @type {QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams}
   * @memberof CosmosSlashingV1beta1QueryParamsResponse
   */
  params?: QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams;
}
/**
 *
 * @export
 * @interface CosmosSlashingV1beta1QuerySigningInfoResponse
 */
export interface CosmosSlashingV1beta1QuerySigningInfoResponse {
  /**
   *
   * @type {ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress}
   * @memberof CosmosSlashingV1beta1QuerySigningInfoResponse
   */
  val_signing_info?: ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress;
}
/**
 *
 * @export
 * @interface CosmosSlashingV1beta1QuerySigningInfosResponse
 */
export interface CosmosSlashingV1beta1QuerySigningInfosResponse {
  /**
   *
   * @type {Array<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo>}
   * @memberof CosmosSlashingV1beta1QuerySigningInfosResponse
   */
  info?: Array<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo>;
  /**
   *
   * @type {QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination}
   * @memberof CosmosSlashingV1beta1QuerySigningInfosResponse
   */
  pagination?: QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination;
}
/**
 * ValidatorSigningInfo defines a validator\'s signing info for monitoring their liveness activity.
 * @export
 * @interface CosmosSlashingV1beta1ValidatorSigningInfo
 */
export interface CosmosSlashingV1beta1ValidatorSigningInfo {
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
   */
  start_height?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
   */
  index_offset?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
   */
  jailed_until?: string;
  /**
   *
   * @type {boolean}
   * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
   */
  tombstoned?: boolean;
  /**
   *
   * @type {string}
   * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
   */
  missed_blocks_counter?: string;
}
/**
 * BondStatus is the status of a validator.   - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.  - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.  - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.  - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
 * @export
 * @enum {string}
 */
export enum CosmosStakingV1beta1BondStatus {
  Unspecified = "BOND_STATUS_UNSPECIFIED",
  Unbonded = "BOND_STATUS_UNBONDED",
  Unbonding = "BOND_STATUS_UNBONDING",
  Bonded = "BOND_STATUS_BONDED",
}

/**
 * Commission defines commission parameters for a given validator.
 * @export
 * @interface CosmosStakingV1beta1Commission
 */
export interface CosmosStakingV1beta1Commission {
  /**
   *
   * @type {InlineResponse20037CommissionCommissionRates}
   * @memberof CosmosStakingV1beta1Commission
   */
  commission_rates?: InlineResponse20037CommissionCommissionRates;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Commission
   */
  update_time?: string;
}
/**
 * CommissionRates defines the initial commission rates to be used for creating a validator.
 * @export
 * @interface CosmosStakingV1beta1CommissionRates
 */
export interface CosmosStakingV1beta1CommissionRates {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1CommissionRates
   */
  rate?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1CommissionRates
   */
  max_rate?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1CommissionRates
   */
  max_change_rate?: string;
}
/**
 * Delegation represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator.
 * @export
 * @interface CosmosStakingV1beta1Delegation
 */
export interface CosmosStakingV1beta1Delegation {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Delegation
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Delegation
   */
  validator_address?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Delegation
   */
  shares?: string;
}
/**
 * DelegationResponse is equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface CosmosStakingV1beta1DelegationResponse
 */
export interface CosmosStakingV1beta1DelegationResponse {
  /**
   *
   * @type {InlineResponse20034Delegation}
   * @memberof CosmosStakingV1beta1DelegationResponse
   */
  delegation?: InlineResponse20034Delegation;
  /**
   *
   * @type {InlineResponse2002Balances}
   * @memberof CosmosStakingV1beta1DelegationResponse
   */
  balance?: InlineResponse2002Balances;
}
/**
 * Description defines a validator description.
 * @export
 * @interface CosmosStakingV1beta1Description
 */
export interface CosmosStakingV1beta1Description {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Description
   */
  moniker?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Description
   */
  identity?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Description
   */
  website?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Description
   */
  security_contact?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Description
   */
  details?: string;
}
/**
 * HistoricalInfo contains header and validator information for a given block. It is stored as part of staking module\'s state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module\'s `historical_entries` parameter).
 * @export
 * @interface CosmosStakingV1beta1HistoricalInfo
 */
export interface CosmosStakingV1beta1HistoricalInfo {
  /**
   *
   * @type {InlineResponse2006BlockHeader}
   * @memberof CosmosStakingV1beta1HistoricalInfo
   */
  header?: InlineResponse2006BlockHeader;
  /**
   *
   * @type {Array<InlineResponse20037Validators>}
   * @memberof CosmosStakingV1beta1HistoricalInfo
   */
  valset?: Array<InlineResponse20037Validators>;
}
/**
 * Params defines the parameters for the staking module.
 * @export
 * @interface CosmosStakingV1beta1Params
 */
export interface CosmosStakingV1beta1Params {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Params
   */
  unbonding_time?: string;
  /**
   *
   * @type {number}
   * @memberof CosmosStakingV1beta1Params
   */
  max_validators?: number;
  /**
   *
   * @type {number}
   * @memberof CosmosStakingV1beta1Params
   */
  max_entries?: number;
  /**
   *
   * @type {number}
   * @memberof CosmosStakingV1beta1Params
   */
  historical_entries?: number;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Params
   */
  bond_denom?: string;
}
/**
 * Pool is used for tracking bonded and not-bonded token supply of the bond denomination.
 * @export
 * @interface CosmosStakingV1beta1Pool
 */
export interface CosmosStakingV1beta1Pool {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Pool
   */
  not_bonded_tokens?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Pool
   */
  bonded_tokens?: string;
}
/**
 * QueryDelegationResponse is response type for the Query/Delegation RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegationResponse
 */
export interface CosmosStakingV1beta1QueryDelegationResponse {
  /**
   *
   * @type {InlineResponse20042DelegationResponse}
   * @memberof CosmosStakingV1beta1QueryDelegationResponse
   */
  delegation_response?: InlineResponse20042DelegationResponse;
}
/**
 * QueryDelegatorDelegationsResponse is response type for the Query/DelegatorDelegations RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegatorDelegationsResponse
 */
export interface CosmosStakingV1beta1QueryDelegatorDelegationsResponse {
  /**
   * delegation_responses defines all the delegations\' info of a delegator.
   * @type {Array<InlineResponse20034DelegationResponses>}
   * @memberof CosmosStakingV1beta1QueryDelegatorDelegationsResponse
   */
  delegation_responses?: Array<InlineResponse20034DelegationResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosStakingV1beta1QueryDelegatorDelegationsResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryUnbondingDelegatorDelegationsResponse is response type for the Query/UnbondingDelegatorDelegations RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse
 */
export interface CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse {
  /**
   *
   * @type {Array<InlineResponse20036UnbondingResponses>}
   * @memberof CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse
   */
  unbonding_responses?: Array<InlineResponse20036UnbondingResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryDelegatorValidatorResponse response type for the Query/DelegatorValidator RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegatorValidatorResponse
 */
export interface CosmosStakingV1beta1QueryDelegatorValidatorResponse {
  /**
   *
   * @type {InlineResponse20038Validator}
   * @memberof CosmosStakingV1beta1QueryDelegatorValidatorResponse
   */
  validator?: InlineResponse20038Validator;
}
/**
 * QueryDelegatorValidatorsResponse is response type for the Query/DelegatorValidators RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegatorValidatorsResponse
 */
export interface CosmosStakingV1beta1QueryDelegatorValidatorsResponse {
  /**
   * validators defines the the validators\' info of a delegator.
   * @type {Array<InlineResponse20037Validators>}
   * @memberof CosmosStakingV1beta1QueryDelegatorValidatorsResponse
   */
  validators?: Array<InlineResponse20037Validators>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosStakingV1beta1QueryDelegatorValidatorsResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryHistoricalInfoResponse
 */
export interface CosmosStakingV1beta1QueryHistoricalInfoResponse {
  /**
   *
   * @type {InlineResponse20039Hist}
   * @memberof CosmosStakingV1beta1QueryHistoricalInfoResponse
   */
  hist?: InlineResponse20039Hist;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryParamsResponse
 */
export interface CosmosStakingV1beta1QueryParamsResponse {
  /**
   *
   * @type {InlineResponse20040Params}
   * @memberof CosmosStakingV1beta1QueryParamsResponse
   */
  params?: InlineResponse20040Params;
}
/**
 * QueryPoolResponse is response type for the Query/Pool RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryPoolResponse
 */
export interface CosmosStakingV1beta1QueryPoolResponse {
  /**
   *
   * @type {InlineResponse20041Pool}
   * @memberof CosmosStakingV1beta1QueryPoolResponse
   */
  pool?: InlineResponse20041Pool;
}
/**
 * QueryRedelegationsResponse is response type for the Query/Redelegations RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryRedelegationsResponse
 */
export interface CosmosStakingV1beta1QueryRedelegationsResponse {
  /**
   *
   * @type {Array<InlineResponse20035RedelegationResponses>}
   * @memberof CosmosStakingV1beta1QueryRedelegationsResponse
   */
  redelegation_responses?: Array<InlineResponse20035RedelegationResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosStakingV1beta1QueryRedelegationsResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryDelegationResponse is response type for the Query/UnbondingDelegation RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryUnbondingDelegationResponse
 */
export interface CosmosStakingV1beta1QueryUnbondingDelegationResponse {
  /**
   *
   * @type {InlineResponse20043Unbond}
   * @memberof CosmosStakingV1beta1QueryUnbondingDelegationResponse
   */
  unbond?: InlineResponse20043Unbond;
}
/**
 *
 * @export
 * @interface CosmosStakingV1beta1QueryValidatorDelegationsResponse
 */
export interface CosmosStakingV1beta1QueryValidatorDelegationsResponse {
  /**
   *
   * @type {Array<InlineResponse20034DelegationResponses>}
   * @memberof CosmosStakingV1beta1QueryValidatorDelegationsResponse
   */
  delegation_responses?: Array<InlineResponse20034DelegationResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosStakingV1beta1QueryValidatorDelegationsResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 *
 * @export
 * @interface CosmosStakingV1beta1QueryValidatorResponse
 */
export interface CosmosStakingV1beta1QueryValidatorResponse {
  /**
   *
   * @type {InlineResponse20038Validator}
   * @memberof CosmosStakingV1beta1QueryValidatorResponse
   */
  validator?: InlineResponse20038Validator;
}
/**
 * QueryValidatorUnbondingDelegationsResponse is response type for the Query/ValidatorUnbondingDelegations RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryValidatorUnbondingDelegationsResponse
 */
export interface CosmosStakingV1beta1QueryValidatorUnbondingDelegationsResponse {
  /**
   *
   * @type {Array<InlineResponse20036UnbondingResponses>}
   * @memberof CosmosStakingV1beta1QueryValidatorUnbondingDelegationsResponse
   */
  unbonding_responses?: Array<InlineResponse20036UnbondingResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosStakingV1beta1QueryValidatorUnbondingDelegationsResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 *
 * @export
 * @interface CosmosStakingV1beta1QueryValidatorsResponse
 */
export interface CosmosStakingV1beta1QueryValidatorsResponse {
  /**
   * validators contains all the queried validators.
   * @type {Array<InlineResponse20037Validators>}
   * @memberof CosmosStakingV1beta1QueryValidatorsResponse
   */
  validators?: Array<InlineResponse20037Validators>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof CosmosStakingV1beta1QueryValidatorsResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * Redelegation contains the list of a particular delegator\'s redelegating bonds from a particular source validator to a particular destination validator.
 * @export
 * @interface CosmosStakingV1beta1Redelegation
 */
export interface CosmosStakingV1beta1Redelegation {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Redelegation
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Redelegation
   */
  validator_src_address?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Redelegation
   */
  validator_dst_address?: string;
  /**
   *
   * @type {Array<InlineResponse20035RedelegationEntries>}
   * @memberof CosmosStakingV1beta1Redelegation
   */
  entries?: Array<InlineResponse20035RedelegationEntries>;
}
/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 * @export
 * @interface CosmosStakingV1beta1RedelegationEntry
 */
export interface CosmosStakingV1beta1RedelegationEntry {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1RedelegationEntry
   */
  creation_height?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1RedelegationEntry
   */
  completion_time?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1RedelegationEntry
   */
  initial_balance?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1RedelegationEntry
   */
  shares_dst?: string;
}
/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it contains a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface CosmosStakingV1beta1RedelegationEntryResponse
 */
export interface CosmosStakingV1beta1RedelegationEntryResponse {
  /**
   *
   * @type {InlineResponse20035RedelegationEntries}
   * @memberof CosmosStakingV1beta1RedelegationEntryResponse
   */
  redelegation_entry?: InlineResponse20035RedelegationEntries;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1RedelegationEntryResponse
   */
  balance?: string;
}
/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries contain a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface CosmosStakingV1beta1RedelegationResponse
 */
export interface CosmosStakingV1beta1RedelegationResponse {
  /**
   *
   * @type {InlineResponse20035Redelegation}
   * @memberof CosmosStakingV1beta1RedelegationResponse
   */
  redelegation?: InlineResponse20035Redelegation;
  /**
   *
   * @type {Array<InlineResponse20035Entries>}
   * @memberof CosmosStakingV1beta1RedelegationResponse
   */
  entries?: Array<InlineResponse20035Entries>;
}
/**
 * UnbondingDelegation stores all of a single delegator\'s unbonding bonds for a single validator in an time-ordered list.
 * @export
 * @interface CosmosStakingV1beta1UnbondingDelegation
 */
export interface CosmosStakingV1beta1UnbondingDelegation {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1UnbondingDelegation
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1UnbondingDelegation
   */
  validator_address?: string;
  /**
   *
   * @type {Array<InlineResponse20036Entries>}
   * @memberof CosmosStakingV1beta1UnbondingDelegation
   */
  entries?: Array<InlineResponse20036Entries>;
}
/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 * @export
 * @interface CosmosStakingV1beta1UnbondingDelegationEntry
 */
export interface CosmosStakingV1beta1UnbondingDelegationEntry {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1UnbondingDelegationEntry
   */
  creation_height?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1UnbondingDelegationEntry
   */
  completion_time?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1UnbondingDelegationEntry
   */
  initial_balance?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1UnbondingDelegationEntry
   */
  balance?: string;
}
/**
 * Validator defines a validator, together with the total amount of the Validator\'s bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate.
 * @export
 * @interface CosmosStakingV1beta1Validator
 */
export interface CosmosStakingV1beta1Validator {
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Validator
   */
  operator_address?: string;
  /**
   *
   * @type {InlineResponseDefaultDetails}
   * @memberof CosmosStakingV1beta1Validator
   */
  consensus_pubkey?: InlineResponseDefaultDetails;
  /**
   *
   * @type {boolean}
   * @memberof CosmosStakingV1beta1Validator
   */
  jailed?: boolean;
  /**
   * BondStatus is the status of a validator.   - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.  - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.  - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.  - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
   * @type {string}
   * @memberof CosmosStakingV1beta1Validator
   */
  status?: CosmosStakingV1beta1ValidatorStatusEnum;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Validator
   */
  tokens?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Validator
   */
  delegator_shares?: string;
  /**
   *
   * @type {InlineResponse20037Description}
   * @memberof CosmosStakingV1beta1Validator
   */
  description?: InlineResponse20037Description;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Validator
   */
  unbonding_height?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Validator
   */
  unbonding_time?: string;
  /**
   *
   * @type {InlineResponse20037Commission}
   * @memberof CosmosStakingV1beta1Validator
   */
  commission?: InlineResponse20037Commission;
  /**
   *
   * @type {string}
   * @memberof CosmosStakingV1beta1Validator
   */
  min_self_delegation?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum CosmosStakingV1beta1ValidatorStatusEnum {
  Unspecified = "BOND_STATUS_UNSPECIFIED",
  Unbonded = "BOND_STATUS_UNBONDED",
  Unbonding = "BOND_STATUS_UNBONDING",
  Bonded = "BOND_STATUS_BONDED",
}

/**
 * SignMode represents a signing mode with its own security guarantees.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future
 * @export
 * @enum {string}
 */
export enum CosmosTxSigningV1beta1SignMode {
  Unspecified = "SIGN_MODE_UNSPECIFIED",
  Direct = "SIGN_MODE_DIRECT",
  Textual = "SIGN_MODE_TEXTUAL",
  LegacyAminoJson = "SIGN_MODE_LEGACY_AMINO_JSON",
}

/**
 * AuthInfo describes the fee and signer modes that are used to sign a transaction.
 * @export
 * @interface CosmosTxV1beta1AuthInfo
 */
export interface CosmosTxV1beta1AuthInfo {
  /**
   * signer_infos defines the signing modes for the required signers. The number and order of elements must match the required signers from TxBody\'s messages. The first element is the primary signer and the one which pays the fee.
   * @type {Array<CosmosTxV1beta1SignerInfo>}
   * @memberof CosmosTxV1beta1AuthInfo
   */
  signer_infos?: Array<CosmosTxV1beta1SignerInfo>;
  /**
   *
   * @type {CosmosTxV1beta1AuthInfoFee}
   * @memberof CosmosTxV1beta1AuthInfo
   */
  fee?: CosmosTxV1beta1AuthInfoFee;
}
/**
 * Fee is the fee and gas limit for the transaction. The first signer is the primary signer and the one which pays the fee. The fee can be calculated based on the cost of evaluating the body and doing signature verification of the signers. This can be estimated via simulation.
 * @export
 * @interface CosmosTxV1beta1AuthInfoFee
 */
export interface CosmosTxV1beta1AuthInfoFee {
  /**
   *
   * @type {Array<InlineResponse2002Balances>}
   * @memberof CosmosTxV1beta1AuthInfoFee
   */
  amount?: Array<InlineResponse2002Balances>;
  /**
   *
   * @type {string}
   * @memberof CosmosTxV1beta1AuthInfoFee
   */
  gas_limit?: string;
  /**
   * if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees. the payer must be a tx signer (and thus have signed this field in AuthInfo). setting this field does *not* change the ordering of required signers for the transaction.
   * @type {string}
   * @memberof CosmosTxV1beta1AuthInfoFee
   */
  payer?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosTxV1beta1AuthInfoFee
   */
  granter?: string;
}
/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering  - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for the tx to be committed in a block.  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for a CheckTx execution response only.  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns immediately.
 * @export
 * @enum {string}
 */
export enum CosmosTxV1beta1BroadcastMode {
  Unspecified = "BROADCAST_MODE_UNSPECIFIED",
  Block = "BROADCAST_MODE_BLOCK",
  Sync = "BROADCAST_MODE_SYNC",
  Async = "BROADCAST_MODE_ASYNC",
}

/**
 * BroadcastTxRequest is the request type for the Service.BroadcastTxRequest RPC method.
 * @export
 * @interface CosmosTxV1beta1BroadcastTxRequest
 */
export interface CosmosTxV1beta1BroadcastTxRequest {
  /**
   * tx_bytes is the raw transaction.
   * @type {string}
   * @memberof CosmosTxV1beta1BroadcastTxRequest
   */
  tx_bytes?: string;
  /**
   * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering  - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for the tx to be committed in a block.  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for a CheckTx execution response only.  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns immediately.
   * @type {string}
   * @memberof CosmosTxV1beta1BroadcastTxRequest
   */
  mode?: CosmosTxV1beta1BroadcastTxRequestModeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum CosmosTxV1beta1BroadcastTxRequestModeEnum {
  Unspecified = "BROADCAST_MODE_UNSPECIFIED",
  Block = "BROADCAST_MODE_BLOCK",
  Sync = "BROADCAST_MODE_SYNC",
  Async = "BROADCAST_MODE_ASYNC",
}

/**
 * BroadcastTxResponse is the response type for the Service.BroadcastTx method.
 * @export
 * @interface CosmosTxV1beta1BroadcastTxResponse
 */
export interface CosmosTxV1beta1BroadcastTxResponse {
  /**
   *
   * @type {InlineResponse20046TxResponse}
   * @memberof CosmosTxV1beta1BroadcastTxResponse
   */
  tx_response?: InlineResponse20046TxResponse;
}
/**
 * Fee includes the amount of coins paid in fees and the maximum gas to be used by the transaction. The ratio yields an effective \"gasprice\", which must be above some miminum to be accepted into the mempool.
 * @export
 * @interface CosmosTxV1beta1Fee
 */
export interface CosmosTxV1beta1Fee {
  /**
   *
   * @type {Array<InlineResponse2002Balances>}
   * @memberof CosmosTxV1beta1Fee
   */
  amount?: Array<InlineResponse2002Balances>;
  /**
   *
   * @type {string}
   * @memberof CosmosTxV1beta1Fee
   */
  gas_limit?: string;
  /**
   * if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees. the payer must be a tx signer (and thus have signed this field in AuthInfo). setting this field does *not* change the ordering of required signers for the transaction.
   * @type {string}
   * @memberof CosmosTxV1beta1Fee
   */
  payer?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosTxV1beta1Fee
   */
  granter?: string;
}
/**
 * GetTxResponse is the response type for the Service.GetTx method.
 * @export
 * @interface CosmosTxV1beta1GetTxResponse
 */
export interface CosmosTxV1beta1GetTxResponse {
  /**
   *
   * @type {CosmosTxV1beta1Tx}
   * @memberof CosmosTxV1beta1GetTxResponse
   */
  tx?: CosmosTxV1beta1Tx;
  /**
   *
   * @type {InlineResponse20046TxResponse}
   * @memberof CosmosTxV1beta1GetTxResponse
   */
  tx_response?: InlineResponse20046TxResponse;
}
/**
 * GetTxsEventResponse is the response type for the Service.TxsByEvents RPC method.
 * @export
 * @interface CosmosTxV1beta1GetTxsEventResponse
 */
export interface CosmosTxV1beta1GetTxsEventResponse {
  /**
   * txs is the list of queried transactions.
   * @type {Array<CosmosTxV1beta1Tx>}
   * @memberof CosmosTxV1beta1GetTxsEventResponse
   */
  txs?: Array<CosmosTxV1beta1Tx>;
  /**
   * tx_responses is the list of queried TxResponses.
   * @type {Array<CosmosTxV1beta1GetTxsEventResponseTxResponses>}
   * @memberof CosmosTxV1beta1GetTxsEventResponse
   */
  tx_responses?: Array<CosmosTxV1beta1GetTxsEventResponseTxResponses>;
  /**
   *
   * @type {InlineResponse20010Pagination}
   * @memberof CosmosTxV1beta1GetTxsEventResponse
   */
  pagination?: InlineResponse20010Pagination;
}
/**
 * TxResponse defines a structure containing relevant tx data and metadata. The tags are stringified and the log is JSON decoded.
 * @export
 * @interface CosmosTxV1beta1GetTxsEventResponseTxResponses
 */
export interface CosmosTxV1beta1GetTxsEventResponseTxResponses {
  /**
   *
   * @type {string}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  height?: string;
  /**
   * The transaction hash.
   * @type {string}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  txhash?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  codespace?: string;
  /**
   * Response code.
   * @type {number}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  code?: number;
  /**
   * Result bytes, if any.
   * @type {string}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  data?: string;
  /**
   * The output of the application\'s logger (raw string). May be non-deterministic.
   * @type {string}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  raw_log?: string;
  /**
   * The output of the application\'s logger (typed). May be non-deterministic.
   * @type {Array<InlineResponse20046TxResponseLogs>}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  logs?: Array<InlineResponse20046TxResponseLogs>;
  /**
   * Additional information. May be non-deterministic.
   * @type {string}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  info?: string;
  /**
   * Amount of gas requested for transaction.
   * @type {string}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  gas_wanted?: string;
  /**
   * Amount of gas consumed by transaction.
   * @type {string}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  gas_used?: string;
  /**
   *
   * @type {InlineResponse20046TxResponseTx}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  tx?: InlineResponse20046TxResponseTx;
  /**
   * Time of the previous block. For heights > 1, it\'s the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it\'s genesis time.
   * @type {string}
   * @memberof CosmosTxV1beta1GetTxsEventResponseTxResponses
   */
  timestamp?: string;
}
/**
 * ModeInfo describes the signing mode of a single or nested multisig signer.
 * @export
 * @interface CosmosTxV1beta1ModeInfo
 */
export interface CosmosTxV1beta1ModeInfo {
  /**
   *
   * @type {SingleRepresentsASingleSigner}
   * @memberof CosmosTxV1beta1ModeInfo
   */
  single?: SingleRepresentsASingleSigner;
  /**
   *
   * @type {CosmosTxV1beta1ModeInfoMulti}
   * @memberof CosmosTxV1beta1ModeInfo
   */
  multi?: CosmosTxV1beta1ModeInfoMulti;
}
/**
 *
 * @export
 * @interface CosmosTxV1beta1ModeInfoMulti
 */
export interface CosmosTxV1beta1ModeInfoMulti {
  /**
   *
   * @type {BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning}
   * @memberof CosmosTxV1beta1ModeInfoMulti
   */
  bitarray?: BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning;
  /**
   *
   * @type {Array<CosmosTxV1beta1ModeInfo>}
   * @memberof CosmosTxV1beta1ModeInfoMulti
   */
  mode_infos?: Array<CosmosTxV1beta1ModeInfo>;
}
/**
 *
 * @export
 * @interface CosmosTxV1beta1ModeInfoSingle
 */
export interface CosmosTxV1beta1ModeInfoSingle {
  /**
   * SignMode represents a signing mode with its own security guarantees.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future
   * @type {string}
   * @memberof CosmosTxV1beta1ModeInfoSingle
   */
  mode?: CosmosTxV1beta1ModeInfoSingleModeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum CosmosTxV1beta1ModeInfoSingleModeEnum {
  Unspecified = "SIGN_MODE_UNSPECIFIED",
  Direct = "SIGN_MODE_DIRECT",
  Textual = "SIGN_MODE_TEXTUAL",
  LegacyAminoJson = "SIGN_MODE_LEGACY_AMINO_JSON",
}

/**
 * SignerInfo describes the public key and signing mode of a single top-level signer.
 * @export
 * @interface CosmosTxV1beta1SignerInfo
 */
export interface CosmosTxV1beta1SignerInfo {
  /**
   *
   * @type {CosmosTxV1beta1SignerInfoPublicKey}
   * @memberof CosmosTxV1beta1SignerInfo
   */
  public_key?: CosmosTxV1beta1SignerInfoPublicKey;
  /**
   *
   * @type {CosmosTxV1beta1ModeInfo}
   * @memberof CosmosTxV1beta1SignerInfo
   */
  mode_info?: CosmosTxV1beta1ModeInfo;
  /**
   * sequence is the sequence of the account, which describes the number of committed transactions signed by a given address. It is used to prevent replay attacks.
   * @type {string}
   * @memberof CosmosTxV1beta1SignerInfo
   */
  sequence?: string;
}
/**
 * public_key is the public key of the signer. It is optional for accounts that already exist in state. If unset, the verifier can use the required \\ signer address for this position and lookup the public key.
 * @export
 * @interface CosmosTxV1beta1SignerInfoPublicKey
 */
// export interface CosmosTxV1beta1SignerInfoPublicKey {
//   /**
//    * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
//    * @type {string}
//    * @memberof CosmosTxV1beta1SignerInfoPublicKey
//    */
//   type_url?: string;
//   /**
//    * Must be a valid serialized protocol buffer of the above specified type.
//    * @type {string}
//    * @memberof CosmosTxV1beta1SignerInfoPublicKey
//    */
//   value?: string;
// }
export interface CosmosTxV1beta1SignerInfoPublicKey extends AnyI {}
/**
 * SimulateRequest is the request type for the Service.Simulate RPC method.
 * @export
 * @interface CosmosTxV1beta1SimulateRequest
 */
export interface CosmosTxV1beta1SimulateRequest {
  /**
   *
   * @type {CosmosTxV1beta1Tx}
   * @memberof CosmosTxV1beta1SimulateRequest
   */
  tx?: CosmosTxV1beta1Tx;
}
/**
 * SimulateResponse is the response type for the Service.SimulateRPC method.
 * @export
 * @interface CosmosTxV1beta1SimulateResponse
 */
export interface CosmosTxV1beta1SimulateResponse {
  /**
   *
   * @type {InlineResponse20045GasInfo}
   * @memberof CosmosTxV1beta1SimulateResponse
   */
  gas_info?: InlineResponse20045GasInfo;
  /**
   *
   * @type {InlineResponse20045Result}
   * @memberof CosmosTxV1beta1SimulateResponse
   */
  result?: InlineResponse20045Result;
}
/**
 * Tx is the standard type used for broadcasting transactions.
 * @export
 * @interface CosmosTxV1beta1Tx
 */
export interface CosmosTxV1beta1Tx {
  /**
   *
   * @type {BodyIsTheProcessableContentOfTheTransaction}
   * @memberof CosmosTxV1beta1Tx
   */
  body?: BodyIsTheProcessableContentOfTheTransaction;
  /**
   *
   * @type {CosmosTxV1beta1AuthInfo}
   * @memberof CosmosTxV1beta1Tx
   */
  auth_info?: CosmosTxV1beta1AuthInfo;
  /**
   * signatures is a list of signatures that matches the length and order of AuthInfo\'s signer_infos to allow connecting signature meta information like public key and signing mode by position.
   * @type {Array<string>}
   * @memberof CosmosTxV1beta1Tx
   */
  signatures?: Array<string>;
}
/**
 * TxBody is the body of a transaction that all signers sign over.
 * @export
 * @interface CosmosTxV1beta1TxBody
 */
export interface CosmosTxV1beta1TxBody {
  /**
   * messages is a list of messages to be executed. The required signers of those messages define the number and order of elements in AuthInfo\'s signer_infos and Tx\'s signatures. Each required signer address is added to the list only the first time it occurs.  By convention, the first required signer (usually from the first message) is referred to as the primary signer and pays the fee for the whole transaction.
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof CosmosTxV1beta1TxBody
   */
  messages?: Array<InlineResponseDefaultDetails>;
  /**
   *
   * @type {string}
   * @memberof CosmosTxV1beta1TxBody
   */
  memo?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosTxV1beta1TxBody
   */
  timeout_height?: string;
  /**
   *
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof CosmosTxV1beta1TxBody
   */
  extension_options?: Array<InlineResponseDefaultDetails>;
  /**
   *
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof CosmosTxV1beta1TxBody
   */
  non_critical_extension_options?: Array<InlineResponseDefaultDetails>;
}
/**
 * Plan specifies information about a planned upgrade and when it should occur.
 * @export
 * @interface CosmosUpgradeV1beta1Plan
 */
export interface CosmosUpgradeV1beta1Plan {
  /**
   * Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special \"on-upgrade\" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.
   * @type {string}
   * @memberof CosmosUpgradeV1beta1Plan
   */
  name?: string;
  /**
   * The time after which the upgrade must be performed. Leave set to its zero value to use a pre-defined Height instead.
   * @type {string}
   * @memberof CosmosUpgradeV1beta1Plan
   */
  time?: string;
  /**
   * The height at which the upgrade must be performed. Only used if Time is not set.
   * @type {string}
   * @memberof CosmosUpgradeV1beta1Plan
   */
  height?: string;
  /**
   *
   * @type {string}
   * @memberof CosmosUpgradeV1beta1Plan
   */
  info?: string;
  /**
   *
   * @type {IBCEnabledChainsCanOptInToIncludingTheUpgradedClientStateInItsUpgradePlanThisWillMakeTheChainCommitToTheCorrectUpgradedSelfClientStateBeforeTheUpgradeOccursSoThatConnectingChainsCanVerifyThatTheNewUpgradedClientIsValidByVerifyingAProofOnThePreviousVersionOfTheChainThisWillAllowIBCConnectionsToPersistSmoothlyAcrossPlannedChainUpgrades}
   * @memberof CosmosUpgradeV1beta1Plan
   */
  upgraded_client_state?: IBCEnabledChainsCanOptInToIncludingTheUpgradedClientStateInItsUpgradePlanThisWillMakeTheChainCommitToTheCorrectUpgradedSelfClientStateBeforeTheUpgradeOccursSoThatConnectingChainsCanVerifyThatTheNewUpgradedClientIsValidByVerifyingAProofOnThePreviousVersionOfTheChainThisWillAllowIBCConnectionsToPersistSmoothlyAcrossPlannedChainUpgrades;
}
/**
 * QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC method.
 * @export
 * @interface CosmosUpgradeV1beta1QueryAppliedPlanResponse
 */
export interface CosmosUpgradeV1beta1QueryAppliedPlanResponse {
  /**
   * height is the block height at which the plan was applied.
   * @type {string}
   * @memberof CosmosUpgradeV1beta1QueryAppliedPlanResponse
   */
  height?: string;
}
/**
 * QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC method.
 * @export
 * @interface CosmosUpgradeV1beta1QueryCurrentPlanResponse
 */
export interface CosmosUpgradeV1beta1QueryCurrentPlanResponse {
  /**
   *
   * @type {InlineResponse20048Plan}
   * @memberof CosmosUpgradeV1beta1QueryCurrentPlanResponse
   */
  plan?: InlineResponse20048Plan;
}
/**
 * QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState RPC method.
 * @export
 * @interface CosmosUpgradeV1beta1QueryUpgradedConsensusStateResponse
 */
export interface CosmosUpgradeV1beta1QueryUpgradedConsensusStateResponse {
  /**
   *
   * @type {InlineResponseDefaultDetails}
   * @memberof CosmosUpgradeV1beta1QueryUpgradedConsensusStateResponse
   */
  upgraded_consensus_state?: InlineResponseDefaultDetails;
}
/**
 *
 * @export
 * @interface CounterpartyChannelEnd
 */
export interface CounterpartyChannelEnd {
  /**
   * port on the counterparty chain which owns the other end of the channel.
   * @type {string}
   * @memberof CounterpartyChannelEnd
   */
  port_id?: string;
  /**
   *
   * @type {string}
   * @memberof CounterpartyChannelEnd
   */
  channel_id?: string;
}
/**
 *
 * @export
 * @interface DataContainsTheSetOfTransactionsIncludedInTheBlock
 */
export interface DataContainsTheSetOfTransactionsIncludedInTheBlock {
  /**
   * Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We\'re just agreeing on the order first. This means that block.AppHash does not include these txs.
   * @type {Array<string>}
   * @memberof DataContainsTheSetOfTransactionsIncludedInTheBlock
   */
  txs?: Array<string>;
}
/**
 *
 * @export
 * @interface Delegation
 */
export interface Delegation {
  /**
   *
   * @type {string}
   * @memberof Delegation
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof Delegation
   */
  validator_address?: string;
  /**
   *
   * @type {string}
   * @memberof Delegation
   */
  shares?: string;
  /**
   *
   * @type {TxQueryTxFeeAmount}
   * @memberof Delegation
   */
  balance?: TxQueryTxFeeAmount;
}
/**
 *
 * @export
 * @interface DelegationDelegatorReward
 */
export interface DelegationDelegatorReward {
  /**
   * bech32 encoded address
   * @type {string}
   * @memberof DelegationDelegatorReward
   */
  validator_address?: string;
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof DelegationDelegatorReward
   */
  reward?: Array<TxQueryTxFeeAmount>;
}
/**
 *
 * @export
 * @interface DelegatorTotalRewards
 */
export interface DelegatorTotalRewards {
  /**
   *
   * @type {Array<DelegatorTotalRewardsRewards>}
   * @memberof DelegatorTotalRewards
   */
  rewards?: Array<DelegatorTotalRewardsRewards>;
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof DelegatorTotalRewards
   */
  total?: Array<TxQueryTxFeeAmount>;
}
/**
 *
 * @export
 * @interface DelegatorTotalRewardsRewards
 */
export interface DelegatorTotalRewardsRewards {
  /**
   * bech32 encoded address
   * @type {string}
   * @memberof DelegatorTotalRewardsRewards
   */
  validator_address?: string;
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof DelegatorTotalRewardsRewards
   */
  reward?: Array<TxQueryTxFeeAmount>;
}
/**
 *
 * @export
 * @interface DeliverTxResult
 */
export interface DeliverTxResult {
  /**
   *
   * @type {number}
   * @memberof DeliverTxResult
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof DeliverTxResult
   */
  data?: string;
  /**
   *
   * @type {number}
   * @memberof DeliverTxResult
   */
  gas_used?: number;
  /**
   *
   * @type {number}
   * @memberof DeliverTxResult
   */
  gas_wanted?: number;
  /**
   *
   * @type {string}
   * @memberof DeliverTxResult
   */
  info?: string;
  /**
   *
   * @type {string}
   * @memberof DeliverTxResult
   */
  log?: string;
  /**
   *
   * @type {Array<CheckTxResultTags>}
   * @memberof DeliverTxResult
   */
  tags?: Array<CheckTxResultTags>;
}
/**
 *
 * @export
 * @interface Deposit
 */
export interface Deposit {
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof Deposit
   */
  amount?: Array<TxQueryTxFeeAmount>;
  /**
   *
   * @type {string}
   * @memberof Deposit
   */
  proposal_id?: string;
  /**
   * bech32 encoded address
   * @type {string}
   * @memberof Deposit
   */
  depositor?: string;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface GoogleProtobufAny
 */
export interface GoogleProtobufAny {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof GoogleProtobufAny
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof GoogleProtobufAny
   */
  value?: string;
}
/**
 *
 * @export
 * @interface GrpcGatewayRuntimeError
 */
export interface GrpcGatewayRuntimeError {
  /**
   *
   * @type {string}
   * @memberof GrpcGatewayRuntimeError
   */
  error?: string;
  /**
   *
   * @type {number}
   * @memberof GrpcGatewayRuntimeError
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof GrpcGatewayRuntimeError
   */
  message?: string;
  /**
   *
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof GrpcGatewayRuntimeError
   */
  details?: Array<InlineResponseDefaultDetails>;
}
/**
 * Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset
 * @export
 * @interface HeightAtWhichTheProofWasGenerated
 */
export interface HeightAtWhichTheProofWasGenerated {
  /**
   *
   * @type {string}
   * @memberof HeightAtWhichTheProofWasGenerated
   */
  revision_number?: string;
  /**
   *
   * @type {string}
   * @memberof HeightAtWhichTheProofWasGenerated
   */
  revision_height?: string;
}
/**
 * Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset
 * @export
 * @interface HeightAtWhichTheProofWasRetrieved
 */
export interface HeightAtWhichTheProofWasRetrieved {
  /**
   *
   * @type {string}
   * @memberof HeightAtWhichTheProofWasRetrieved
   */
  revision_number?: string;
  /**
   *
   * @type {string}
   * @memberof HeightAtWhichTheProofWasRetrieved
   */
  revision_height?: string;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface IBCEnabledChainsCanOptInToIncludingTheUpgradedClientStateInItsUpgradePlanThisWillMakeTheChainCommitToTheCorrectUpgradedSelfClientStateBeforeTheUpgradeOccursSoThatConnectingChainsCanVerifyThatTheNewUpgradedClientIsValidByVerifyingAProofOnThePreviousVersionOfTheChainThisWillAllowIBCConnectionsToPersistSmoothlyAcrossPlannedChainUpgrades
 */
export interface IBCEnabledChainsCanOptInToIncludingTheUpgradedClientStateInItsUpgradePlanThisWillMakeTheChainCommitToTheCorrectUpgradedSelfClientStateBeforeTheUpgradeOccursSoThatConnectingChainsCanVerifyThatTheNewUpgradedClientIsValidByVerifyingAProofOnThePreviousVersionOfTheChainThisWillAllowIBCConnectionsToPersistSmoothlyAcrossPlannedChainUpgrades {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof IBCEnabledChainsCanOptInToIncludingTheUpgradedClientStateInItsUpgradePlanThisWillMakeTheChainCommitToTheCorrectUpgradedSelfClientStateBeforeTheUpgradeOccursSoThatConnectingChainsCanVerifyThatTheNewUpgradedClientIsValidByVerifyingAProofOnThePreviousVersionOfTheChainThisWillAllowIBCConnectionsToPersistSmoothlyAcrossPlannedChainUpgrades
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof IBCEnabledChainsCanOptInToIncludingTheUpgradedClientStateInItsUpgradePlanThisWillMakeTheChainCommitToTheCorrectUpgradedSelfClientStateBeforeTheUpgradeOccursSoThatConnectingChainsCanVerifyThatTheNewUpgradedClientIsValidByVerifyingAProofOnThePreviousVersionOfTheChainThisWillAllowIBCConnectionsToPersistSmoothlyAcrossPlannedChainUpgrades
   */
  value?: string;
}
/**
 * DenomTrace contains the base denomination for ICS20 fungible tokens and the source tracing information path.
 * @export
 * @interface IbcApplicationsTransferV1DenomTrace
 */
export interface IbcApplicationsTransferV1DenomTrace {
  /**
   * path defines the chain of port/channel identifiers used for tracing the source of the fungible token.
   * @type {string}
   * @memberof IbcApplicationsTransferV1DenomTrace
   */
  path?: string;
  /**
   * base denomination of the relayed fungible token.
   * @type {string}
   * @memberof IbcApplicationsTransferV1DenomTrace
   */
  base_denom?: string;
}
/**
 * Params defines the set of IBC transfer parameters. NOTE: To prevent a single token from being transferred, set the TransfersEnabled parameter to true and then set the bank module\'s SendEnabled parameter for the denomination to false.
 * @export
 * @interface IbcApplicationsTransferV1Params
 */
export interface IbcApplicationsTransferV1Params {
  /**
   * send_enabled enables or disables all cross-chain token transfers from this chain.
   * @type {boolean}
   * @memberof IbcApplicationsTransferV1Params
   */
  send_enabled?: boolean;
  /**
   * receive_enabled enables or disables all cross-chain token transfers to this chain.
   * @type {boolean}
   * @memberof IbcApplicationsTransferV1Params
   */
  receive_enabled?: boolean;
}
/**
 * QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC method.
 * @export
 * @interface IbcApplicationsTransferV1QueryDenomTraceResponse
 */
export interface IbcApplicationsTransferV1QueryDenomTraceResponse {
  /**
   *
   * @type {InlineResponse20058DenomTrace}
   * @memberof IbcApplicationsTransferV1QueryDenomTraceResponse
   */
  denom_trace?: InlineResponse20058DenomTrace;
}
/**
 * QueryConnectionsResponse is the response type for the Query/DenomTraces RPC method.
 * @export
 * @interface IbcApplicationsTransferV1QueryDenomTracesResponse
 */
export interface IbcApplicationsTransferV1QueryDenomTracesResponse {
  /**
   * denom_traces returns all denominations trace information.
   * @type {Array<InlineResponse20057DenomTraces>}
   * @memberof IbcApplicationsTransferV1QueryDenomTracesResponse
   */
  denom_traces?: Array<InlineResponse20057DenomTraces>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof IbcApplicationsTransferV1QueryDenomTracesResponse
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface IbcApplicationsTransferV1QueryParamsResponse
 */
export interface IbcApplicationsTransferV1QueryParamsResponse {
  /**
   *
   * @type {InlineResponse20059Params}
   * @memberof IbcApplicationsTransferV1QueryParamsResponse
   */
  params?: InlineResponse20059Params;
}
/**
 * Channel defines pipeline for exactly-once packet delivery between specific modules on separate blockchains, which has at least one end capable of sending packets and one end capable of receiving packets.
 * @export
 * @interface IbcCoreChannelV1Channel
 */
export interface IbcCoreChannelV1Channel {
  /**
   * State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.   - STATE_UNINITIALIZED_UNSPECIFIED: Default State  - STATE_INIT: A channel has just started the opening handshake.  - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.  - STATE_OPEN: A channel has completed the handshake. Open channels are ready to send and receive packets.  - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive packets.
   * @type {string}
   * @memberof IbcCoreChannelV1Channel
   */
  state?: IbcCoreChannelV1ChannelStateEnum;
  /**
   * - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering  - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in which they were sent.  - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
   * @type {string}
   * @memberof IbcCoreChannelV1Channel
   */
  ordering?: IbcCoreChannelV1ChannelOrderingEnum;
  /**
   *
   * @type {CounterpartyChannelEnd}
   * @memberof IbcCoreChannelV1Channel
   */
  counterparty?: CounterpartyChannelEnd;
  /**
   *
   * @type {Array<string>}
   * @memberof IbcCoreChannelV1Channel
   */
  connection_hops?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1Channel
   */
  version?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum IbcCoreChannelV1ChannelStateEnum {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
  Closed = "STATE_CLOSED",
}
/**
 * @export
 * @enum {string}
 */
export enum IbcCoreChannelV1ChannelOrderingEnum {
  NoneUnspecified = "ORDER_NONE_UNSPECIFIED",
  Unordered = "ORDER_UNORDERED",
  Ordered = "ORDER_ORDERED",
}

/**
 *
 * @export
 * @interface IbcCoreChannelV1Counterparty
 */
export interface IbcCoreChannelV1Counterparty {
  /**
   * port on the counterparty chain which owns the other end of the channel.
   * @type {string}
   * @memberof IbcCoreChannelV1Counterparty
   */
  port_id?: string;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1Counterparty
   */
  channel_id?: string;
}
/**
 * IdentifiedChannel defines a channel with additional port and channel identifier fields.
 * @export
 * @interface IbcCoreChannelV1IdentifiedChannel
 */
export interface IbcCoreChannelV1IdentifiedChannel {
  /**
   * State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.   - STATE_UNINITIALIZED_UNSPECIFIED: Default State  - STATE_INIT: A channel has just started the opening handshake.  - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.  - STATE_OPEN: A channel has completed the handshake. Open channels are ready to send and receive packets.  - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive packets.
   * @type {string}
   * @memberof IbcCoreChannelV1IdentifiedChannel
   */
  state?: IbcCoreChannelV1IdentifiedChannelStateEnum;
  /**
   * - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering  - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in which they were sent.  - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
   * @type {string}
   * @memberof IbcCoreChannelV1IdentifiedChannel
   */
  ordering?: IbcCoreChannelV1IdentifiedChannelOrderingEnum;
  /**
   *
   * @type {CounterpartyChannelEnd}
   * @memberof IbcCoreChannelV1IdentifiedChannel
   */
  counterparty?: CounterpartyChannelEnd;
  /**
   *
   * @type {Array<string>}
   * @memberof IbcCoreChannelV1IdentifiedChannel
   */
  connection_hops?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1IdentifiedChannel
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1IdentifiedChannel
   */
  port_id?: string;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1IdentifiedChannel
   */
  channel_id?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum IbcCoreChannelV1IdentifiedChannelStateEnum {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
  Closed = "STATE_CLOSED",
}
/**
 * @export
 * @enum {string}
 */
export enum IbcCoreChannelV1IdentifiedChannelOrderingEnum {
  NoneUnspecified = "ORDER_NONE_UNSPECIFIED",
  Unordered = "ORDER_UNORDERED",
  Ordered = "ORDER_ORDERED",
}

/**
 * - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering  - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in which they were sent.  - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
 * @export
 * @enum {string}
 */
export enum IbcCoreChannelV1Order {
  NoneUnspecified = "ORDER_NONE_UNSPECIFIED",
  Unordered = "ORDER_UNORDERED",
  Ordered = "ORDER_ORDERED",
}

/**
 * PacketState defines the generic type necessary to retrieve and store packet commitments, acknowledgements, and receipts. Caller is responsible for knowing the context necessary to interpret this state as a commitment, acknowledgement, or a receipt.
 * @export
 * @interface IbcCoreChannelV1PacketState
 */
export interface IbcCoreChannelV1PacketState {
  /**
   * channel port identifier.
   * @type {string}
   * @memberof IbcCoreChannelV1PacketState
   */
  port_id?: string;
  /**
   * channel unique identifier.
   * @type {string}
   * @memberof IbcCoreChannelV1PacketState
   */
  channel_id?: string;
  /**
   * packet sequence.
   * @type {string}
   * @memberof IbcCoreChannelV1PacketState
   */
  sequence?: string;
  /**
   * embedded data that represents packet state.
   * @type {string}
   * @memberof IbcCoreChannelV1PacketState
   */
  data?: string;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryChannelClientStateResponse
 */
export interface IbcCoreChannelV1QueryChannelClientStateResponse {
  /**
   *
   * @type {ClientStateAssociatedWithTheChannel}
   * @memberof IbcCoreChannelV1QueryChannelClientStateResponse
   */
  identified_client_state?: ClientStateAssociatedWithTheChannel;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryChannelClientStateResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreChannelV1QueryChannelClientStateResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryChannelConsensusStateResponse
 */
export interface IbcCoreChannelV1QueryChannelConsensusStateResponse {
  /**
   *
   * @type {ConsensusStateAssociatedWithTheChannel}
   * @memberof IbcCoreChannelV1QueryChannelConsensusStateResponse
   */
  consensus_state?: ConsensusStateAssociatedWithTheChannel;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryChannelConsensusStateResponse
   */
  client_id?: string;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryChannelConsensusStateResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreChannelV1QueryChannelConsensusStateResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 * QueryChannelResponse is the response type for the Query/Channel RPC method. Besides the Channel end, it includes a proof and the height from which the proof was retrieved.
 * @export
 * @interface IbcCoreChannelV1QueryChannelResponse
 */
export interface IbcCoreChannelV1QueryChannelResponse {
  /**
   *
   * @type {ChannelAssociatedWithTheRequestIdentifiers}
   * @memberof IbcCoreChannelV1QueryChannelResponse
   */
  channel?: ChannelAssociatedWithTheRequestIdentifiers;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryChannelResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreChannelV1QueryChannelResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 * QueryChannelsResponse is the response type for the Query/Channels RPC method.
 * @export
 * @interface IbcCoreChannelV1QueryChannelsResponse
 */
export interface IbcCoreChannelV1QueryChannelsResponse {
  /**
   * list of stored channels of the chain.
   * @type {Array<InlineResponse20050Channels>}
   * @memberof IbcCoreChannelV1QueryChannelsResponse
   */
  channels?: Array<InlineResponse20050Channels>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof IbcCoreChannelV1QueryChannelsResponse
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof IbcCoreChannelV1QueryChannelsResponse
   */
  height?: QueryBlockHeight;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryConnectionChannelsResponse
 */
export interface IbcCoreChannelV1QueryConnectionChannelsResponse {
  /**
   * list of channels associated with a connection.
   * @type {Array<InlineResponse20050Channels>}
   * @memberof IbcCoreChannelV1QueryConnectionChannelsResponse
   */
  channels?: Array<InlineResponse20050Channels>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof IbcCoreChannelV1QueryConnectionChannelsResponse
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof IbcCoreChannelV1QueryConnectionChannelsResponse
   */
  height?: QueryBlockHeight;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryNextSequenceReceiveResponse
 */
export interface IbcCoreChannelV1QueryNextSequenceReceiveResponse {
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryNextSequenceReceiveResponse
   */
  next_sequence_receive?: string;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryNextSequenceReceiveResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreChannelV1QueryNextSequenceReceiveResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryPacketAcknowledgementResponse
 */
export interface IbcCoreChannelV1QueryPacketAcknowledgementResponse {
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryPacketAcknowledgementResponse
   */
  acknowledgement?: string;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryPacketAcknowledgementResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreChannelV1QueryPacketAcknowledgementResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryPacketAcknowledgementsResponse
 */
export interface IbcCoreChannelV1QueryPacketAcknowledgementsResponse {
  /**
   *
   * @type {Array<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements>}
   * @memberof IbcCoreChannelV1QueryPacketAcknowledgementsResponse
   */
  acknowledgements?: Array<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof IbcCoreChannelV1QueryPacketAcknowledgementsResponse
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof IbcCoreChannelV1QueryPacketAcknowledgementsResponse
   */
  height?: QueryBlockHeight;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryPacketCommitmentResponse
 */
export interface IbcCoreChannelV1QueryPacketCommitmentResponse {
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryPacketCommitmentResponse
   */
  commitment?: string;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryPacketCommitmentResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreChannelV1QueryPacketCommitmentResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryPacketCommitmentsResponse
 */
export interface IbcCoreChannelV1QueryPacketCommitmentsResponse {
  /**
   *
   * @type {Array<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements>}
   * @memberof IbcCoreChannelV1QueryPacketCommitmentsResponse
   */
  commitments?: Array<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof IbcCoreChannelV1QueryPacketCommitmentsResponse
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof IbcCoreChannelV1QueryPacketCommitmentsResponse
   */
  height?: QueryBlockHeight;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryPacketReceiptResponse
 */
export interface IbcCoreChannelV1QueryPacketReceiptResponse {
  /**
   *
   * @type {boolean}
   * @memberof IbcCoreChannelV1QueryPacketReceiptResponse
   */
  received?: boolean;
  /**
   *
   * @type {string}
   * @memberof IbcCoreChannelV1QueryPacketReceiptResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreChannelV1QueryPacketReceiptResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryUnreceivedAcksResponse
 */
export interface IbcCoreChannelV1QueryUnreceivedAcksResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof IbcCoreChannelV1QueryUnreceivedAcksResponse
   */
  sequences?: Array<string>;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof IbcCoreChannelV1QueryUnreceivedAcksResponse
   */
  height?: QueryBlockHeight;
}
/**
 *
 * @export
 * @interface IbcCoreChannelV1QueryUnreceivedPacketsResponse
 */
export interface IbcCoreChannelV1QueryUnreceivedPacketsResponse {
  /**
   *
   * @type {Array<string>}
   * @memberof IbcCoreChannelV1QueryUnreceivedPacketsResponse
   */
  sequences?: Array<string>;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof IbcCoreChannelV1QueryUnreceivedPacketsResponse
   */
  height?: QueryBlockHeight;
}
/**
 * State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.   - STATE_UNINITIALIZED_UNSPECIFIED: Default State  - STATE_INIT: A channel has just started the opening handshake.  - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.  - STATE_OPEN: A channel has completed the handshake. Open channels are ready to send and receive packets.  - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive packets.
 * @export
 * @enum {string}
 */
export enum IbcCoreChannelV1State {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
  Closed = "STATE_CLOSED",
}

/**
 * ConsensusStateWithHeight defines a consensus state with an additional height field.
 * @export
 * @interface IbcCoreClientV1ConsensusStateWithHeight
 */
export interface IbcCoreClientV1ConsensusStateWithHeight {
  /**
   *
   * @type {ConsensusStateHeight}
   * @memberof IbcCoreClientV1ConsensusStateWithHeight
   */
  height?: ConsensusStateHeight;
  /**
   *
   * @type {ConsensusState}
   * @memberof IbcCoreClientV1ConsensusStateWithHeight
   */
  consensus_state?: ConsensusState;
}
/**
 * Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset
 * @export
 * @interface IbcCoreClientV1Height
 */
export interface IbcCoreClientV1Height {
  /**
   *
   * @type {string}
   * @memberof IbcCoreClientV1Height
   */
  revision_number?: string;
  /**
   *
   * @type {string}
   * @memberof IbcCoreClientV1Height
   */
  revision_height?: string;
}
/**
 * IdentifiedClientState defines a client state with an additional client identifier field.
 * @export
 * @interface IbcCoreClientV1IdentifiedClientState
 */
export interface IbcCoreClientV1IdentifiedClientState {
  /**
   *
   * @type {string}
   * @memberof IbcCoreClientV1IdentifiedClientState
   */
  client_id?: string;
  /**
   *
   * @type {ClientState}
   * @memberof IbcCoreClientV1IdentifiedClientState
   */
  client_state?: ClientState;
}
/**
 * Params defines the set of IBC light client parameters.
 * @export
 * @interface IbcCoreClientV1Params
 */
export interface IbcCoreClientV1Params {
  /**
   * allowed_clients defines the list of allowed client state types.
   * @type {Array<string>}
   * @memberof IbcCoreClientV1Params
   */
  allowed_clients?: Array<string>;
}
/**
 * QueryClientParamsResponse is the response type for the Query/ClientParams RPC method.
 * @export
 * @interface IbcCoreClientV1QueryClientParamsResponse
 */
export interface IbcCoreClientV1QueryClientParamsResponse {
  /**
   *
   * @type {InlineResponse20052Params}
   * @memberof IbcCoreClientV1QueryClientParamsResponse
   */
  params?: InlineResponse20052Params;
}
/**
 * QueryClientStateResponse is the response type for the Query/ClientState RPC method. Besides the client state, it includes a proof and the height from which the proof was retrieved.
 * @export
 * @interface IbcCoreClientV1QueryClientStateResponse
 */
export interface IbcCoreClientV1QueryClientStateResponse {
  /**
   *
   * @type {ClientStateAssociatedWithTheRequestIdentifier}
   * @memberof IbcCoreClientV1QueryClientStateResponse
   */
  client_state?: ClientStateAssociatedWithTheRequestIdentifier;
  /**
   *
   * @type {string}
   * @memberof IbcCoreClientV1QueryClientStateResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreClientV1QueryClientStateResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 * QueryClientStatesResponse is the response type for the Query/ClientStates RPC method.
 * @export
 * @interface IbcCoreClientV1QueryClientStatesResponse
 */
export interface IbcCoreClientV1QueryClientStatesResponse {
  /**
   * list of stored ClientStates of the chain.
   * @type {Array<InlineResponse20053ClientStates>}
   * @memberof IbcCoreClientV1QueryClientStatesResponse
   */
  client_states?: Array<InlineResponse20053ClientStates>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof IbcCoreClientV1QueryClientStatesResponse
   */
  pagination?: PaginationResponse;
}
/**
 *
 * @export
 * @interface IbcCoreClientV1QueryConsensusStateResponse
 */
export interface IbcCoreClientV1QueryConsensusStateResponse {
  /**
   *
   * @type {ConsensusStateAssociatedWithTheClientIdentifierAtTheGivenHeight}
   * @memberof IbcCoreClientV1QueryConsensusStateResponse
   */
  consensus_state?: ConsensusStateAssociatedWithTheClientIdentifierAtTheGivenHeight;
  /**
   *
   * @type {string}
   * @memberof IbcCoreClientV1QueryConsensusStateResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreClientV1QueryConsensusStateResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface IbcCoreClientV1QueryConsensusStatesResponse
 */
export interface IbcCoreClientV1QueryConsensusStatesResponse {
  /**
   *
   * @type {Array<QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethodConsensusStates>}
   * @memberof IbcCoreClientV1QueryConsensusStatesResponse
   */
  consensus_states?: Array<QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethodConsensusStates>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof IbcCoreClientV1QueryConsensusStatesResponse
   */
  pagination?: PaginationResponse;
}
/**
 *
 * @export
 * @interface IbcCoreCommitmentV1MerklePrefix
 */
export interface IbcCoreCommitmentV1MerklePrefix {
  /**
   *
   * @type {string}
   * @memberof IbcCoreCommitmentV1MerklePrefix
   */
  key_prefix?: string;
}
/**
 * ConnectionEnd defines a stateful object on a chain connected to another separate one. NOTE: there must only be 2 defined ConnectionEnds to establish a connection between two chains.
 * @export
 * @interface IbcCoreConnectionV1ConnectionEnd
 */
export interface IbcCoreConnectionV1ConnectionEnd {
  /**
   * client associated with this connection.
   * @type {string}
   * @memberof IbcCoreConnectionV1ConnectionEnd
   */
  client_id?: string;
  /**
   * IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection.
   * @type {Array<InlineResponse20055Versions>}
   * @memberof IbcCoreConnectionV1ConnectionEnd
   */
  versions?: Array<InlineResponse20055Versions>;
  /**
   * current state of the connection end.
   * @type {string}
   * @memberof IbcCoreConnectionV1ConnectionEnd
   */
  state?: IbcCoreConnectionV1ConnectionEndStateEnum;
  /**
   *
   * @type {InlineResponse20055Counterparty}
   * @memberof IbcCoreConnectionV1ConnectionEnd
   */
  counterparty?: InlineResponse20055Counterparty;
  /**
   * delay period that must pass before a consensus state can be used for packet-verification NOTE: delay period logic is only implemented by some clients.
   * @type {string}
   * @memberof IbcCoreConnectionV1ConnectionEnd
   */
  delay_period?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum IbcCoreConnectionV1ConnectionEndStateEnum {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
}

/**
 * Counterparty defines the counterparty chain associated with a connection end.
 * @export
 * @interface IbcCoreConnectionV1Counterparty
 */
export interface IbcCoreConnectionV1Counterparty {
  /**
   * identifies the client on the counterparty chain associated with a given connection.
   * @type {string}
   * @memberof IbcCoreConnectionV1Counterparty
   */
  client_id?: string;
  /**
   * identifies the connection end on the counterparty chain associated with a given connection.
   * @type {string}
   * @memberof IbcCoreConnectionV1Counterparty
   */
  connection_id?: string;
  /**
   *
   * @type {MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey}
   * @memberof IbcCoreConnectionV1Counterparty
   */
  prefix?: MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey;
}
/**
 * IdentifiedConnection defines a connection with additional connection identifier field.
 * @export
 * @interface IbcCoreConnectionV1IdentifiedConnection
 */
export interface IbcCoreConnectionV1IdentifiedConnection {
  /**
   * connection identifier.
   * @type {string}
   * @memberof IbcCoreConnectionV1IdentifiedConnection
   */
  id?: string;
  /**
   * client associated with this connection.
   * @type {string}
   * @memberof IbcCoreConnectionV1IdentifiedConnection
   */
  client_id?: string;
  /**
   *
   * @type {Array<InlineResponse20055Versions>}
   * @memberof IbcCoreConnectionV1IdentifiedConnection
   */
  versions?: Array<InlineResponse20055Versions>;
  /**
   * current state of the connection end.
   * @type {string}
   * @memberof IbcCoreConnectionV1IdentifiedConnection
   */
  state?: IbcCoreConnectionV1IdentifiedConnectionStateEnum;
  /**
   *
   * @type {InlineResponse20055Counterparty}
   * @memberof IbcCoreConnectionV1IdentifiedConnection
   */
  counterparty?: InlineResponse20055Counterparty;
  /**
   * delay period associated with this connection.
   * @type {string}
   * @memberof IbcCoreConnectionV1IdentifiedConnection
   */
  delay_period?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum IbcCoreConnectionV1IdentifiedConnectionStateEnum {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
}

/**
 *
 * @export
 * @interface IbcCoreConnectionV1QueryClientConnectionsResponse
 */
export interface IbcCoreConnectionV1QueryClientConnectionsResponse {
  /**
   * slice of all the connection paths associated with a client.
   * @type {Array<string>}
   * @memberof IbcCoreConnectionV1QueryClientConnectionsResponse
   */
  connection_paths?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof IbcCoreConnectionV1QueryClientConnectionsResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasGenerated}
   * @memberof IbcCoreConnectionV1QueryClientConnectionsResponse
   */
  proof_height?: HeightAtWhichTheProofWasGenerated;
}
/**
 *
 * @export
 * @interface IbcCoreConnectionV1QueryConnectionClientStateResponse
 */
export interface IbcCoreConnectionV1QueryConnectionClientStateResponse {
  /**
   *
   * @type {ClientStateAssociatedWithTheChannel}
   * @memberof IbcCoreConnectionV1QueryConnectionClientStateResponse
   */
  identified_client_state?: ClientStateAssociatedWithTheChannel;
  /**
   *
   * @type {string}
   * @memberof IbcCoreConnectionV1QueryConnectionClientStateResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreConnectionV1QueryConnectionClientStateResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface IbcCoreConnectionV1QueryConnectionConsensusStateResponse
 */
export interface IbcCoreConnectionV1QueryConnectionConsensusStateResponse {
  /**
   *
   * @type {ConsensusStateAssociatedWithTheChannel}
   * @memberof IbcCoreConnectionV1QueryConnectionConsensusStateResponse
   */
  consensus_state?: ConsensusStateAssociatedWithTheChannel;
  /**
   *
   * @type {string}
   * @memberof IbcCoreConnectionV1QueryConnectionConsensusStateResponse
   */
  client_id?: string;
  /**
   *
   * @type {string}
   * @memberof IbcCoreConnectionV1QueryConnectionConsensusStateResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreConnectionV1QueryConnectionConsensusStateResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 * QueryConnectionResponse is the response type for the Query/Connection RPC method. Besides the connection end, it includes a proof and the height from which the proof was retrieved.
 * @export
 * @interface IbcCoreConnectionV1QueryConnectionResponse
 */
export interface IbcCoreConnectionV1QueryConnectionResponse {
  /**
   *
   * @type {ConnectionAssociatedWithTheRequestIdentifier}
   * @memberof IbcCoreConnectionV1QueryConnectionResponse
   */
  connection?: ConnectionAssociatedWithTheRequestIdentifier;
  /**
   *
   * @type {string}
   * @memberof IbcCoreConnectionV1QueryConnectionResponse
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof IbcCoreConnectionV1QueryConnectionResponse
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 * QueryConnectionsResponse is the response type for the Query/Connections RPC method.
 * @export
 * @interface IbcCoreConnectionV1QueryConnectionsResponse
 */
export interface IbcCoreConnectionV1QueryConnectionsResponse {
  /**
   * list of stored connections of the chain.
   * @type {Array<InlineResponse20055Connections>}
   * @memberof IbcCoreConnectionV1QueryConnectionsResponse
   */
  connections?: Array<InlineResponse20055Connections>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof IbcCoreConnectionV1QueryConnectionsResponse
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof IbcCoreConnectionV1QueryConnectionsResponse
   */
  height?: QueryBlockHeight;
}
/**
 * State defines if a connection is in one of the following states: INIT, TRYOPEN, OPEN or UNINITIALIZED.   - STATE_UNINITIALIZED_UNSPECIFIED: Default State  - STATE_INIT: A connection end has just started the opening handshake.  - STATE_TRYOPEN: A connection end has acknowledged the handshake step on the counterparty chain.  - STATE_OPEN: A connection end has completed the handshake.
 * @export
 * @enum {string}
 */
export enum IbcCoreConnectionV1State {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
}

/**
 * Version defines the versioning scheme used to negotiate the IBC verison in the connection handshake.
 * @export
 * @interface IbcCoreConnectionV1Version
 */
export interface IbcCoreConnectionV1Version {
  /**
   *
   * @type {string}
   * @memberof IbcCoreConnectionV1Version
   */
  identifier?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof IbcCoreConnectionV1Version
   */
  features?: Array<string>;
}
/**
 * BroadcastTxRequest is the request type for the Service.BroadcastTxRequest RPC method.
 * @export
 * @interface BroadcastTxRequest
 */
export interface BroadcastTxRequest {
  /**
   * tx_bytes is the raw transaction.
   * @type {string}
   * @memberof BroadcastTxRequest
   */
  tx_bytes?: string;
  /**
   * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering  - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for the tx to be committed in a block.  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for a CheckTx execution response only.  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns immediately.
   * @type {string}
   * @memberof BroadcastTxRequest
   */
  mode?: BroadcastTxRequestModeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum BroadcastTxRequestModeEnum {
  Unspecified = "BROADCAST_MODE_UNSPECIFIED",
  Block = "BROADCAST_MODE_BLOCK",
  Sync = "BROADCAST_MODE_SYNC",
  Async = "BROADCAST_MODE_ASYNC",
}

/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   *
   * @type {InlineResponse200Account}
   * @memberof InlineResponse200
   */
  account?: InlineResponse200Account;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
  /**
   *
   * @type {InlineResponse2001Params}
   * @memberof InlineResponse2001
   */
  params?: InlineResponse2001Params;
}
/**
 * GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20010
   */
  block_height?: string;
  /**
   *
   * @type {Array<InlineResponse20010Validators>}
   * @memberof InlineResponse20010
   */
  validators?: Array<InlineResponse20010Validators>;
  /**
   *
   * @type {InlineResponse20010Pagination}
   * @memberof InlineResponse20010
   */
  pagination?: InlineResponse20010Pagination;
}
/**
 * pagination defines an pagination for the response.
 * @export
 * @interface InlineResponse20010Pagination
 */
export interface InlineResponse20010Pagination {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20010Pagination
   */
  next_key?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20010Pagination
   */
  total?: string;
}
/**
 * Validator is the type for the validator-set.
 * @export
 * @interface InlineResponse20010Validators
 */
export interface InlineResponse20010Validators {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20010Validators
   */
  address?: string;
  /**
   *
   * @type {InlineResponseDefaultDetails}
   * @memberof InlineResponse20010Validators
   */
  pub_key?: InlineResponseDefaultDetails;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20010Validators
   */
  voting_power?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20010Validators
   */
  proposer_priority?: string;
}
/**
 * GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20011
   */
  block_height?: string;
  /**
   *
   * @type {Array<InlineResponse20010Validators>}
   * @memberof InlineResponse20011
   */
  validators?: Array<InlineResponse20010Validators>;
  /**
   *
   * @type {InlineResponse20010Pagination}
   * @memberof InlineResponse20011
   */
  pagination?: InlineResponse20010Pagination;
}
/**
 * QueryCommunityPoolResponse is the response type for the Query/CommunityPool RPC method.
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
  /**
   * pool defines community pool\'s coins.
   * @type {Array<InlineResponse20012Pool>}
   * @memberof InlineResponse20012
   */
  pool?: Array<InlineResponse20012Pool>;
}
/**
 * DecCoin defines a token with a denomination and a decimal amount.  NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto.
 * @export
 * @interface InlineResponse20012Pool
 */
export interface InlineResponse20012Pool {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20012Pool
   */
  denom?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20012Pool
   */
  amount?: string;
}
/**
 * QueryDelegationTotalRewardsResponse is the response type for the Query/DelegationTotalRewards RPC method.
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
  /**
   * rewards defines all the rewards accrued by a delegator.
   * @type {Array<InlineResponse20013Rewards>}
   * @memberof InlineResponse20013
   */
  rewards?: Array<InlineResponse20013Rewards>;
  /**
   * total defines the sum of all the rewards.
   * @type {Array<InlineResponse20012Pool>}
   * @memberof InlineResponse20013
   */
  total?: Array<InlineResponse20012Pool>;
}
/**
 * DelegationDelegatorReward represents the properties of a delegator\'s delegation reward.
 * @export
 * @interface InlineResponse20013Rewards
 */
export interface InlineResponse20013Rewards {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20013Rewards
   */
  validator_address?: string;
  /**
   *
   * @type {Array<InlineResponse20012Pool>}
   * @memberof InlineResponse20013Rewards
   */
  reward?: Array<InlineResponse20012Pool>;
}
/**
 * QueryDelegationRewardsResponse is the response type for the Query/DelegationRewards RPC method.
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
  /**
   * rewards defines the rewards accrued by a delegation.
   * @type {Array<InlineResponse20012Pool>}
   * @memberof InlineResponse20014
   */
  rewards?: Array<InlineResponse20012Pool>;
}
/**
 * QueryDelegatorValidatorsResponse is the response type for the Query/DelegatorValidators RPC method.
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
  /**
   * validators defines the validators a delegator is delegating for.
   * @type {Array<string>}
   * @memberof InlineResponse20015
   */
  validators?: Array<string>;
}
/**
 * QueryDelegatorWithdrawAddressResponse is the response type for the Query/DelegatorWithdrawAddress RPC method.
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
  /**
   * withdraw_address defines the delegator address to query for.
   * @type {string}
   * @memberof InlineResponse20016
   */
  withdraw_address?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
  /**
   *
   * @type {InlineResponse20017Params}
   * @memberof InlineResponse20017
   */
  params?: InlineResponse20017Params;
}
/**
 * params defines the parameters of the module.
 * @export
 * @interface InlineResponse20017Params
 */
export interface InlineResponse20017Params {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20017Params
   */
  community_tax?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20017Params
   */
  base_proposer_reward?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20017Params
   */
  bonus_proposer_reward?: string;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse20017Params
   */
  withdraw_addr_enabled?: boolean;
}
/**
 * QueryValidatorOutstandingRewardsResponse is the response type for the Query/ValidatorOutstandingRewards RPC method.
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
  /**
   *
   * @type {InlineResponse20018Rewards}
   * @memberof InlineResponse20018
   */
  rewards?: InlineResponse20018Rewards;
}
/**
 * ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards for a validator inexpensive to track, allows simple sanity checks.
 * @export
 * @interface InlineResponse20018Rewards
 */
export interface InlineResponse20018Rewards {
  /**
   *
   * @type {Array<InlineResponse20012Pool>}
   * @memberof InlineResponse20018Rewards
   */
  rewards?: Array<InlineResponse20012Pool>;
}
/**
 * QueryValidatorSlashesResponse is the response type for the Query/ValidatorSlashes RPC method.
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
  /**
   * slashes defines the slashes the validator received.
   * @type {Array<InlineResponse20019Slashes>}
   * @memberof InlineResponse20019
   */
  slashes?: Array<InlineResponse20019Slashes>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20019
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * ValidatorSlashEvent represents a validator slash event. Height is implicit within the store key. This is needed to calculate appropriate amount of staking tokens for delegations which are withdrawn after a slash has occurred.
 * @export
 * @interface InlineResponse20019Slashes
 */
export interface InlineResponse20019Slashes {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20019Slashes
   */
  validator_period?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20019Slashes
   */
  fraction?: string;
}
/**
 * params defines the parameters of the module.
 * @export
 * @interface InlineResponse2001Params
 */
export interface InlineResponse2001Params {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001Params
   */
  max_memo_characters?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001Params
   */
  tx_sig_limit?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001Params
   */
  tx_size_cost_per_byte?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001Params
   */
  sig_verify_cost_ed25519?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2001Params
   */
  sig_verify_cost_secp256k1?: string;
}
/**
 * QueryAllBalancesResponse is the response type for the Query/AllBalances RPC method.
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
  /**
   * balances is the balances of all the coins.
   * @type {Array<InlineResponse2002Balances>}
   * @memberof InlineResponse2002
   */
  balances?: Array<InlineResponse2002Balances>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse2002
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC method.
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
  /**
   * evidence returns all evidences.
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof InlineResponse20020
   */
  evidence?: Array<InlineResponseDefaultDetails>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20020
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
 * @export
 * @interface InlineResponse20021
 */
export interface InlineResponse20021 {
  /**
   *
   * @type {InlineResponse20021Evidence}
   * @memberof InlineResponse20021
   */
  evidence?: InlineResponse20021Evidence;
}
/**
 * evidence returns the requested evidence.
 * @export
 * @interface InlineResponse20021Evidence
 */
export interface InlineResponse20021Evidence {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof InlineResponse20021Evidence
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof InlineResponse20021Evidence
   */
  value?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20022
 */
export interface InlineResponse20022 {
  /**
   *
   * @type {InlineResponse20022VotingParams}
   * @memberof InlineResponse20022
   */
  voting_params?: InlineResponse20022VotingParams;
  /**
   *
   * @type {InlineResponse20022DepositParams}
   * @memberof InlineResponse20022
   */
  deposit_params?: InlineResponse20022DepositParams;
  /**
   *
   * @type {InlineResponse20022TallyParams}
   * @memberof InlineResponse20022
   */
  tally_params?: InlineResponse20022TallyParams;
}
/**
 * deposit_params defines the parameters related to deposit.
 * @export
 * @interface InlineResponse20022DepositParams
 */
export interface InlineResponse20022DepositParams {
  /**
   * Minimum deposit for a proposal to enter voting period.
   * @type {Array<InlineResponse2002Balances>}
   * @memberof InlineResponse20022DepositParams
   */
  min_deposit?: Array<InlineResponse2002Balances>;
  /**
   * Maximum period for Atom holders to deposit on a proposal. Initial value: 2  months.
   * @type {string}
   * @memberof InlineResponse20022DepositParams
   */
  max_deposit_period?: string;
}
/**
 * tally_params defines the parameters related to tally.
 * @export
 * @interface InlineResponse20022TallyParams
 */
export interface InlineResponse20022TallyParams {
  /**
   * Minimum percentage of total stake needed to vote for a result to be  considered valid.
   * @type {string}
   * @memberof InlineResponse20022TallyParams
   */
  quorum?: string;
  /**
   * Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
   * @type {string}
   * @memberof InlineResponse20022TallyParams
   */
  threshold?: string;
  /**
   * Minimum value of Veto votes to Total votes ratio for proposal to be  vetoed. Default value: 1/3.
   * @type {string}
   * @memberof InlineResponse20022TallyParams
   */
  veto_threshold?: string;
}
/**
 * voting_params defines the parameters related to voting.
 * @export
 * @interface InlineResponse20022VotingParams
 */
export interface InlineResponse20022VotingParams {
  /**
   * Length of the voting period.
   * @type {string}
   * @memberof InlineResponse20022VotingParams
   */
  voting_period?: string;
}
/**
 * QueryProposalsResponse is the response type for the Query/Proposals RPC method.
 * @export
 * @interface InlineResponse20023
 */
export interface InlineResponse20023 {
  /**
   *
   * @type {Array<InlineResponse20023Proposals>}
   * @memberof InlineResponse20023
   */
  proposals?: Array<InlineResponse20023Proposals>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20023
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * TallyResult defines a standard tally for a governance proposal.
 * @export
 * @interface InlineResponse20023FinalTallyResult
 */
export interface InlineResponse20023FinalTallyResult {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20023FinalTallyResult
   */
  yes?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20023FinalTallyResult
   */
  abstain?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20023FinalTallyResult
   */
  no?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20023FinalTallyResult
   */
  no_with_veto?: string;
}
/**
 * Proposal defines the core field members of a governance proposal.
 * @export
 * @interface InlineResponse20023Proposals
 */
export interface InlineResponse20023Proposals {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20023Proposals
   */
  proposal_id?: string;
  /**
   *
   * @type {InlineResponseDefaultDetails}
   * @memberof InlineResponse20023Proposals
   */
  content?: InlineResponseDefaultDetails;
  /**
   * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
   * @type {string}
   * @memberof InlineResponse20023Proposals
   */
  status?: InlineResponse20023ProposalsStatusEnum;
  /**
   *
   * @type {InlineResponse20023FinalTallyResult}
   * @memberof InlineResponse20023Proposals
   */
  final_tally_result?: InlineResponse20023FinalTallyResult;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20023Proposals
   */
  submit_time?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20023Proposals
   */
  deposit_end_time?: string;
  /**
   *
   * @type {Array<InlineResponse2002Balances>}
   * @memberof InlineResponse20023Proposals
   */
  total_deposit?: Array<InlineResponse2002Balances>;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20023Proposals
   */
  voting_start_time?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20023Proposals
   */
  voting_end_time?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum InlineResponse20023ProposalsStatusEnum {
  Unspecified = "PROPOSAL_STATUS_UNSPECIFIED",
  DepositPeriod = "PROPOSAL_STATUS_DEPOSIT_PERIOD",
  VotingPeriod = "PROPOSAL_STATUS_VOTING_PERIOD",
  Passed = "PROPOSAL_STATUS_PASSED",
  Rejected = "PROPOSAL_STATUS_REJECTED",
  Failed = "PROPOSAL_STATUS_FAILED",
}

/**
 * QueryProposalResponse is the response type for the Query/Proposal RPC method.
 * @export
 * @interface InlineResponse20024
 */
export interface InlineResponse20024 {
  /**
   *
   * @type {InlineResponse20023Proposals}
   * @memberof InlineResponse20024
   */
  proposal?: InlineResponse20023Proposals;
}
/**
 * QueryDepositsResponse is the response type for the Query/Deposits RPC method.
 * @export
 * @interface InlineResponse20025
 */
export interface InlineResponse20025 {
  /**
   *
   * @type {Array<InlineResponse20025Deposits>}
   * @memberof InlineResponse20025
   */
  deposits?: Array<InlineResponse20025Deposits>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20025
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * Deposit defines an amount deposited by an account address to an active proposal.
 * @export
 * @interface InlineResponse20025Deposits
 */
export interface InlineResponse20025Deposits {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20025Deposits
   */
  proposal_id?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20025Deposits
   */
  depositor?: string;
  /**
   *
   * @type {Array<InlineResponse2002Balances>}
   * @memberof InlineResponse20025Deposits
   */
  amount?: Array<InlineResponse2002Balances>;
}
/**
 * QueryDepositResponse is the response type for the Query/Deposit RPC method.
 * @export
 * @interface InlineResponse20026
 */
export interface InlineResponse20026 {
  /**
   *
   * @type {InlineResponse20026Deposit}
   * @memberof InlineResponse20026
   */
  deposit?: InlineResponse20026Deposit;
}
/**
 * deposit defines the requested deposit.
 * @export
 * @interface InlineResponse20026Deposit
 */
export interface InlineResponse20026Deposit {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20026Deposit
   */
  proposal_id?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20026Deposit
   */
  depositor?: string;
  /**
   *
   * @type {Array<InlineResponse2002Balances>}
   * @memberof InlineResponse20026Deposit
   */
  amount?: Array<InlineResponse2002Balances>;
}
/**
 * QueryTallyResultResponse is the response type for the Query/Tally RPC method.
 * @export
 * @interface InlineResponse20027
 */
export interface InlineResponse20027 {
  /**
   *
   * @type {InlineResponse20027Tally}
   * @memberof InlineResponse20027
   */
  tally?: InlineResponse20027Tally;
}
/**
 * tally defines the requested tally.
 * @export
 * @interface InlineResponse20027Tally
 */
export interface InlineResponse20027Tally {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20027Tally
   */
  yes?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20027Tally
   */
  abstain?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20027Tally
   */
  no?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20027Tally
   */
  no_with_veto?: string;
}
/**
 * QueryVotesResponse is the response type for the Query/Votes RPC method.
 * @export
 * @interface InlineResponse20028
 */
export interface InlineResponse20028 {
  /**
   * votes defined the queried votes.
   * @type {Array<InlineResponse20028Votes>}
   * @memberof InlineResponse20028
   */
  votes?: Array<InlineResponse20028Votes>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20028
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * Vote defines a vote on a governance proposal. A Vote consists of a proposal ID, the voter, and the vote option.
 * @export
 * @interface InlineResponse20028Votes
 */
export interface InlineResponse20028Votes {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20028Votes
   */
  proposal_id?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20028Votes
   */
  voter?: string;
  /**
   * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
   * @type {string}
   * @memberof InlineResponse20028Votes
   */
  option?: InlineResponse20028VotesOptionEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum InlineResponse20028VotesOptionEnum {
  Unspecified = "VOTE_OPTION_UNSPECIFIED",
  Yes = "VOTE_OPTION_YES",
  Abstain = "VOTE_OPTION_ABSTAIN",
  No = "VOTE_OPTION_NO",
  NoWithVeto = "VOTE_OPTION_NO_WITH_VETO",
}

/**
 * QueryVoteResponse is the response type for the Query/Vote RPC method.
 * @export
 * @interface InlineResponse20029
 */
export interface InlineResponse20029 {
  /**
   *
   * @type {InlineResponse20029Vote}
   * @memberof InlineResponse20029
   */
  vote?: InlineResponse20029Vote;
}
/**
 * vote defined the queried vote.
 * @export
 * @interface InlineResponse20029Vote
 */
export interface InlineResponse20029Vote {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20029Vote
   */
  proposal_id?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20029Vote
   */
  voter?: string;
  /**
   * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
   * @type {string}
   * @memberof InlineResponse20029Vote
   */
  option?: InlineResponse20029VoteOptionEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum InlineResponse20029VoteOptionEnum {
  Unspecified = "VOTE_OPTION_UNSPECIFIED",
  Yes = "VOTE_OPTION_YES",
  Abstain = "VOTE_OPTION_ABSTAIN",
  No = "VOTE_OPTION_NO",
  NoWithVeto = "VOTE_OPTION_NO_WITH_VETO",
}

/**
 * Coin defines a token with a denomination and an amount.  NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @export
 * @interface InlineResponse2002Balances
 */
export interface InlineResponse2002Balances {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2002Balances
   */
  denom?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2002Balances
   */
  amount?: string;
}
/**
 * pagination defines the pagination in the response.
 * @export
 * @interface InlineResponse2002Pagination
 */
export interface InlineResponse2002Pagination {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2002Pagination
   */
  next_key?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2002Pagination
   */
  total?: string;
}
/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method.
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
  /**
   *
   * @type {InlineResponse2003Balance}
   * @memberof InlineResponse2003
   */
  balance?: InlineResponse2003Balance;
}
/**
 * QueryAnnualProvisionsResponse is the response type for the Query/AnnualProvisions RPC method.
 * @export
 * @interface InlineResponse20030
 */
export interface InlineResponse20030 {
  /**
   * annual_provisions is the current minting annual provisions value.
   * @type {string}
   * @memberof InlineResponse20030
   */
  annual_provisions?: string;
}
/**
 * QueryInflationResponse is the response type for the Query/Inflation RPC method.
 * @export
 * @interface InlineResponse20031
 */
export interface InlineResponse20031 {
  /**
   * inflation is the current minting inflation value.
   * @type {string}
   * @memberof InlineResponse20031
   */
  inflation?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20032
 */
export interface InlineResponse20032 {
  /**
   *
   * @type {InlineResponse20032Params}
   * @memberof InlineResponse20032
   */
  params?: InlineResponse20032Params;
}
/**
 * params defines the parameters of the module.
 * @export
 * @interface InlineResponse20032Params
 */
export interface InlineResponse20032Params {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20032Params
   */
  mint_denom?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20032Params
   */
  inflation_rate_change?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20032Params
   */
  inflation_max?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20032Params
   */
  inflation_min?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20032Params
   */
  goal_bonded?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20032Params
   */
  blocks_per_year?: string;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20033
 */
export interface InlineResponse20033 {
  /**
   *
   * @type {InlineResponse20033Param}
   * @memberof InlineResponse20033
   */
  param?: InlineResponse20033Param;
}
/**
 * param defines the queried parameter.
 * @export
 * @interface InlineResponse20033Param
 */
export interface InlineResponse20033Param {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20033Param
   */
  subspace?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20033Param
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20033Param
   */
  value?: string;
}
/**
 * QueryDelegatorDelegationsResponse is response type for the Query/DelegatorDelegations RPC method.
 * @export
 * @interface InlineResponse20034
 */
export interface InlineResponse20034 {
  /**
   * delegation_responses defines all the delegations\' info of a delegator.
   * @type {Array<InlineResponse20034DelegationResponses>}
   * @memberof InlineResponse20034
   */
  delegation_responses?: Array<InlineResponse20034DelegationResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20034
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * Delegation represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator.
 * @export
 * @interface InlineResponse20034Delegation
 */
export interface InlineResponse20034Delegation {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20034Delegation
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20034Delegation
   */
  validator_address?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20034Delegation
   */
  shares?: string;
}
/**
 * DelegationResponse is equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface InlineResponse20034DelegationResponses
 */
export interface InlineResponse20034DelegationResponses {
  /**
   *
   * @type {InlineResponse20034Delegation}
   * @memberof InlineResponse20034DelegationResponses
   */
  delegation?: InlineResponse20034Delegation;
  /**
   *
   * @type {InlineResponse2002Balances}
   * @memberof InlineResponse20034DelegationResponses
   */
  balance?: InlineResponse2002Balances;
}
/**
 * QueryRedelegationsResponse is response type for the Query/Redelegations RPC method.
 * @export
 * @interface InlineResponse20035
 */
export interface InlineResponse20035 {
  /**
   *
   * @type {Array<InlineResponse20035RedelegationResponses>}
   * @memberof InlineResponse20035
   */
  redelegation_responses?: Array<InlineResponse20035RedelegationResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20035
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it contains a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface InlineResponse20035Entries
 */
export interface InlineResponse20035Entries {
  /**
   *
   * @type {InlineResponse20035RedelegationEntries}
   * @memberof InlineResponse20035Entries
   */
  redelegation_entry?: InlineResponse20035RedelegationEntries;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20035Entries
   */
  balance?: string;
}
/**
 * Redelegation contains the list of a particular delegator\'s redelegating bonds from a particular source validator to a particular destination validator.
 * @export
 * @interface InlineResponse20035Redelegation
 */
export interface InlineResponse20035Redelegation {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20035Redelegation
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20035Redelegation
   */
  validator_src_address?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20035Redelegation
   */
  validator_dst_address?: string;
  /**
   *
   * @type {Array<InlineResponse20035RedelegationEntries>}
   * @memberof InlineResponse20035Redelegation
   */
  entries?: Array<InlineResponse20035RedelegationEntries>;
}
/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 * @export
 * @interface InlineResponse20035RedelegationEntries
 */
export interface InlineResponse20035RedelegationEntries {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20035RedelegationEntries
   */
  creation_height?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20035RedelegationEntries
   */
  completion_time?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20035RedelegationEntries
   */
  initial_balance?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20035RedelegationEntries
   */
  shares_dst?: string;
}
/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries contain a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface InlineResponse20035RedelegationResponses
 */
export interface InlineResponse20035RedelegationResponses {
  /**
   *
   * @type {InlineResponse20035Redelegation}
   * @memberof InlineResponse20035RedelegationResponses
   */
  redelegation?: InlineResponse20035Redelegation;
  /**
   *
   * @type {Array<InlineResponse20035Entries>}
   * @memberof InlineResponse20035RedelegationResponses
   */
  entries?: Array<InlineResponse20035Entries>;
}
/**
 * QueryUnbondingDelegatorDelegationsResponse is response type for the Query/UnbondingDelegatorDelegations RPC method.
 * @export
 * @interface InlineResponse20036
 */
export interface InlineResponse20036 {
  /**
   *
   * @type {Array<InlineResponse20036UnbondingResponses>}
   * @memberof InlineResponse20036
   */
  unbonding_responses?: Array<InlineResponse20036UnbondingResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20036
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 * @export
 * @interface InlineResponse20036Entries
 */
export interface InlineResponse20036Entries {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20036Entries
   */
  creation_height?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20036Entries
   */
  completion_time?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20036Entries
   */
  initial_balance?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20036Entries
   */
  balance?: string;
}
/**
 * UnbondingDelegation stores all of a single delegator\'s unbonding bonds for a single validator in an time-ordered list.
 * @export
 * @interface InlineResponse20036UnbondingResponses
 */
export interface InlineResponse20036UnbondingResponses {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20036UnbondingResponses
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20036UnbondingResponses
   */
  validator_address?: string;
  /**
   *
   * @type {Array<InlineResponse20036Entries>}
   * @memberof InlineResponse20036UnbondingResponses
   */
  entries?: Array<InlineResponse20036Entries>;
}
/**
 * QueryDelegatorValidatorsResponse is response type for the Query/DelegatorValidators RPC method.
 * @export
 * @interface InlineResponse20037
 */
export interface InlineResponse20037 {
  /**
   * validators defines the the validators\' info of a delegator.
   * @type {Array<InlineResponse20037Validators>}
   * @memberof InlineResponse20037
   */
  validators?: Array<InlineResponse20037Validators>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20037
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * Commission defines commission parameters for a given validator.
 * @export
 * @interface InlineResponse20037Commission
 */
export interface InlineResponse20037Commission {
  /**
   *
   * @type {InlineResponse20037CommissionCommissionRates}
   * @memberof InlineResponse20037Commission
   */
  commission_rates?: InlineResponse20037CommissionCommissionRates;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Commission
   */
  update_time?: string;
}
/**
 * CommissionRates defines the initial commission rates to be used for creating a validator.
 * @export
 * @interface InlineResponse20037CommissionCommissionRates
 */
export interface InlineResponse20037CommissionCommissionRates {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037CommissionCommissionRates
   */
  rate?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037CommissionCommissionRates
   */
  max_rate?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037CommissionCommissionRates
   */
  max_change_rate?: string;
}
/**
 * Description defines a validator description.
 * @export
 * @interface InlineResponse20037Description
 */
export interface InlineResponse20037Description {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Description
   */
  moniker?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Description
   */
  identity?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Description
   */
  website?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Description
   */
  security_contact?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Description
   */
  details?: string;
}
/**
 * Validator defines a validator, together with the total amount of the Validator\'s bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate.
 * @export
 * @interface InlineResponse20037Validators
 */
export interface InlineResponse20037Validators {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Validators
   */
  operator_address?: string;
  /**
   *
   * @type {InlineResponseDefaultDetails}
   * @memberof InlineResponse20037Validators
   */
  consensus_pubkey?: InlineResponseDefaultDetails;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse20037Validators
   */
  jailed?: boolean;
  /**
   * BondStatus is the status of a validator.   - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.  - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.  - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.  - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
   * @type {string}
   * @memberof InlineResponse20037Validators
   */
  status?: InlineResponse20037ValidatorsStatusEnum;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Validators
   */
  tokens?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Validators
   */
  delegator_shares?: string;
  /**
   *
   * @type {InlineResponse20037Description}
   * @memberof InlineResponse20037Validators
   */
  description?: InlineResponse20037Description;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Validators
   */
  unbonding_height?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Validators
   */
  unbonding_time?: string;
  /**
   *
   * @type {InlineResponse20037Commission}
   * @memberof InlineResponse20037Validators
   */
  commission?: InlineResponse20037Commission;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20037Validators
   */
  min_self_delegation?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum InlineResponse20037ValidatorsStatusEnum {
  Unspecified = "BOND_STATUS_UNSPECIFIED",
  Unbonded = "BOND_STATUS_UNBONDED",
  Unbonding = "BOND_STATUS_UNBONDING",
  Bonded = "BOND_STATUS_BONDED",
}

/**
 * QueryDelegatorValidatorResponse response type for the Query/DelegatorValidator RPC method.
 * @export
 * @interface InlineResponse20038
 */
export interface InlineResponse20038 {
  /**
   *
   * @type {InlineResponse20038Validator}
   * @memberof InlineResponse20038
   */
  validator?: InlineResponse20038Validator;
}
/**
 * validator defines the the validator info.
 * @export
 * @interface InlineResponse20038Validator
 */
export interface InlineResponse20038Validator {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20038Validator
   */
  operator_address?: string;
  /**
   *
   * @type {InlineResponseDefaultDetails}
   * @memberof InlineResponse20038Validator
   */
  consensus_pubkey?: InlineResponseDefaultDetails;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse20038Validator
   */
  jailed?: boolean;
  /**
   * BondStatus is the status of a validator.   - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.  - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.  - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.  - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
   * @type {string}
   * @memberof InlineResponse20038Validator
   */
  status?: InlineResponse20038ValidatorStatusEnum;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20038Validator
   */
  tokens?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20038Validator
   */
  delegator_shares?: string;
  /**
   *
   * @type {InlineResponse20037Description}
   * @memberof InlineResponse20038Validator
   */
  description?: InlineResponse20037Description;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20038Validator
   */
  unbonding_height?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20038Validator
   */
  unbonding_time?: string;
  /**
   *
   * @type {InlineResponse20037Commission}
   * @memberof InlineResponse20038Validator
   */
  commission?: InlineResponse20037Commission;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20038Validator
   */
  min_self_delegation?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum InlineResponse20038ValidatorStatusEnum {
  Unspecified = "BOND_STATUS_UNSPECIFIED",
  Unbonded = "BOND_STATUS_UNBONDED",
  Unbonding = "BOND_STATUS_UNBONDING",
  Bonded = "BOND_STATUS_BONDED",
}

/**
 * QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC method.
 * @export
 * @interface InlineResponse20039
 */
export interface InlineResponse20039 {
  /**
   *
   * @type {InlineResponse20039Hist}
   * @memberof InlineResponse20039
   */
  hist?: InlineResponse20039Hist;
}
/**
 * hist defines the historical info at the given height.
 * @export
 * @interface InlineResponse20039Hist
 */
export interface InlineResponse20039Hist {
  /**
   *
   * @type {InlineResponse2006BlockHeader}
   * @memberof InlineResponse20039Hist
   */
  header?: InlineResponse2006BlockHeader;
  /**
   *
   * @type {Array<InlineResponse20037Validators>}
   * @memberof InlineResponse20039Hist
   */
  valset?: Array<InlineResponse20037Validators>;
}
/**
 * balance is the balance of the coin.
 * @export
 * @interface InlineResponse2003Balance
 */
export interface InlineResponse2003Balance {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2003Balance
   */
  denom?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2003Balance
   */
  amount?: string;
}
/**
 * QueryParamsResponse defines the response type for querying x/bank parameters.
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
  /**
   *
   * @type {InlineResponse2004Params}
   * @memberof InlineResponse2004
   */
  params?: InlineResponse2004Params;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20040
 */
export interface InlineResponse20040 {
  /**
   *
   * @type {InlineResponse20040Params}
   * @memberof InlineResponse20040
   */
  params?: InlineResponse20040Params;
}
/**
 * params holds all the parameters of this module.
 * @export
 * @interface InlineResponse20040Params
 */
export interface InlineResponse20040Params {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20040Params
   */
  unbonding_time?: string;
  /**
   *
   * @type {number}
   * @memberof InlineResponse20040Params
   */
  max_validators?: number;
  /**
   *
   * @type {number}
   * @memberof InlineResponse20040Params
   */
  max_entries?: number;
  /**
   *
   * @type {number}
   * @memberof InlineResponse20040Params
   */
  historical_entries?: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20040Params
   */
  bond_denom?: string;
}
/**
 * QueryPoolResponse is response type for the Query/Pool RPC method.
 * @export
 * @interface InlineResponse20041
 */
export interface InlineResponse20041 {
  /**
   *
   * @type {InlineResponse20041Pool}
   * @memberof InlineResponse20041
   */
  pool?: InlineResponse20041Pool;
}
/**
 * pool defines the pool info.
 * @export
 * @interface InlineResponse20041Pool
 */
export interface InlineResponse20041Pool {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20041Pool
   */
  not_bonded_tokens?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20041Pool
   */
  bonded_tokens?: string;
}
/**
 * QueryDelegationResponse is response type for the Query/Delegation RPC method.
 * @export
 * @interface InlineResponse20042
 */
export interface InlineResponse20042 {
  /**
   *
   * @type {InlineResponse20042DelegationResponse}
   * @memberof InlineResponse20042
   */
  delegation_response?: InlineResponse20042DelegationResponse;
}
/**
 * delegation_responses defines the delegation info of a delegation.
 * @export
 * @interface InlineResponse20042DelegationResponse
 */
export interface InlineResponse20042DelegationResponse {
  /**
   *
   * @type {InlineResponse20034Delegation}
   * @memberof InlineResponse20042DelegationResponse
   */
  delegation?: InlineResponse20034Delegation;
  /**
   *
   * @type {InlineResponse2002Balances}
   * @memberof InlineResponse20042DelegationResponse
   */
  balance?: InlineResponse2002Balances;
}
/**
 * QueryDelegationResponse is response type for the Query/UnbondingDelegation RPC method.
 * @export
 * @interface InlineResponse20043
 */
export interface InlineResponse20043 {
  /**
   *
   * @type {InlineResponse20043Unbond}
   * @memberof InlineResponse20043
   */
  unbond?: InlineResponse20043Unbond;
}
/**
 * unbond defines the unbonding information of a delegation.
 * @export
 * @interface InlineResponse20043Unbond
 */
export interface InlineResponse20043Unbond {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20043Unbond
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20043Unbond
   */
  validator_address?: string;
  /**
   *
   * @type {Array<InlineResponse20036Entries>}
   * @memberof InlineResponse20043Unbond
   */
  entries?: Array<InlineResponse20036Entries>;
}
/**
 * QueryValidatorUnbondingDelegationsResponse is response type for the Query/ValidatorUnbondingDelegations RPC method.
 * @export
 * @interface InlineResponse20044
 */
export interface InlineResponse20044 {
  /**
   *
   * @type {Array<InlineResponse20036UnbondingResponses>}
   * @memberof InlineResponse20044
   */
  unbonding_responses?: Array<InlineResponse20036UnbondingResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20044
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * SimulateResponse is the response type for the Service.SimulateRPC method.
 * @export
 * @interface InlineResponse20045
 */
export interface InlineResponse20045 {
  /**
   *
   * @type {InlineResponse20045GasInfo}
   * @memberof InlineResponse20045
   */
  gas_info?: InlineResponse20045GasInfo;
  /**
   *
   * @type {InlineResponse20045Result}
   * @memberof InlineResponse20045
   */
  result?: InlineResponse20045Result;
}
/**
 * gas_info is the information about gas used in the simulation.
 * @export
 * @interface InlineResponse20045GasInfo
 */
export interface InlineResponse20045GasInfo {
  /**
   * GasWanted is the maximum units of work we allow this tx to perform.
   * @type {string}
   * @memberof InlineResponse20045GasInfo
   */
  gas_wanted?: string;
  /**
   * GasUsed is the amount of gas actually consumed.
   * @type {string}
   * @memberof InlineResponse20045GasInfo
   */
  gas_used?: string;
}
/**
 * result is the result of the simulation.
 * @export
 * @interface InlineResponse20045Result
 */
export interface InlineResponse20045Result {
  /**
   * Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions.
   * @type {string}
   * @memberof InlineResponse20045Result
   */
  data?: string;
  /**
   * Log contains the log information from message or handler execution.
   * @type {string}
   * @memberof InlineResponse20045Result
   */
  log?: string;
  /**
   * Events contains a slice of Event objects that were emitted during message or handler execution.
   * @type {Array<InlineResponse20045ResultEvents>}
   * @memberof InlineResponse20045Result
   */
  events?: Array<InlineResponse20045ResultEvents>;
}
/**
 * EventAttribute is a single key-value pair, associated with an event.
 * @export
 * @interface InlineResponse20045ResultAttributes
 */
export interface InlineResponse20045ResultAttributes {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20045ResultAttributes
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20045ResultAttributes
   */
  value?: string;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse20045ResultAttributes
   */
  index?: boolean;
}
/**
 * Event allows application developers to attach additional information to ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx. Later, transactions may be queried using these events.
 * @export
 * @interface InlineResponse20045ResultEvents
 */
export interface InlineResponse20045ResultEvents {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20045ResultEvents
   */
  type?: string;
  /**
   *
   * @type {Array<InlineResponse20045ResultAttributes>}
   * @memberof InlineResponse20045ResultEvents
   */
  attributes?: Array<InlineResponse20045ResultAttributes>;
}
/**
 * BroadcastTxResponse is the response type for the Service.BroadcastTx method.
 * @export
 * @interface InlineResponse20046
 */
export interface InlineResponse20046 {
  /**
   *
   * @type {InlineResponse20046TxResponse}
   * @memberof InlineResponse20046
   */
  tx_response?: InlineResponse20046TxResponse;
}
/**
 * tx_response is the queried TxResponses.
 * @export
 * @interface InlineResponse20046TxResponse
 */
export interface InlineResponse20046TxResponse {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20046TxResponse
   */
  height?: string;
  /**
   * The transaction hash.
   * @type {string}
   * @memberof InlineResponse20046TxResponse
   */
  txhash?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20046TxResponse
   */
  codespace?: string;
  /**
   * Response code.
   * @type {number}
   * @memberof InlineResponse20046TxResponse
   */
  code?: number;
  /**
   * Result bytes, if any.
   * @type {string}
   * @memberof InlineResponse20046TxResponse
   */
  data?: string;
  /**
   * The output of the application\'s logger (raw string). May be non-deterministic.
   * @type {string}
   * @memberof InlineResponse20046TxResponse
   */
  raw_log?: string;
  /**
   * The output of the application\'s logger (typed). May be non-deterministic.
   * @type {Array<InlineResponse20046TxResponseLogs>}
   * @memberof InlineResponse20046TxResponse
   */
  logs?: Array<InlineResponse20046TxResponseLogs>;
  /**
   * Additional information. May be non-deterministic.
   * @type {string}
   * @memberof InlineResponse20046TxResponse
   */
  info?: string;
  /**
   * Amount of gas requested for transaction.
   * @type {string}
   * @memberof InlineResponse20046TxResponse
   */
  gas_wanted?: string;
  /**
   * Amount of gas consumed by transaction.
   * @type {string}
   * @memberof InlineResponse20046TxResponse
   */
  gas_used?: string;
  /**
   *
   * @type {InlineResponse20046TxResponseTx}
   * @memberof InlineResponse20046TxResponse
   */
  tx?: InlineResponse20046TxResponseTx;
  /**
   * Time of the previous block. For heights > 1, it\'s the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it\'s genesis time.
   * @type {string}
   * @memberof InlineResponse20046TxResponse
   */
  timestamp?: string;
}
/**
 * Attribute defines an attribute wrapper where the key and value are strings instead of raw bytes.
 * @export
 * @interface InlineResponse20046TxResponseAttributes
 */
export interface InlineResponse20046TxResponseAttributes {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20046TxResponseAttributes
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20046TxResponseAttributes
   */
  value?: string;
}
/**
 * StringEvent defines en Event object wrapper where all the attributes contain key/value pairs that are strings instead of raw bytes.
 * @export
 * @interface InlineResponse20046TxResponseEvents
 */
export interface InlineResponse20046TxResponseEvents {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20046TxResponseEvents
   */
  type?: string;
  /**
   *
   * @type {Array<InlineResponse20046TxResponseAttributes>}
   * @memberof InlineResponse20046TxResponseEvents
   */
  attributes?: Array<InlineResponse20046TxResponseAttributes>;
}
/**
 * ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
 * @export
 * @interface InlineResponse20046TxResponseLogs
 */
export interface InlineResponse20046TxResponseLogs {
  /**
   *
   * @type {number}
   * @memberof InlineResponse20046TxResponseLogs
   */
  msg_index?: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20046TxResponseLogs
   */
  log?: string;
  /**
   * Events contains a slice of Event objects that were emitted during some execution.
   * @type {Array<InlineResponse20046TxResponseEvents>}
   * @memberof InlineResponse20046TxResponseLogs
   */
  events?: Array<InlineResponse20046TxResponseEvents>;
}
/**
 * The request transaction bytes.
 * @export
 * @interface InlineResponse20046TxResponseTx
 */
export interface InlineResponse20046TxResponseTx {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof InlineResponse20046TxResponseTx
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof InlineResponse20046TxResponseTx
   */
  value?: string;
}
/**
 * QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC method.
 * @export
 * @interface InlineResponse20047
 */
export interface InlineResponse20047 {
  /**
   * height is the block height at which the plan was applied.
   * @type {string}
   * @memberof InlineResponse20047
   */
  height?: string;
}
/**
 * QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC method.
 * @export
 * @interface InlineResponse20048
 */
export interface InlineResponse20048 {
  /**
   *
   * @type {InlineResponse20048Plan}
   * @memberof InlineResponse20048
   */
  plan?: InlineResponse20048Plan;
}
/**
 * plan is the current upgrade plan.
 * @export
 * @interface InlineResponse20048Plan
 */
export interface InlineResponse20048Plan {
  /**
   * Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special \"on-upgrade\" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.
   * @type {string}
   * @memberof InlineResponse20048Plan
   */
  name?: string;
  /**
   * The time after which the upgrade must be performed. Leave set to its zero value to use a pre-defined Height instead.
   * @type {string}
   * @memberof InlineResponse20048Plan
   */
  time?: string;
  /**
   * The height at which the upgrade must be performed. Only used if Time is not set.
   * @type {string}
   * @memberof InlineResponse20048Plan
   */
  height?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20048Plan
   */
  info?: string;
  /**
   *
   * @type {IBCEnabledChainsCanOptInToIncludingTheUpgradedClientStateInItsUpgradePlanThisWillMakeTheChainCommitToTheCorrectUpgradedSelfClientStateBeforeTheUpgradeOccursSoThatConnectingChainsCanVerifyThatTheNewUpgradedClientIsValidByVerifyingAProofOnThePreviousVersionOfTheChainThisWillAllowIBCConnectionsToPersistSmoothlyAcrossPlannedChainUpgrades}
   * @memberof InlineResponse20048Plan
   */
  upgraded_client_state?: IBCEnabledChainsCanOptInToIncludingTheUpgradedClientStateInItsUpgradePlanThisWillMakeTheChainCommitToTheCorrectUpgradedSelfClientStateBeforeTheUpgradeOccursSoThatConnectingChainsCanVerifyThatTheNewUpgradedClientIsValidByVerifyingAProofOnThePreviousVersionOfTheChainThisWillAllowIBCConnectionsToPersistSmoothlyAcrossPlannedChainUpgrades;
}
/**
 * QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState RPC method.
 * @export
 * @interface InlineResponse20049
 */
export interface InlineResponse20049 {
  /**
   *
   * @type {InlineResponseDefaultDetails}
   * @memberof InlineResponse20049
   */
  upgraded_consensus_state?: InlineResponseDefaultDetails;
}
/**
 * Params defines the parameters for the bank module.
 * @export
 * @interface InlineResponse2004Params
 */
export interface InlineResponse2004Params {
  /**
   *
   * @type {Array<InlineResponse2004ParamsSendEnabled>}
   * @memberof InlineResponse2004Params
   */
  send_enabled?: Array<InlineResponse2004ParamsSendEnabled>;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse2004Params
   */
  default_send_enabled?: boolean;
}
/**
 * SendEnabled maps coin denom to a send_enabled status (whether a denom is sendable).
 * @export
 * @interface InlineResponse2004ParamsSendEnabled
 */
export interface InlineResponse2004ParamsSendEnabled {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2004ParamsSendEnabled
   */
  denom?: string;
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse2004ParamsSendEnabled
   */
  enabled?: boolean;
}
/**
 * QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
  /**
   *
   * @type {InlineResponse2005Amount}
   * @memberof InlineResponse2005
   */
  amount?: InlineResponse2005Amount;
}
/**
 * QueryChannelsResponse is the response type for the Query/Channels RPC method.
 * @export
 * @interface InlineResponse20050
 */
export interface InlineResponse20050 {
  /**
   * list of stored channels of the chain.
   * @type {Array<InlineResponse20050Channels>}
   * @memberof InlineResponse20050
   */
  channels?: Array<InlineResponse20050Channels>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof InlineResponse20050
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof InlineResponse20050
   */
  height?: QueryBlockHeight;
}
/**
 * IdentifiedChannel defines a channel with additional port and channel identifier fields.
 * @export
 * @interface InlineResponse20050Channels
 */
export interface InlineResponse20050Channels {
  /**
   * State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.   - STATE_UNINITIALIZED_UNSPECIFIED: Default State  - STATE_INIT: A channel has just started the opening handshake.  - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.  - STATE_OPEN: A channel has completed the handshake. Open channels are ready to send and receive packets.  - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive packets.
   * @type {string}
   * @memberof InlineResponse20050Channels
   */
  state?: InlineResponse20050ChannelsStateEnum;
  /**
   * - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering  - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in which they were sent.  - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
   * @type {string}
   * @memberof InlineResponse20050Channels
   */
  ordering?: InlineResponse20050ChannelsOrderingEnum;
  /**
   *
   * @type {CounterpartyChannelEnd}
   * @memberof InlineResponse20050Channels
   */
  counterparty?: CounterpartyChannelEnd;
  /**
   *
   * @type {Array<string>}
   * @memberof InlineResponse20050Channels
   */
  connection_hops?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20050Channels
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20050Channels
   */
  port_id?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20050Channels
   */
  channel_id?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum InlineResponse20050ChannelsStateEnum {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
  Closed = "STATE_CLOSED",
}
/**
 * @export
 * @enum {string}
 */
export enum InlineResponse20050ChannelsOrderingEnum {
  NoneUnspecified = "ORDER_NONE_UNSPECIFIED",
  Unordered = "ORDER_UNORDERED",
  Ordered = "ORDER_ORDERED",
}

/**
 * QueryChannelResponse is the response type for the Query/Channel RPC method. Besides the Channel end, it includes a proof and the height from which the proof was retrieved.
 * @export
 * @interface InlineResponse20051
 */
export interface InlineResponse20051 {
  /**
   *
   * @type {ChannelAssociatedWithTheRequestIdentifiers}
   * @memberof InlineResponse20051
   */
  channel?: ChannelAssociatedWithTheRequestIdentifiers;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20051
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof InlineResponse20051
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 * QueryClientParamsResponse is the response type for the Query/ClientParams RPC method.
 * @export
 * @interface InlineResponse20052
 */
export interface InlineResponse20052 {
  /**
   *
   * @type {InlineResponse20052Params}
   * @memberof InlineResponse20052
   */
  params?: InlineResponse20052Params;
}
/**
 * params defines the parameters of the module.
 * @export
 * @interface InlineResponse20052Params
 */
export interface InlineResponse20052Params {
  /**
   * allowed_clients defines the list of allowed client state types.
   * @type {Array<string>}
   * @memberof InlineResponse20052Params
   */
  allowed_clients?: Array<string>;
}
/**
 * QueryClientStatesResponse is the response type for the Query/ClientStates RPC method.
 * @export
 * @interface InlineResponse20053
 */
export interface InlineResponse20053 {
  /**
   * list of stored ClientStates of the chain.
   * @type {Array<InlineResponse20053ClientStates>}
   * @memberof InlineResponse20053
   */
  client_states?: Array<InlineResponse20053ClientStates>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof InlineResponse20053
   */
  pagination?: PaginationResponse;
}
/**
 * IdentifiedClientState defines a client state with an additional client identifier field.
 * @export
 * @interface InlineResponse20053ClientStates
 */
export interface InlineResponse20053ClientStates {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20053ClientStates
   */
  client_id?: string;
  /**
   *
   * @type {ClientState}
   * @memberof InlineResponse20053ClientStates
   */
  client_state?: ClientState;
}
/**
 * QueryClientStateResponse is the response type for the Query/ClientState RPC method. Besides the client state, it includes a proof and the height from which the proof was retrieved.
 * @export
 * @interface InlineResponse20054
 */
export interface InlineResponse20054 {
  /**
   *
   * @type {ClientStateAssociatedWithTheRequestIdentifier}
   * @memberof InlineResponse20054
   */
  client_state?: ClientStateAssociatedWithTheRequestIdentifier;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20054
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof InlineResponse20054
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 * QueryConnectionsResponse is the response type for the Query/Connections RPC method.
 * @export
 * @interface InlineResponse20055
 */
export interface InlineResponse20055 {
  /**
   * list of stored connections of the chain.
   * @type {Array<InlineResponse20055Connections>}
   * @memberof InlineResponse20055
   */
  connections?: Array<InlineResponse20055Connections>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof InlineResponse20055
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof InlineResponse20055
   */
  height?: QueryBlockHeight;
}
/**
 * IdentifiedConnection defines a connection with additional connection identifier field.
 * @export
 * @interface InlineResponse20055Connections
 */
export interface InlineResponse20055Connections {
  /**
   * connection identifier.
   * @type {string}
   * @memberof InlineResponse20055Connections
   */
  id?: string;
  /**
   * client associated with this connection.
   * @type {string}
   * @memberof InlineResponse20055Connections
   */
  client_id?: string;
  /**
   *
   * @type {Array<InlineResponse20055Versions>}
   * @memberof InlineResponse20055Connections
   */
  versions?: Array<InlineResponse20055Versions>;
  /**
   * current state of the connection end.
   * @type {string}
   * @memberof InlineResponse20055Connections
   */
  state?: InlineResponse20055ConnectionsStateEnum;
  /**
   *
   * @type {InlineResponse20055Counterparty}
   * @memberof InlineResponse20055Connections
   */
  counterparty?: InlineResponse20055Counterparty;
  /**
   * delay period associated with this connection.
   * @type {string}
   * @memberof InlineResponse20055Connections
   */
  delay_period?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum InlineResponse20055ConnectionsStateEnum {
  UninitializedUnspecified = "STATE_UNINITIALIZED_UNSPECIFIED",
  Init = "STATE_INIT",
  Tryopen = "STATE_TRYOPEN",
  Open = "STATE_OPEN",
}

/**
 * counterparty chain associated with this connection.
 * @export
 * @interface InlineResponse20055Counterparty
 */
export interface InlineResponse20055Counterparty {
  /**
   * identifies the client on the counterparty chain associated with a given connection.
   * @type {string}
   * @memberof InlineResponse20055Counterparty
   */
  client_id?: string;
  /**
   * identifies the connection end on the counterparty chain associated with a given connection.
   * @type {string}
   * @memberof InlineResponse20055Counterparty
   */
  connection_id?: string;
  /**
   *
   * @type {MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey}
   * @memberof InlineResponse20055Counterparty
   */
  prefix?: MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey;
}
/**
 * Version defines the versioning scheme used to negotiate the IBC verison in the connection handshake.
 * @export
 * @interface InlineResponse20055Versions
 */
export interface InlineResponse20055Versions {
  /**
   *
   * @type {string}
   * @memberof InlineResponse20055Versions
   */
  identifier?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof InlineResponse20055Versions
   */
  features?: Array<string>;
}
/**
 * QueryConnectionResponse is the response type for the Query/Connection RPC method. Besides the connection end, it includes a proof and the height from which the proof was retrieved.
 * @export
 * @interface InlineResponse20056
 */
export interface InlineResponse20056 {
  /**
   *
   * @type {ConnectionAssociatedWithTheRequestIdentifier}
   * @memberof InlineResponse20056
   */
  connection?: ConnectionAssociatedWithTheRequestIdentifier;
  /**
   *
   * @type {string}
   * @memberof InlineResponse20056
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof InlineResponse20056
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 * QueryConnectionsResponse is the response type for the Query/DenomTraces RPC method.
 * @export
 * @interface InlineResponse20057
 */
export interface InlineResponse20057 {
  /**
   * denom_traces returns all denominations trace information.
   * @type {Array<InlineResponse20057DenomTraces>}
   * @memberof InlineResponse20057
   */
  denom_traces?: Array<InlineResponse20057DenomTraces>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof InlineResponse20057
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 * DenomTrace contains the base denomination for ICS20 fungible tokens and the source tracing information path.
 * @export
 * @interface InlineResponse20057DenomTraces
 */
export interface InlineResponse20057DenomTraces {
  /**
   * path defines the chain of port/channel identifiers used for tracing the source of the fungible token.
   * @type {string}
   * @memberof InlineResponse20057DenomTraces
   */
  path?: string;
  /**
   * base denomination of the relayed fungible token.
   * @type {string}
   * @memberof InlineResponse20057DenomTraces
   */
  base_denom?: string;
}
/**
 * QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC method.
 * @export
 * @interface InlineResponse20058
 */
export interface InlineResponse20058 {
  /**
   *
   * @type {InlineResponse20058DenomTrace}
   * @memberof InlineResponse20058
   */
  denom_trace?: InlineResponse20058DenomTrace;
}
/**
 * denom_trace returns the requested denomination trace information.
 * @export
 * @interface InlineResponse20058DenomTrace
 */
export interface InlineResponse20058DenomTrace {
  /**
   * path defines the chain of port/channel identifiers used for tracing the source of the fungible token.
   * @type {string}
   * @memberof InlineResponse20058DenomTrace
   */
  path?: string;
  /**
   * base denomination of the relayed fungible token.
   * @type {string}
   * @memberof InlineResponse20058DenomTrace
   */
  base_denom?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20059
 */
export interface InlineResponse20059 {
  /**
   *
   * @type {InlineResponse20059Params}
   * @memberof InlineResponse20059
   */
  params?: InlineResponse20059Params;
}
/**
 * params defines the parameters of the module.
 * @export
 * @interface InlineResponse20059Params
 */
export interface InlineResponse20059Params {
  /**
   * send_enabled enables or disables all cross-chain token transfers from this chain.
   * @type {boolean}
   * @memberof InlineResponse20059Params
   */
  send_enabled?: boolean;
  /**
   * receive_enabled enables or disables all cross-chain token transfers to this chain.
   * @type {boolean}
   * @memberof InlineResponse20059Params
   */
  receive_enabled?: boolean;
}
/**
 * amount is the supply of the coin.
 * @export
 * @interface InlineResponse2005Amount
 */
export interface InlineResponse2005Amount {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2005Amount
   */
  denom?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2005Amount
   */
  amount?: string;
}
/**
 * GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method.
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
  /**
   *
   * @type {BlockID1}
   * @memberof InlineResponse2006
   */
  block_id?: BlockID1;
  /**
   *
   * @type {InlineResponse2006Block}
   * @memberof InlineResponse2006
   */
  block?: InlineResponse2006Block;
}
/**
 *
 * @export
 * @interface InlineResponse2006Block
 */
export interface InlineResponse2006Block {
  /**
   *
   * @type {InlineResponse2006BlockHeader}
   * @memberof InlineResponse2006Block
   */
  header?: InlineResponse2006BlockHeader;
  /**
   *
   * @type {DataContainsTheSetOfTransactionsIncludedInTheBlock}
   * @memberof InlineResponse2006Block
   */
  data?: DataContainsTheSetOfTransactionsIncludedInTheBlock;
  /**
   *
   * @type {InlineResponse2006BlockEvidence}
   * @memberof InlineResponse2006Block
   */
  evidence?: InlineResponse2006BlockEvidence;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit}
   * @memberof InlineResponse2006Block
   */
  last_commit?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit;
}
/**
 *
 * @export
 * @interface InlineResponse2006BlockEvidence
 */
export interface InlineResponse2006BlockEvidence {
  /**
   *
   * @type {Array<InlineResponse2006BlockEvidenceEvidence>}
   * @memberof InlineResponse2006BlockEvidence
   */
  evidence?: Array<InlineResponse2006BlockEvidenceEvidence>;
}
/**
 * DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
 * @export
 * @interface InlineResponse2006BlockEvidenceDuplicateVoteEvidence
 */
export interface InlineResponse2006BlockEvidenceDuplicateVoteEvidence {
  /**
   *
   * @type {InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidence
   */
  vote_a?: InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidence
   */
  vote_b?: InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidence
   */
  total_voting_power?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidence
   */
  validator_power?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidence
   */
  timestamp?: string;
}
/**
 * Vote represents a prevote, precommit, or commit vote from validators for consensus.
 * @export
 * @interface InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA
 */
export interface InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA {
  /**
   * SignedMsgType is a type of signed message in the consensus.   - SIGNED_MSG_TYPE_PREVOTE: Votes  - SIGNED_MSG_TYPE_PROPOSAL: Proposals
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA
   */
  type?: InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteATypeEnum;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA
   */
  height?: string;
  /**
   *
   * @type {number}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA
   */
  round?: number;
  /**
   *
   * @type {BlockID1}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA
   */
  block_id?: BlockID1;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA
   */
  timestamp?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA
   */
  validator_address?: string;
  /**
   *
   * @type {number}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA
   */
  validator_index?: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA
   */
  signature?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteATypeEnum {
  Unknown = "SIGNED_MSG_TYPE_UNKNOWN",
  Prevote = "SIGNED_MSG_TYPE_PREVOTE",
  Precommit = "SIGNED_MSG_TYPE_PRECOMMIT",
  Proposal = "SIGNED_MSG_TYPE_PROPOSAL",
}

/**
 *
 * @export
 * @interface InlineResponse2006BlockEvidenceEvidence
 */
export interface InlineResponse2006BlockEvidenceEvidence {
  /**
   *
   * @type {InlineResponse2006BlockEvidenceDuplicateVoteEvidence}
   * @memberof InlineResponse2006BlockEvidenceEvidence
   */
  duplicate_vote_evidence?: InlineResponse2006BlockEvidenceDuplicateVoteEvidence;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidence}
   * @memberof InlineResponse2006BlockEvidenceEvidence
   */
  light_client_attack_evidence?: InlineResponse2006BlockEvidenceLightClientAttackEvidence;
}
/**
 * LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
 * @export
 * @interface InlineResponse2006BlockEvidenceLightClientAttackEvidence
 */
export interface InlineResponse2006BlockEvidenceLightClientAttackEvidence {
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlock}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidence
   */
  conflicting_block?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlock;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidence
   */
  common_height?: string;
  /**
   *
   * @type {Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidence
   */
  byzantine_validators?: Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidence
   */
  total_voting_power?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidence
   */
  timestamp?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlock
 */
export interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlock {
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlock
   */
  signed_header?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlock
   */
  validator_set?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet;
}
/**
 *
 * @export
 * @interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader
 */
export interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader {
  /**
   *
   * @type {InlineResponse2006BlockHeader}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader
   */
  header?: InlineResponse2006BlockHeader;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader
   */
  commit?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit;
}
/**
 * Commit contains the evidence that a block was committed by a set of validators.
 * @export
 * @interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
 */
export interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
   */
  height?: string;
  /**
   *
   * @type {number}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
   */
  round?: number;
  /**
   *
   * @type {BlockID1}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
   */
  block_id?: BlockID1;
  /**
   *
   * @type {Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures>}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
   */
  signatures?: Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures>;
}
/**
 * CommitSig is a part of the Vote included in a Commit.
 * @export
 * @interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
 */
export interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
   */
  block_id_flag?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesBlockIdFlagEnum;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
   */
  validator_address?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
   */
  timestamp?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
   */
  signature?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesBlockIdFlagEnum {
  Unknown = "BLOCK_ID_FLAG_UNKNOWN",
  Absent = "BLOCK_ID_FLAG_ABSENT",
  Commit = "BLOCK_ID_FLAG_COMMIT",
  Nil = "BLOCK_ID_FLAG_NIL",
}

/**
 *
 * @export
 * @interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet
 */
export interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet {
  /**
   *
   * @type {Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet
   */
  validators?: Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet
   */
  proposer?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet
   */
  total_voting_power?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
 */
export interface InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
   */
  address?: string;
  /**
   *
   * @type {PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
   */
  pub_key?: PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
   */
  voting_power?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
   */
  proposer_priority?: string;
}
/**
 * Header defines the structure of a Tendermint block header.
 * @export
 * @interface InlineResponse2006BlockHeader
 */
export interface InlineResponse2006BlockHeader {
  /**
   *
   * @type {BasicBlockInfo}
   * @memberof InlineResponse2006BlockHeader
   */
  version?: BasicBlockInfo;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  chain_id?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  height?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  time?: string;
  /**
   *
   * @type {PrevBlockInfo}
   * @memberof InlineResponse2006BlockHeader
   */
  last_block_id?: PrevBlockInfo;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  last_commit_hash?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  data_hash?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  validators_hash?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  next_validators_hash?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  consensus_hash?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  app_hash?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  last_results_hash?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  evidence_hash?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2006BlockHeader
   */
  proposer_address?: string;
}
/**
 * GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method.
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
  /**
   *
   * @type {BlockID1}
   * @memberof InlineResponse2007
   */
  block_id?: BlockID1;
  /**
   *
   * @type {InlineResponse2006Block}
   * @memberof InlineResponse2007
   */
  block?: InlineResponse2006Block;
}
/**
 * GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC method.
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
  /**
   *
   * @type {InlineResponse2008DefaultNodeInfo}
   * @memberof InlineResponse2008
   */
  default_node_info?: InlineResponse2008DefaultNodeInfo;
  /**
   *
   * @type {InlineResponse2008ApplicationVersion}
   * @memberof InlineResponse2008
   */
  application_version?: InlineResponse2008ApplicationVersion;
}
/**
 * VersionInfo is the type for the GetNodeInfoResponse message.
 * @export
 * @interface InlineResponse2008ApplicationVersion
 */
export interface InlineResponse2008ApplicationVersion {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008ApplicationVersion
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008ApplicationVersion
   */
  app_name?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008ApplicationVersion
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008ApplicationVersion
   */
  git_commit?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008ApplicationVersion
   */
  build_tags?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008ApplicationVersion
   */
  go_version?: string;
  /**
   *
   * @type {Array<ModuleIsTheTypeForVersionInfo>}
   * @memberof InlineResponse2008ApplicationVersion
   */
  build_deps?: Array<ModuleIsTheTypeForVersionInfo>;
}
/**
 *
 * @export
 * @interface InlineResponse2008DefaultNodeInfo
 */
export interface InlineResponse2008DefaultNodeInfo {
  /**
   *
   * @type {InlineResponse2008DefaultNodeInfoProtocolVersion}
   * @memberof InlineResponse2008DefaultNodeInfo
   */
  protocol_version?: InlineResponse2008DefaultNodeInfoProtocolVersion;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfo
   */
  default_node_id?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfo
   */
  listen_addr?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfo
   */
  network?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfo
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfo
   */
  channels?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfo
   */
  moniker?: string;
  /**
   *
   * @type {InlineResponse2008DefaultNodeInfoOther}
   * @memberof InlineResponse2008DefaultNodeInfo
   */
  other?: InlineResponse2008DefaultNodeInfoOther;
}
/**
 *
 * @export
 * @interface InlineResponse2008DefaultNodeInfoOther
 */
export interface InlineResponse2008DefaultNodeInfoOther {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfoOther
   */
  tx_index?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfoOther
   */
  rpc_address?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2008DefaultNodeInfoProtocolVersion
 */
export interface InlineResponse2008DefaultNodeInfoProtocolVersion {
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfoProtocolVersion
   */
  p2p?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfoProtocolVersion
   */
  block?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponse2008DefaultNodeInfoProtocolVersion
   */
  app?: string;
}
/**
 * GetSyncingResponse is the response type for the Query/GetSyncing RPC method.
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
  /**
   *
   * @type {boolean}
   * @memberof InlineResponse2009
   */
  syncing?: boolean;
}
/**
 * account defines the account of the corresponding address.
 * @export
 * @interface InlineResponse200Account
 */
export interface InlineResponse200Account {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof InlineResponse200Account
   */
  type_url?: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   * @type {string}
   * @memberof InlineResponse200Account
   */
  value?: string;
}
/**
 *
 * @export
 * @interface InlineResponseDefault
 */
export interface InlineResponseDefault {
  /**
   *
   * @type {string}
   * @memberof InlineResponseDefault
   */
  error?: string;
  /**
   *
   * @type {number}
   * @memberof InlineResponseDefault
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponseDefault
   */
  message?: string;
  /**
   *
   * @type {Array<InlineResponseDefaultDetails>}
   * @memberof InlineResponseDefault
   */
  details?: Array<InlineResponseDefaultDetails>;
}
/**
 *
 * @export
 * @interface InlineResponseDefault1
 */
export interface InlineResponseDefault1 {
  /**
   *
   * @type {string}
   * @memberof InlineResponseDefault1
   */
  error?: string;
  /**
   *
   * @type {number}
   * @memberof InlineResponseDefault1
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof InlineResponseDefault1
   */
  message?: string;
  /**
   *
   * @type {Array<InlineResponseDefault1Details>}
   * @memberof InlineResponseDefault1
   */
  details?: Array<InlineResponseDefault1Details>;
}
/**
 *
 * @export
 * @interface InlineResponseDefault1Details
 */
export interface InlineResponseDefault1Details {
  /**
   *
   * @type {string}
   * @memberof InlineResponseDefault1Details
   */
  type_url?: string;
  /**
   *
   * @type {string}
   * @memberof InlineResponseDefault1Details
   */
  value?: string;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface InlineResponseDefaultDetails
 */
// export interface InlineResponseDefaultDetails {
//     /**
//      * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
//      * @type {string}
//      * @memberof InlineResponseDefaultDetails
//      */
//     type_url?: string;
//     /**
//      * Must be a valid serialized protocol buffer of the above specified type.
//      * @type {string}
//      * @memberof InlineResponseDefaultDetails
//      */
//     value?: string;
// }
export interface InlineResponseDefaultDetails extends AnyI {}
/**
 *
 * @export
 * @interface KVPair
 */
export interface KVPair {
  /**
   *
   * @type {string}
   * @memberof KVPair
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof KVPair
   */
  value?: string;
}
/**
 * commitment merkle prefix of the counterparty chain.
 * @export
 * @interface MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey
 */
export interface MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey {
  /**
   *
   * @type {string}
   * @memberof MerklePrefixIsMerklePathPrefixedToTheKeyTheConstructedKeyFromThePathAndTheKeyWillBeAppendPathKeyPathAppendPathKeyPrefixKey
   */
  key_prefix?: string;
}
/**
 *
 * @export
 * @interface ModuleIsTheTypeForVersionInfo
 */
export interface ModuleIsTheTypeForVersionInfo {
  /**
   *
   * @type {string}
   * @memberof ModuleIsTheTypeForVersionInfo
   */
  path?: string;
  /**
   *
   * @type {string}
   * @memberof ModuleIsTheTypeForVersionInfo
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof ModuleIsTheTypeForVersionInfo
   */
  sum?: string;
}
/**
 *
 * @export
 * @interface PaginatedQueryTxs
 */
export interface PaginatedQueryTxs {
  /**
   *
   * @type {number}
   * @memberof PaginatedQueryTxs
   */
  total_count?: number;
  /**
   *
   * @type {number}
   * @memberof PaginatedQueryTxs
   */
  count?: number;
  /**
   *
   * @type {number}
   * @memberof PaginatedQueryTxs
   */
  page_number?: number;
  /**
   *
   * @type {number}
   * @memberof PaginatedQueryTxs
   */
  page_total?: number;
  /**
   *
   * @type {number}
   * @memberof PaginatedQueryTxs
   */
  limit?: number;
  /**
   *
   * @type {Array<PaginatedQueryTxsTxs>}
   * @memberof PaginatedQueryTxs
   */
  txs?: Array<PaginatedQueryTxsTxs>;
}
/**
 *
 * @export
 * @interface PaginatedQueryTxsTxs
 */
export interface PaginatedQueryTxsTxs {
  /**
   *
   * @type {string}
   * @memberof PaginatedQueryTxsTxs
   */
  hash?: string;
  /**
   *
   * @type {number}
   * @memberof PaginatedQueryTxsTxs
   */
  height?: number;
  /**
   *
   * @type {TxQueryTx}
   * @memberof PaginatedQueryTxsTxs
   */
  tx?: TxQueryTx;
  /**
   *
   * @type {TxQueryResult}
   * @memberof PaginatedQueryTxsTxs
   */
  result?: TxQueryResult;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface PaginationResponse
 */
export interface PaginationResponse {
  /**
   *
   * @type {string}
   * @memberof PaginationResponse
   */
  next_key?: string;
  /**
   *
   * @type {string}
   * @memberof PaginationResponse
   */
  total?: string;
}
/**
 *
 * @export
 * @interface ParamChange
 */
export interface ParamChange {
  /**
   *
   * @type {string}
   * @memberof ParamChange
   */
  subspace?: string;
  /**
   *
   * @type {string}
   * @memberof ParamChange
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof ParamChange
   */
  subkey?: string;
  /**
   *
   * @type {object}
   * @memberof ParamChange
   */
  value?: object;
}
/**
 *
 * @export
 * @interface PartsetHeader
 */
export interface PartsetHeader {
  /**
   *
   * @type {number}
   * @memberof PartsetHeader
   */
  total?: number;
  /**
   *
   * @type {string}
   * @memberof PartsetHeader
   */
  hash?: string;
}
/**
 *
 * @export
 * @interface PrevBlockInfo
 */
export interface PrevBlockInfo {
  /**
   *
   * @type {string}
   * @memberof PrevBlockInfo
   */
  hash?: string;
  /**
   *
   * @type {PartsetHeader}
   * @memberof PrevBlockInfo
   */
  part_set_header?: PartsetHeader;
}
/**
 *
 * @export
 * @interface Proposer
 */
export interface Proposer {
  /**
   *
   * @type {string}
   * @memberof Proposer
   */
  proposal_id?: string;
  /**
   *
   * @type {string}
   * @memberof Proposer
   */
  proposer?: string;
}
/**
 *
 * @export
 * @interface PublicKey
 */
export interface PublicKey {
  /**
   *
   * @type {string}
   * @memberof PublicKey
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof PublicKey
   */
  value?: string;
}
/**
 *
 * @export
 * @interface PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators
 */
export interface PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators {
  /**
   *
   * @type {string}
   * @memberof PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators
   */
  ed25519?: string;
  /**
   *
   * @type {string}
   * @memberof PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators
   */
  secp256k1?: string;
}
/**
 * Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset
 * @export
 * @interface QueryBlockHeight
 */
export interface QueryBlockHeight {
  /**
   *
   * @type {string}
   * @memberof QueryBlockHeight
   */
  revision_number?: string;
  /**
   *
   * @type {string}
   * @memberof QueryBlockHeight
   */
  revision_height?: string;
}
/**
 *
 * @export
 * @interface QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod
 */
export interface QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod {
  /**
   *
   * @type {ClientStateAssociatedWithTheChannel}
   * @memberof QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod
   */
  identified_client_state?: ClientStateAssociatedWithTheChannel;
  /**
   *
   * @type {string}
   * @memberof QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod1
 */
export interface QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod1 {
  /**
   *
   * @type {ConsensusStateAssociatedWithTheChannel}
   * @memberof QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod1
   */
  consensus_state?: ConsensusStateAssociatedWithTheChannel;
  /**
   *
   * @type {string}
   * @memberof QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod1
   */
  client_id?: string;
  /**
   *
   * @type {string}
   * @memberof QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod1
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod1
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface QueryClientConnectionsResponseIsTheResponseTypeForTheQueryClientConnectionsRPCMethod
 */
export interface QueryClientConnectionsResponseIsTheResponseTypeForTheQueryClientConnectionsRPCMethod {
  /**
   * slice of all the connection paths associated with a client.
   * @type {Array<string>}
   * @memberof QueryClientConnectionsResponseIsTheResponseTypeForTheQueryClientConnectionsRPCMethod
   */
  connection_paths?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof QueryClientConnectionsResponseIsTheResponseTypeForTheQueryClientConnectionsRPCMethod
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasGenerated}
   * @memberof QueryClientConnectionsResponseIsTheResponseTypeForTheQueryClientConnectionsRPCMethod
   */
  proof_height?: HeightAtWhichTheProofWasGenerated;
}
/**
 *
 * @export
 * @interface QueryConnectionChannelsResponseIsTheResponseTypeForTheQueryQueryConnectionChannelsRPCMethod
 */
export interface QueryConnectionChannelsResponseIsTheResponseTypeForTheQueryQueryConnectionChannelsRPCMethod {
  /**
   * list of channels associated with a connection.
   * @type {Array<InlineResponse20050Channels>}
   * @memberof QueryConnectionChannelsResponseIsTheResponseTypeForTheQueryQueryConnectionChannelsRPCMethod
   */
  channels?: Array<InlineResponse20050Channels>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof QueryConnectionChannelsResponseIsTheResponseTypeForTheQueryQueryConnectionChannelsRPCMethod
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof QueryConnectionChannelsResponseIsTheResponseTypeForTheQueryQueryConnectionChannelsRPCMethod
   */
  height?: QueryBlockHeight;
}
/**
 *
 * @export
 * @interface QueryConnectionClientStateResponseIsTheResponseTypeForTheQueryConnectionClientStateRPCMethod
 */
export interface QueryConnectionClientStateResponseIsTheResponseTypeForTheQueryConnectionClientStateRPCMethod {
  /**
   *
   * @type {ClientStateAssociatedWithTheChannel}
   * @memberof QueryConnectionClientStateResponseIsTheResponseTypeForTheQueryConnectionClientStateRPCMethod
   */
  identified_client_state?: ClientStateAssociatedWithTheChannel;
  /**
   *
   * @type {string}
   * @memberof QueryConnectionClientStateResponseIsTheResponseTypeForTheQueryConnectionClientStateRPCMethod
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof QueryConnectionClientStateResponseIsTheResponseTypeForTheQueryConnectionClientStateRPCMethod
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface QueryConnectionConsensusStateResponseIsTheResponseTypeForTheQueryConnectionConsensusStateRPCMethod
 */
export interface QueryConnectionConsensusStateResponseIsTheResponseTypeForTheQueryConnectionConsensusStateRPCMethod {
  /**
   *
   * @type {ConsensusStateAssociatedWithTheChannel}
   * @memberof QueryConnectionConsensusStateResponseIsTheResponseTypeForTheQueryConnectionConsensusStateRPCMethod
   */
  consensus_state?: ConsensusStateAssociatedWithTheChannel;
  /**
   *
   * @type {string}
   * @memberof QueryConnectionConsensusStateResponseIsTheResponseTypeForTheQueryConnectionConsensusStateRPCMethod
   */
  client_id?: string;
  /**
   *
   * @type {string}
   * @memberof QueryConnectionConsensusStateResponseIsTheResponseTypeForTheQueryConnectionConsensusStateRPCMethod
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof QueryConnectionConsensusStateResponseIsTheResponseTypeForTheQueryConnectionConsensusStateRPCMethod
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface QueryConsensusStateResponseIsTheResponseTypeForTheQueryConsensusStateRPCMethod
 */
export interface QueryConsensusStateResponseIsTheResponseTypeForTheQueryConsensusStateRPCMethod {
  /**
   *
   * @type {ConsensusStateAssociatedWithTheClientIdentifierAtTheGivenHeight}
   * @memberof QueryConsensusStateResponseIsTheResponseTypeForTheQueryConsensusStateRPCMethod
   */
  consensus_state?: ConsensusStateAssociatedWithTheClientIdentifierAtTheGivenHeight;
  /**
   *
   * @type {string}
   * @memberof QueryConsensusStateResponseIsTheResponseTypeForTheQueryConsensusStateRPCMethod
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof QueryConsensusStateResponseIsTheResponseTypeForTheQueryConsensusStateRPCMethod
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethod
 */
export interface QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethod {
  /**
   *
   * @type {Array<QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethodConsensusStates>}
   * @memberof QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethod
   */
  consensus_states?: Array<QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethodConsensusStates>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethod
   */
  pagination?: PaginationResponse;
}
/**
 * ConsensusStateWithHeight defines a consensus state with an additional height field.
 * @export
 * @interface QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethodConsensusStates
 */
export interface QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethodConsensusStates {
  /**
   *
   * @type {ConsensusStateHeight}
   * @memberof QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethodConsensusStates
   */
  height?: ConsensusStateHeight;
  /**
   *
   * @type {ConsensusState}
   * @memberof QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethodConsensusStates
   */
  consensus_state?: ConsensusState;
}
/**
 *
 * @export
 * @interface QueryPacketAcknowledgementResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
 */
export interface QueryPacketAcknowledgementResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved {
  /**
   *
   * @type {string}
   * @memberof QueryPacketAcknowledgementResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
   */
  acknowledgement?: string;
  /**
   *
   * @type {string}
   * @memberof QueryPacketAcknowledgementResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof QueryPacketAcknowledgementResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethod
 */
export interface QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethod {
  /**
   *
   * @type {Array<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements>}
   * @memberof QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethod
   */
  acknowledgements?: Array<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethod
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethod
   */
  height?: QueryBlockHeight;
}
/**
 * PacketState defines the generic type necessary to retrieve and store packet commitments, acknowledgements, and receipts. Caller is responsible for knowing the context necessary to interpret this state as a commitment, acknowledgement, or a receipt.
 * @export
 * @interface QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements
 */
export interface QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements {
  /**
   * channel port identifier.
   * @type {string}
   * @memberof QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements
   */
  port_id?: string;
  /**
   * channel unique identifier.
   * @type {string}
   * @memberof QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements
   */
  channel_id?: string;
  /**
   * packet sequence.
   * @type {string}
   * @memberof QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements
   */
  sequence?: string;
  /**
   * embedded data that represents packet state.
   * @type {string}
   * @memberof QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements
   */
  data?: string;
}
/**
 *
 * @export
 * @interface QueryPacketCommitmentResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
 */
export interface QueryPacketCommitmentResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved {
  /**
   *
   * @type {string}
   * @memberof QueryPacketCommitmentResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
   */
  commitment?: string;
  /**
   *
   * @type {string}
   * @memberof QueryPacketCommitmentResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof QueryPacketCommitmentResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface QueryPacketCommitmentsResponseIsTheRequestTypeForTheQueryQueryPacketCommitmentsRPCMethod
 */
export interface QueryPacketCommitmentsResponseIsTheRequestTypeForTheQueryQueryPacketCommitmentsRPCMethod {
  /**
   *
   * @type {Array<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements>}
   * @memberof QueryPacketCommitmentsResponseIsTheRequestTypeForTheQueryQueryPacketCommitmentsRPCMethod
   */
  commitments?: Array<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethodAcknowledgements>;
  /**
   *
   * @type {PaginationResponse}
   * @memberof QueryPacketCommitmentsResponseIsTheRequestTypeForTheQueryQueryPacketCommitmentsRPCMethod
   */
  pagination?: PaginationResponse;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof QueryPacketCommitmentsResponseIsTheRequestTypeForTheQueryQueryPacketCommitmentsRPCMethod
   */
  height?: QueryBlockHeight;
}
/**
 *
 * @export
 * @interface QueryPacketReceiptResponseDefinesTheClientQueryResponseForAPacketReceiptWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
 */
export interface QueryPacketReceiptResponseDefinesTheClientQueryResponseForAPacketReceiptWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved {
  /**
   *
   * @type {boolean}
   * @memberof QueryPacketReceiptResponseDefinesTheClientQueryResponseForAPacketReceiptWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
   */
  received?: boolean;
  /**
   *
   * @type {string}
   * @memberof QueryPacketReceiptResponseDefinesTheClientQueryResponseForAPacketReceiptWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof QueryPacketReceiptResponseDefinesTheClientQueryResponseForAPacketReceiptWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod
 */
export interface QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod {
  /**
   *
   * @type {QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams}
   * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod
   */
  params?: QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams;
}
/**
 * Params represents the parameters used for by the slashing module.
 * @export
 * @interface QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
 */
export interface QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams {
  /**
   *
   * @type {string}
   * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
   */
  signed_blocks_window?: string;
  /**
   *
   * @type {string}
   * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
   */
  min_signed_per_window?: string;
  /**
   *
   * @type {string}
   * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
   */
  downtime_jail_duration?: string;
  /**
   *
   * @type {string}
   * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
   */
  slash_fraction_double_sign?: string;
  /**
   *
   * @type {string}
   * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
   */
  slash_fraction_downtime?: string;
}
/**
 *
 * @export
 * @interface QuerySequenceResponseIsTheRequestTypeForTheQueryQueryNextSequenceReceiveResponseRPCMethod
 */
export interface QuerySequenceResponseIsTheRequestTypeForTheQueryQueryNextSequenceReceiveResponseRPCMethod {
  /**
   *
   * @type {string}
   * @memberof QuerySequenceResponseIsTheRequestTypeForTheQueryQueryNextSequenceReceiveResponseRPCMethod
   */
  next_sequence_receive?: string;
  /**
   *
   * @type {string}
   * @memberof QuerySequenceResponseIsTheRequestTypeForTheQueryQueryNextSequenceReceiveResponseRPCMethod
   */
  proof?: string;
  /**
   *
   * @type {HeightAtWhichTheProofWasRetrieved}
   * @memberof QuerySequenceResponseIsTheRequestTypeForTheQueryQueryNextSequenceReceiveResponseRPCMethod
   */
  proof_height?: HeightAtWhichTheProofWasRetrieved;
}
/**
 *
 * @export
 * @interface QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod
 */
export interface QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod {
  /**
   *
   * @type {ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress}
   * @memberof QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod
   */
  val_signing_info?: ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress;
}
/**
 *
 * @export
 * @interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod
 */
export interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod {
  /**
   *
   * @type {Array<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo>}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod
   */
  info?: Array<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo>;
  /**
   *
   * @type {QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod
   */
  pagination?: QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination;
}
/**
 * ValidatorSigningInfo defines a validator\'s signing info for monitoring their liveness activity.
 * @export
 * @interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
 */
export interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo {
  /**
   *
   * @type {string}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
   */
  start_height?: string;
  /**
   *
   * @type {string}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
   */
  index_offset?: string;
  /**
   *
   * @type {string}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
   */
  jailed_until?: string;
  /**
   *
   * @type {boolean}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
   */
  tombstoned?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
   */
  missed_blocks_counter?: string;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination
 */
export interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination {
  /**
   *
   * @type {string}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination
   */
  next_key?: string;
  /**
   *
   * @type {string}
   * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination
   */
  total?: string;
}
/**
 *
 * @export
 * @interface QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod
 */
export interface QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod {
  /**
   *
   * @type {Array<InlineResponse2002Balances>}
   * @memberof QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod
   */
  supply?: Array<InlineResponse2002Balances>;
}
/**
 *
 * @export
 * @interface QueryUnreceivedAcksResponseIsTheResponseTypeForTheQueryUnreceivedAcksRPCMethod
 */
export interface QueryUnreceivedAcksResponseIsTheResponseTypeForTheQueryUnreceivedAcksRPCMethod {
  /**
   *
   * @type {Array<string>}
   * @memberof QueryUnreceivedAcksResponseIsTheResponseTypeForTheQueryUnreceivedAcksRPCMethod
   */
  sequences?: Array<string>;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof QueryUnreceivedAcksResponseIsTheResponseTypeForTheQueryUnreceivedAcksRPCMethod
   */
  height?: QueryBlockHeight;
}
/**
 *
 * @export
 * @interface QueryUnreceivedPacketsResponseIsTheResponseTypeForTheQueryUnreceivedPacketCommitmentsRPCMethod
 */
export interface QueryUnreceivedPacketsResponseIsTheResponseTypeForTheQueryUnreceivedPacketCommitmentsRPCMethod {
  /**
   *
   * @type {Array<string>}
   * @memberof QueryUnreceivedPacketsResponseIsTheResponseTypeForTheQueryUnreceivedPacketCommitmentsRPCMethod
   */
  sequences?: Array<string>;
  /**
   *
   * @type {QueryBlockHeight}
   * @memberof QueryUnreceivedPacketsResponseIsTheResponseTypeForTheQueryUnreceivedPacketCommitmentsRPCMethod
   */
  height?: QueryBlockHeight;
}
/**
 *
 * @export
 * @interface QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod
 */
export interface QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod {
  /**
   *
   * @type {QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission}
   * @memberof QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod
   */
  commission?: QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission;
}
/**
 * commission defines the commision the validator received.
 * @export
 * @interface QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission
 */
export interface QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission {
  /**
   *
   * @type {Array<InlineResponse20012Pool>}
   * @memberof QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission
   */
  commission?: Array<InlineResponse20012Pool>;
}
/**
 *
 * @export
 * @interface QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod
 */
export interface QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod {
  /**
   *
   * @type {Array<InlineResponse20034DelegationResponses>}
   * @memberof QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod
   */
  delegation_responses?: Array<InlineResponse20034DelegationResponses>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 *
 * @export
 * @interface QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod
 */
export interface QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod {
  /**
   *
   * @type {InlineResponse20038Validator}
   * @memberof QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod
   */
  validator?: InlineResponse20038Validator;
}
/**
 *
 * @export
 * @interface QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod
 */
export interface QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod {
  /**
   * validators contains all the queried validators.
   * @type {Array<InlineResponse20037Validators>}
   * @memberof QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod
   */
  validators?: Array<InlineResponse20037Validators>;
  /**
   *
   * @type {InlineResponse2002Pagination}
   * @memberof QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod
   */
  pagination?: InlineResponse2002Pagination;
}
/**
 *
 * @export
 * @interface Redelegation
 */
export interface Redelegation {
  /**
   *
   * @type {string}
   * @memberof Redelegation
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof Redelegation
   */
  validator_src_address?: string;
  /**
   *
   * @type {string}
   * @memberof Redelegation
   */
  validator_dst_address?: string;
  /**
   *
   * @type {Array<Redelegation>}
   * @memberof Redelegation
   */
  entries?: Array<Redelegation>;
}
/**
 *
 * @export
 * @interface RedelegationEntry
 */
export interface RedelegationEntry {
  /**
   *
   * @type {number}
   * @memberof RedelegationEntry
   */
  creation_height?: number;
  /**
   *
   * @type {number}
   * @memberof RedelegationEntry
   */
  completion_time?: number;
  /**
   *
   * @type {string}
   * @memberof RedelegationEntry
   */
  initial_balance?: string;
  /**
   *
   * @type {string}
   * @memberof RedelegationEntry
   */
  balance?: string;
  /**
   *
   * @type {string}
   * @memberof RedelegationEntry
   */
  shares_dst?: string;
}
/**
 *
 * @export
 * @interface SigningInfo
 */
export interface SigningInfo {
  /**
   *
   * @type {string}
   * @memberof SigningInfo
   */
  start_height?: string;
  /**
   *
   * @type {string}
   * @memberof SigningInfo
   */
  index_offset?: string;
  /**
   *
   * @type {string}
   * @memberof SigningInfo
   */
  jailed_until?: string;
  /**
   *
   * @type {string}
   * @memberof SigningInfo
   */
  missed_blocks_counter?: string;
}
/**
 *
 * @export
 * @interface SingleRepresentsASingleSigner
 */
export interface SingleRepresentsASingleSigner {
  /**
   * SignMode represents a signing mode with its own security guarantees.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future
   * @type {string}
   * @memberof SingleRepresentsASingleSigner
   */
  mode?: SingleRepresentsASingleSignerModeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum SingleRepresentsASingleSignerModeEnum {
  Unspecified = "SIGN_MODE_UNSPECIFIED",
  Direct = "SIGN_MODE_DIRECT",
  Textual = "SIGN_MODE_TEXTUAL",
  LegacyAminoJson = "SIGN_MODE_LEGACY_AMINO_JSON",
}

/**
 *
 * @export
 * @interface StdTx
 */
export interface StdTx {
  /**
   *
   * @type {Array<string>}
   * @memberof StdTx
   */
  msg?: Array<string>;
  /**
   *
   * @type {TxQueryTxFee}
   * @memberof StdTx
   */
  fee?: TxQueryTxFee;
  /**
   *
   * @type {string}
   * @memberof StdTx
   */
  memo?: string;
  /**
   *
   * @type {TxQueryTxSignature}
   * @memberof StdTx
   */
  signature?: TxQueryTxSignature;
}
/**
 *
 * @export
 * @interface Supply
 */
export interface Supply {
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof Supply
   */
  total?: Array<TxQueryTxFeeAmount>;
}
/**
 *
 * @export
 * @interface TallyResult
 */
export interface TallyResult {
  /**
   *
   * @type {string}
   * @memberof TallyResult
   */
  yes?: string;
  /**
   *
   * @type {string}
   * @memberof TallyResult
   */
  abstain?: string;
  /**
   *
   * @type {string}
   * @memberof TallyResult
   */
  no?: string;
  /**
   *
   * @type {string}
   * @memberof TallyResult
   */
  no_with_veto?: string;
}
/**
 * Event allows application developers to attach additional information to ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx. Later, transactions may be queried using these events.
 * @export
 * @interface TendermintAbciEvent
 */
export interface TendermintAbciEvent {
  /**
   *
   * @type {string}
   * @memberof TendermintAbciEvent
   */
  type?: string;
  /**
   *
   * @type {Array<InlineResponse20045ResultAttributes>}
   * @memberof TendermintAbciEvent
   */
  attributes?: Array<InlineResponse20045ResultAttributes>;
}
/**
 * EventAttribute is a single key-value pair, associated with an event.
 * @export
 * @interface TendermintAbciEventAttribute
 */
export interface TendermintAbciEventAttribute {
  /**
   *
   * @type {string}
   * @memberof TendermintAbciEventAttribute
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintAbciEventAttribute
   */
  value?: string;
  /**
   *
   * @type {boolean}
   * @memberof TendermintAbciEventAttribute
   */
  index?: boolean;
}
/**
 *
 * @export
 * @interface TendermintCryptoPublicKey
 */
export interface TendermintCryptoPublicKey {
  /**
   *
   * @type {string}
   * @memberof TendermintCryptoPublicKey
   */
  ed25519?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintCryptoPublicKey
   */
  secp256k1?: string;
}
/**
 *
 * @export
 * @interface TendermintP2pDefaultNodeInfo
 */
export interface TendermintP2pDefaultNodeInfo {
  /**
   *
   * @type {InlineResponse2008DefaultNodeInfoProtocolVersion}
   * @memberof TendermintP2pDefaultNodeInfo
   */
  protocol_version?: InlineResponse2008DefaultNodeInfoProtocolVersion;
  /**
   *
   * @type {string}
   * @memberof TendermintP2pDefaultNodeInfo
   */
  default_node_id?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintP2pDefaultNodeInfo
   */
  listen_addr?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintP2pDefaultNodeInfo
   */
  network?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintP2pDefaultNodeInfo
   */
  version?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintP2pDefaultNodeInfo
   */
  channels?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintP2pDefaultNodeInfo
   */
  moniker?: string;
  /**
   *
   * @type {InlineResponse2008DefaultNodeInfoOther}
   * @memberof TendermintP2pDefaultNodeInfo
   */
  other?: InlineResponse2008DefaultNodeInfoOther;
}
/**
 *
 * @export
 * @interface TendermintP2pDefaultNodeInfoOther
 */
export interface TendermintP2pDefaultNodeInfoOther {
  /**
   *
   * @type {string}
   * @memberof TendermintP2pDefaultNodeInfoOther
   */
  tx_index?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintP2pDefaultNodeInfoOther
   */
  rpc_address?: string;
}
/**
 *
 * @export
 * @interface TendermintP2pProtocolVersion
 */
export interface TendermintP2pProtocolVersion {
  /**
   *
   * @type {string}
   * @memberof TendermintP2pProtocolVersion
   */
  p2p?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintP2pProtocolVersion
   */
  block?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintP2pProtocolVersion
   */
  app?: string;
}
/**
 *
 * @export
 * @interface TendermintTypesBlock
 */
export interface TendermintTypesBlock {
  /**
   *
   * @type {InlineResponse2006BlockHeader}
   * @memberof TendermintTypesBlock
   */
  header?: InlineResponse2006BlockHeader;
  /**
   *
   * @type {DataContainsTheSetOfTransactionsIncludedInTheBlock}
   * @memberof TendermintTypesBlock
   */
  data?: DataContainsTheSetOfTransactionsIncludedInTheBlock;
  /**
   *
   * @type {InlineResponse2006BlockEvidence}
   * @memberof TendermintTypesBlock
   */
  evidence?: InlineResponse2006BlockEvidence;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit}
   * @memberof TendermintTypesBlock
   */
  last_commit?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit;
}
/**
 *
 * @export
 * @interface TendermintTypesBlockID
 */
export interface TendermintTypesBlockID {
  /**
   *
   * @type {string}
   * @memberof TendermintTypesBlockID
   */
  hash?: string;
  /**
   *
   * @type {PartsetHeader}
   * @memberof TendermintTypesBlockID
   */
  part_set_header?: PartsetHeader;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum TendermintTypesBlockIDFlag {
  Unknown = "BLOCK_ID_FLAG_UNKNOWN",
  Absent = "BLOCK_ID_FLAG_ABSENT",
  Commit = "BLOCK_ID_FLAG_COMMIT",
  Nil = "BLOCK_ID_FLAG_NIL",
}

/**
 * Commit contains the evidence that a block was committed by a set of validators.
 * @export
 * @interface TendermintTypesCommit
 */
export interface TendermintTypesCommit {
  /**
   *
   * @type {string}
   * @memberof TendermintTypesCommit
   */
  height?: string;
  /**
   *
   * @type {number}
   * @memberof TendermintTypesCommit
   */
  round?: number;
  /**
   *
   * @type {BlockID1}
   * @memberof TendermintTypesCommit
   */
  block_id?: BlockID1;
  /**
   *
   * @type {Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures>}
   * @memberof TendermintTypesCommit
   */
  signatures?: Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures>;
}
/**
 * CommitSig is a part of the Vote included in a Commit.
 * @export
 * @interface TendermintTypesCommitSig
 */
export interface TendermintTypesCommitSig {
  /**
   *
   * @type {string}
   * @memberof TendermintTypesCommitSig
   */
  block_id_flag?: TendermintTypesCommitSigBlockIdFlagEnum;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesCommitSig
   */
  validator_address?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesCommitSig
   */
  timestamp?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesCommitSig
   */
  signature?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum TendermintTypesCommitSigBlockIdFlagEnum {
  Unknown = "BLOCK_ID_FLAG_UNKNOWN",
  Absent = "BLOCK_ID_FLAG_ABSENT",
  Commit = "BLOCK_ID_FLAG_COMMIT",
  Nil = "BLOCK_ID_FLAG_NIL",
}

/**
 *
 * @export
 * @interface TendermintTypesData
 */
export interface TendermintTypesData {
  /**
   * Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We\'re just agreeing on the order first. This means that block.AppHash does not include these txs.
   * @type {Array<string>}
   * @memberof TendermintTypesData
   */
  txs?: Array<string>;
}
/**
 * DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
 * @export
 * @interface TendermintTypesDuplicateVoteEvidence
 */
export interface TendermintTypesDuplicateVoteEvidence {
  /**
   *
   * @type {InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA}
   * @memberof TendermintTypesDuplicateVoteEvidence
   */
  vote_a?: InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA}
   * @memberof TendermintTypesDuplicateVoteEvidence
   */
  vote_b?: InlineResponse2006BlockEvidenceDuplicateVoteEvidenceVoteA;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesDuplicateVoteEvidence
   */
  total_voting_power?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesDuplicateVoteEvidence
   */
  validator_power?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesDuplicateVoteEvidence
   */
  timestamp?: string;
}
/**
 *
 * @export
 * @interface TendermintTypesEvidence
 */
export interface TendermintTypesEvidence {
  /**
   *
   * @type {InlineResponse2006BlockEvidenceDuplicateVoteEvidence}
   * @memberof TendermintTypesEvidence
   */
  duplicate_vote_evidence?: InlineResponse2006BlockEvidenceDuplicateVoteEvidence;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidence}
   * @memberof TendermintTypesEvidence
   */
  light_client_attack_evidence?: InlineResponse2006BlockEvidenceLightClientAttackEvidence;
}
/**
 *
 * @export
 * @interface TendermintTypesEvidenceList
 */
export interface TendermintTypesEvidenceList {
  /**
   *
   * @type {Array<InlineResponse2006BlockEvidenceEvidence>}
   * @memberof TendermintTypesEvidenceList
   */
  evidence?: Array<InlineResponse2006BlockEvidenceEvidence>;
}
/**
 * Header defines the structure of a Tendermint block header.
 * @export
 * @interface TendermintTypesHeader
 */
export interface TendermintTypesHeader {
  /**
   *
   * @type {BasicBlockInfo}
   * @memberof TendermintTypesHeader
   */
  version?: BasicBlockInfo;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  chain_id?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  height?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  time?: string;
  /**
   *
   * @type {PrevBlockInfo}
   * @memberof TendermintTypesHeader
   */
  last_block_id?: PrevBlockInfo;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  last_commit_hash?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  data_hash?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  validators_hash?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  next_validators_hash?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  consensus_hash?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  app_hash?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  last_results_hash?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  evidence_hash?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesHeader
   */
  proposer_address?: string;
}
/**
 *
 * @export
 * @interface TendermintTypesLightBlock
 */
export interface TendermintTypesLightBlock {
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader}
   * @memberof TendermintTypesLightBlock
   */
  signed_header?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet}
   * @memberof TendermintTypesLightBlock
   */
  validator_set?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet;
}
/**
 * LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
 * @export
 * @interface TendermintTypesLightClientAttackEvidence
 */
export interface TendermintTypesLightClientAttackEvidence {
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlock}
   * @memberof TendermintTypesLightClientAttackEvidence
   */
  conflicting_block?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlock;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesLightClientAttackEvidence
   */
  common_height?: string;
  /**
   *
   * @type {Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>}
   * @memberof TendermintTypesLightClientAttackEvidence
   */
  byzantine_validators?: Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesLightClientAttackEvidence
   */
  total_voting_power?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesLightClientAttackEvidence
   */
  timestamp?: string;
}
/**
 *
 * @export
 * @interface TendermintTypesPartSetHeader
 */
export interface TendermintTypesPartSetHeader {
  /**
   *
   * @type {number}
   * @memberof TendermintTypesPartSetHeader
   */
  total?: number;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesPartSetHeader
   */
  hash?: string;
}
/**
 *
 * @export
 * @interface TendermintTypesSignedHeader
 */
export interface TendermintTypesSignedHeader {
  /**
   *
   * @type {InlineResponse2006BlockHeader}
   * @memberof TendermintTypesSignedHeader
   */
  header?: InlineResponse2006BlockHeader;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit}
   * @memberof TendermintTypesSignedHeader
   */
  commit?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit;
}
/**
 * SignedMsgType is a type of signed message in the consensus.   - SIGNED_MSG_TYPE_PREVOTE: Votes  - SIGNED_MSG_TYPE_PROPOSAL: Proposals
 * @export
 * @enum {string}
 */
export enum TendermintTypesSignedMsgType {
  Unknown = "SIGNED_MSG_TYPE_UNKNOWN",
  Prevote = "SIGNED_MSG_TYPE_PREVOTE",
  Precommit = "SIGNED_MSG_TYPE_PRECOMMIT",
  Proposal = "SIGNED_MSG_TYPE_PROPOSAL",
}

/**
 *
 * @export
 * @interface TendermintTypesValidator
 */
export interface TendermintTypesValidator {
  /**
   *
   * @type {string}
   * @memberof TendermintTypesValidator
   */
  address?: string;
  /**
   *
   * @type {PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators}
   * @memberof TendermintTypesValidator
   */
  pub_key?: PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesValidator
   */
  voting_power?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesValidator
   */
  proposer_priority?: string;
}
/**
 *
 * @export
 * @interface TendermintTypesValidatorSet
 */
export interface TendermintTypesValidatorSet {
  /**
   *
   * @type {Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>}
   * @memberof TendermintTypesValidatorSet
   */
  validators?: Array<InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>;
  /**
   *
   * @type {InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators}
   * @memberof TendermintTypesValidatorSet
   */
  proposer?: InlineResponse2006BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesValidatorSet
   */
  total_voting_power?: string;
}
/**
 * Vote represents a prevote, precommit, or commit vote from validators for consensus.
 * @export
 * @interface TendermintTypesVote
 */
export interface TendermintTypesVote {
  /**
   * SignedMsgType is a type of signed message in the consensus.   - SIGNED_MSG_TYPE_PREVOTE: Votes  - SIGNED_MSG_TYPE_PROPOSAL: Proposals
   * @type {string}
   * @memberof TendermintTypesVote
   */
  type?: TendermintTypesVoteTypeEnum;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesVote
   */
  height?: string;
  /**
   *
   * @type {number}
   * @memberof TendermintTypesVote
   */
  round?: number;
  /**
   *
   * @type {BlockID1}
   * @memberof TendermintTypesVote
   */
  block_id?: BlockID1;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesVote
   */
  timestamp?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesVote
   */
  validator_address?: string;
  /**
   *
   * @type {number}
   * @memberof TendermintTypesVote
   */
  validator_index?: number;
  /**
   *
   * @type {string}
   * @memberof TendermintTypesVote
   */
  signature?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum TendermintTypesVoteTypeEnum {
  Unknown = "SIGNED_MSG_TYPE_UNKNOWN",
  Prevote = "SIGNED_MSG_TYPE_PREVOTE",
  Precommit = "SIGNED_MSG_TYPE_PRECOMMIT",
  Proposal = "SIGNED_MSG_TYPE_PROPOSAL",
}

/**
 *
 * @export
 * @interface TendermintValidator
 */
export interface TendermintValidator {
  /**
   * bech32 encoded address
   * @type {string}
   * @memberof TendermintValidator
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintValidator
   */
  pub_key?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintValidator
   */
  voting_power?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintValidator
   */
  proposer_priority?: string;
}
/**
 * Consensus captures the consensus rules for processing a block in the blockchain, including all blockchain data structures and the rules of the application\'s state transition machine.
 * @export
 * @interface TendermintVersionConsensus
 */
export interface TendermintVersionConsensus {
  /**
   *
   * @type {string}
   * @memberof TendermintVersionConsensus
   */
  block?: string;
  /**
   *
   * @type {string}
   * @memberof TendermintVersionConsensus
   */
  app?: string;
}
/**
 *
 * @export
 * @interface TextProposal
 */
export interface TextProposal {
  /**
   *
   * @type {number}
   * @memberof TextProposal
   */
  proposal_id?: number;
  /**
   *
   * @type {string}
   * @memberof TextProposal
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof TextProposal
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof TextProposal
   */
  proposal_type?: string;
  /**
   *
   * @type {string}
   * @memberof TextProposal
   */
  proposal_status?: string;
  /**
   *
   * @type {TextProposalFinalTallyResult}
   * @memberof TextProposal
   */
  final_tally_result?: TextProposalFinalTallyResult;
  /**
   *
   * @type {string}
   * @memberof TextProposal
   */
  submit_time?: string;
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof TextProposal
   */
  total_deposit?: Array<TxQueryTxFeeAmount>;
  /**
   *
   * @type {string}
   * @memberof TextProposal
   */
  voting_start_time?: string;
}
/**
 *
 * @export
 * @interface TextProposalFinalTallyResult
 */
export interface TextProposalFinalTallyResult {
  /**
   *
   * @type {string}
   * @memberof TextProposalFinalTallyResult
   */
  yes?: string;
  /**
   *
   * @type {string}
   * @memberof TextProposalFinalTallyResult
   */
  abstain?: string;
  /**
   *
   * @type {string}
   * @memberof TextProposalFinalTallyResult
   */
  no?: string;
  /**
   *
   * @type {string}
   * @memberof TextProposalFinalTallyResult
   */
  no_with_veto?: string;
}
/**
 *
 * @export
 * @interface TxQuery
 */
export interface TxQuery {
  /**
   *
   * @type {string}
   * @memberof TxQuery
   */
  hash?: string;
  /**
   *
   * @type {number}
   * @memberof TxQuery
   */
  height?: number;
  /**
   *
   * @type {TxQueryTx}
   * @memberof TxQuery
   */
  tx?: TxQueryTx;
  /**
   *
   * @type {TxQueryResult}
   * @memberof TxQuery
   */
  result?: TxQueryResult;
}
/**
 *
 * @export
 * @interface TxQueryResult
 */
export interface TxQueryResult {
  /**
   *
   * @type {string}
   * @memberof TxQueryResult
   */
  log?: string;
  /**
   *
   * @type {string}
   * @memberof TxQueryResult
   */
  gas_wanted?: string;
  /**
   *
   * @type {string}
   * @memberof TxQueryResult
   */
  gas_used?: string;
  /**
   *
   * @type {Array<CheckTxResultTags>}
   * @memberof TxQueryResult
   */
  tags?: Array<CheckTxResultTags>;
}
/**
 *
 * @export
 * @interface TxQueryTx
 */
export interface TxQueryTx {
  /**
   *
   * @type {Array<string>}
   * @memberof TxQueryTx
   */
  msg?: Array<string>;
  /**
   *
   * @type {TxQueryTxFee}
   * @memberof TxQueryTx
   */
  fee?: TxQueryTxFee;
  /**
   *
   * @type {string}
   * @memberof TxQueryTx
   */
  memo?: string;
  /**
   *
   * @type {TxQueryTxSignature}
   * @memberof TxQueryTx
   */
  signature?: TxQueryTxSignature;
}
/**
 *
 * @export
 * @interface TxQueryTxFee
 */
export interface TxQueryTxFee {
  /**
   *
   * @type {string}
   * @memberof TxQueryTxFee
   */
  gas?: string;
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof TxQueryTxFee
   */
  amount?: Array<TxQueryTxFeeAmount>;
}
/**
 *
 * @export
 * @interface TxQueryTxFeeAmount
 */
export interface TxQueryTxFeeAmount {
  /**
   *
   * @type {string}
   * @memberof TxQueryTxFeeAmount
   */
  denom?: string;
  /**
   *
   * @type {string}
   * @memberof TxQueryTxFeeAmount
   */
  amount?: string;
}
/**
 *
 * @export
 * @interface TxQueryTxSignature
 */
export interface TxQueryTxSignature {
  /**
   *
   * @type {string}
   * @memberof TxQueryTxSignature
   */
  signature?: string;
  /**
   *
   * @type {TxQueryTxSignaturePubKey}
   * @memberof TxQueryTxSignature
   */
  pub_key?: TxQueryTxSignaturePubKey;
  /**
   *
   * @type {string}
   * @memberof TxQueryTxSignature
   */
  account_number?: string;
  /**
   *
   * @type {string}
   * @memberof TxQueryTxSignature
   */
  sequence?: string;
}
/**
 *
 * @export
 * @interface TxQueryTxSignaturePubKey
 */
export interface TxQueryTxSignaturePubKey {
  /**
   *
   * @type {string}
   * @memberof TxQueryTxSignaturePubKey
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof TxQueryTxSignaturePubKey
   */
  value?: string;
}
/**
 *
 * @export
 * @interface UnbondingDelegation
 */
export interface UnbondingDelegation {
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegation
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegation
   */
  validator_address?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegation
   */
  initial_balance?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegation
   */
  balance?: string;
  /**
   *
   * @type {number}
   * @memberof UnbondingDelegation
   */
  creation_height?: number;
  /**
   *
   * @type {number}
   * @memberof UnbondingDelegation
   */
  min_time?: number;
}
/**
 *
 * @export
 * @interface UnbondingDelegationPair
 */
export interface UnbondingDelegationPair {
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegationPair
   */
  delegator_address?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegationPair
   */
  validator_address?: string;
  /**
   *
   * @type {Array<UnbondingDelegationPairEntries>}
   * @memberof UnbondingDelegationPair
   */
  entries?: Array<UnbondingDelegationPairEntries>;
}
/**
 *
 * @export
 * @interface UnbondingDelegationPairEntries
 */
export interface UnbondingDelegationPairEntries {
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegationPairEntries
   */
  initial_balance?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegationPairEntries
   */
  balance?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegationPairEntries
   */
  creation_height?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingDelegationPairEntries
   */
  min_time?: string;
}
/**
 *
 * @export
 * @interface UnbondingEntries
 */
export interface UnbondingEntries {
  /**
   *
   * @type {string}
   * @memberof UnbondingEntries
   */
  initial_balance?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingEntries
   */
  balance?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingEntries
   */
  creation_height?: string;
  /**
   *
   * @type {string}
   * @memberof UnbondingEntries
   */
  min_time?: string;
}
/**
 * ValidatorSigningInfo defines a validator\'s signing info for monitoring their liveness activity.
 * @export
 * @interface ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
 */
export interface ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress {
  /**
   *
   * @type {string}
   * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
   */
  start_height?: string;
  /**
   *
   * @type {string}
   * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
   */
  index_offset?: string;
  /**
   *
   * @type {string}
   * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
   */
  jailed_until?: string;
  /**
   *
   * @type {boolean}
   * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
   */
  tombstoned?: boolean;
  /**
   *
   * @type {string}
   * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
   */
  missed_blocks_counter?: string;
}
/**
 *
 * @export
 * @interface Validator
 */
export interface Validator {
  /**
   * bech32 encoded address
   * @type {string}
   * @memberof Validator
   */
  operator_address?: string;
  /**
   *
   * @type {string}
   * @memberof Validator
   */
  consensus_pubkey?: string;
  /**
   *
   * @type {boolean}
   * @memberof Validator
   */
  jailed?: boolean;
  /**
   *
   * @type {number}
   * @memberof Validator
   */
  status?: number;
  /**
   *
   * @type {string}
   * @memberof Validator
   */
  tokens?: string;
  /**
   *
   * @type {string}
   * @memberof Validator
   */
  delegator_shares?: string;
  /**
   *
   * @type {ValidatorDescription}
   * @memberof Validator
   */
  description?: ValidatorDescription;
  /**
   *
   * @type {string}
   * @memberof Validator
   */
  bond_height?: string;
  /**
   *
   * @type {number}
   * @memberof Validator
   */
  bond_intra_tx_counter?: number;
  /**
   *
   * @type {string}
   * @memberof Validator
   */
  unbonding_height?: string;
  /**
   *
   * @type {string}
   * @memberof Validator
   */
  unbonding_time?: string;
  /**
   *
   * @type {ValidatorCommission}
   * @memberof Validator
   */
  commission?: ValidatorCommission;
}
/**
 *
 * @export
 * @interface ValidatorCommission
 */
export interface ValidatorCommission {
  /**
   *
   * @type {string}
   * @memberof ValidatorCommission
   */
  rate?: string;
  /**
   *
   * @type {string}
   * @memberof ValidatorCommission
   */
  max_rate?: string;
  /**
   *
   * @type {string}
   * @memberof ValidatorCommission
   */
  max_change_rate?: string;
  /**
   *
   * @type {string}
   * @memberof ValidatorCommission
   */
  update_time?: string;
}
/**
 *
 * @export
 * @interface ValidatorDescription
 */
export interface ValidatorDescription {
  /**
   *
   * @type {string}
   * @memberof ValidatorDescription
   */
  moniker?: string;
  /**
   *
   * @type {string}
   * @memberof ValidatorDescription
   */
  identity?: string;
  /**
   *
   * @type {string}
   * @memberof ValidatorDescription
   */
  website?: string;
  /**
   *
   * @type {string}
   * @memberof ValidatorDescription
   */
  security_contact?: string;
  /**
   *
   * @type {string}
   * @memberof ValidatorDescription
   */
  details?: string;
}
/**
 *
 * @export
 * @interface ValidatorDistInfo
 */
export interface ValidatorDistInfo {
  /**
   * bech32 encoded address
   * @type {string}
   * @memberof ValidatorDistInfo
   */
  operator_address?: string;
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof ValidatorDistInfo
   */
  self_bond_rewards?: Array<TxQueryTxFeeAmount>;
  /**
   *
   * @type {Array<TxQueryTxFeeAmount>}
   * @memberof ValidatorDistInfo
   */
  val_commission?: Array<TxQueryTxFeeAmount>;
}
/**
 *
 * @export
 * @interface Vote
 */
export interface Vote {
  /**
   *
   * @type {string}
   * @memberof Vote
   */
  voter?: string;
  /**
   *
   * @type {string}
   * @memberof Vote
   */
  proposal_id?: string;
  /**
   *
   * @type {string}
   * @memberof Vote
   */
  option?: string;
}

/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Account returns account details based on address.
     * @param {string} address address defines the address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    account: async (
      address: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'address' is not null or undefined
      if (address === null || address === undefined) {
        throw new RequiredError(
          "address",
          "Required parameter address was null or undefined when calling account.",
        );
      }
      const localVarPath = `/cosmos/auth/v1beta1/accounts/{address}`.replace(
        `{${"address"}}`,
        encodeURIComponent(String(address)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary AllBalances queries the balance of all coins for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allBalances: async (
      address: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'address' is not null or undefined
      if (address === null || address === undefined) {
        throw new RequiredError(
          "address",
          "Required parameter address was null or undefined when calling allBalances.",
        );
      }
      const localVarPath = `/cosmos/bank/v1beta1/balances/{address}`.replace(
        `{${"address"}}`,
        encodeURIComponent(String(address)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary AllEvidence queries all evidence.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allEvidence: async (
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/evidence/v1beta1/evidence`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary AnnualProvisions current minting annual provisions value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annualProvisions: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/mint/v1beta1/annual_provisions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary AppliedPlan queries a previously applied upgrade plan by its name.
     * @param {string} name name is the name of the applied plan to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appliedPlan: async (
      name: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling appliedPlan.",
        );
      }
      const localVarPath = `/cosmos/upgrade/v1beta1/applied_plan/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Params queries all parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authParams: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/auth/v1beta1/params`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Balance queries the balance of a single coin for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balance: async (
      address: string,
      denom: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'address' is not null or undefined
      if (address === null || address === undefined) {
        throw new RequiredError(
          "address",
          "Required parameter address was null or undefined when calling balance.",
        );
      }
      // verify required parameter 'denom' is not null or undefined
      if (denom === null || denom === undefined) {
        throw new RequiredError(
          "denom",
          "Required parameter denom was null or undefined when calling balance.",
        );
      }
      const localVarPath = `/cosmos/bank/v1beta1/balances/{address}/{denom}`
        .replace(`{${"address"}}`, encodeURIComponent(String(address)))
        .replace(`{${"denom"}}`, encodeURIComponent(String(denom)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Params queries the parameters of x/bank module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankParams: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/bank/v1beta1/params`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Channel queries an IBC Channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channel: async (
      channelId: string,
      portId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling channel.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling channel.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ChannelClientState queries for the client state for the channel associated with the provided channel identifiers.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelClientState: async (
      channelId: string,
      portId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling channelClientState.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling channelClientState.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/client_state`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ChannelConsensusState queries for the consensus state for the channel associated with the provided channel identifiers.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} revisionNumber revision number of the consensus state
     * @param {string} revisionHeight revision height of the consensus state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelConsensusState: async (
      channelId: string,
      portId: string,
      revisionNumber: string,
      revisionHeight: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling channelConsensusState.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling channelConsensusState.",
        );
      }
      // verify required parameter 'revisionNumber' is not null or undefined
      if (revisionNumber === null || revisionNumber === undefined) {
        throw new RequiredError(
          "revisionNumber",
          "Required parameter revisionNumber was null or undefined when calling channelConsensusState.",
        );
      }
      // verify required parameter 'revisionHeight' is not null or undefined
      if (revisionHeight === null || revisionHeight === undefined) {
        throw new RequiredError(
          "revisionHeight",
          "Required parameter revisionHeight was null or undefined when calling channelConsensusState.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)))
        .replace(
          `{${"revision_number"}}`,
          encodeURIComponent(String(revisionNumber)),
        )
        .replace(
          `{${"revision_height"}}`,
          encodeURIComponent(String(revisionHeight)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Channels queries all the IBC channels of a chain.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channels: async (
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ibc/core/channel/v1beta1/channels`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ClientConnections queries the connection paths associated with a client state.
     * @param {string} clientId client identifier associated with a connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientConnections: async (
      clientId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      if (clientId === null || clientId === undefined) {
        throw new RequiredError(
          "clientId",
          "Required parameter clientId was null or undefined when calling clientConnections.",
        );
      }
      const localVarPath = `/ibc/core/connection/v1beta1/client_connections/{client_id}`.replace(
        `{${"client_id"}}`,
        encodeURIComponent(String(clientId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ClientParams queries all parameters of the ibc client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientParams: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/ibc/client/v1beta1/params`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ClientState queries an IBC light client.
     * @param {string} clientId client state unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientState: async (
      clientId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      if (clientId === null || clientId === undefined) {
        throw new RequiredError(
          "clientId",
          "Required parameter clientId was null or undefined when calling clientState.",
        );
      }
      const localVarPath = `/ibc/core/client/v1beta1/client_states/{client_id}`.replace(
        `{${"client_id"}}`,
        encodeURIComponent(String(clientId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ClientStates queries all the IBC light clients of a chain.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientStates: async (
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ibc/core/client/v1beta1/client_states`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary CommunityPool queries the community pool coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    communityPool: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/distribution/v1beta1/community_pool`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Connection queries an IBC connection end.
     * @param {string} connectionId connection unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connection: async (
      connectionId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling connection.",
        );
      }
      const localVarPath = `/ibc/core/connection/v1beta1/connections/{connection_id}`.replace(
        `{${"connection_id"}}`,
        encodeURIComponent(String(connectionId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ConnectionChannels queries all the channels associated with a connection end.
     * @param {string} connection connection unique identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectionChannels: async (
      connection: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'connection' is not null or undefined
      if (connection === null || connection === undefined) {
        throw new RequiredError(
          "connection",
          "Required parameter connection was null or undefined when calling connectionChannels.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/connections/{connection}/channels`.replace(
        `{${"connection"}}`,
        encodeURIComponent(String(connection)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ConnectionClientState queries the client state associated with the connection.
     * @param {string} connectionId connection identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectionClientState: async (
      connectionId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling connectionClientState.",
        );
      }
      const localVarPath = `/ibc/core/connection/v1beta1/connections/{connection_id}/client_state`.replace(
        `{${"connection_id"}}`,
        encodeURIComponent(String(connectionId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ConnectionConsensusState queries the consensus state associated with the connection.
     * @param {string} connectionId connection identifier
     * @param {string} revisionNumber
     * @param {string} revisionHeight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectionConsensusState: async (
      connectionId: string,
      revisionNumber: string,
      revisionHeight: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'connectionId' is not null or undefined
      if (connectionId === null || connectionId === undefined) {
        throw new RequiredError(
          "connectionId",
          "Required parameter connectionId was null or undefined when calling connectionConsensusState.",
        );
      }
      // verify required parameter 'revisionNumber' is not null or undefined
      if (revisionNumber === null || revisionNumber === undefined) {
        throw new RequiredError(
          "revisionNumber",
          "Required parameter revisionNumber was null or undefined when calling connectionConsensusState.",
        );
      }
      // verify required parameter 'revisionHeight' is not null or undefined
      if (revisionHeight === null || revisionHeight === undefined) {
        throw new RequiredError(
          "revisionHeight",
          "Required parameter revisionHeight was null or undefined when calling connectionConsensusState.",
        );
      }
      const localVarPath = `/ibc/core/connection/v1beta1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}`
        .replace(
          `{${"connection_id"}}`,
          encodeURIComponent(String(connectionId)),
        )
        .replace(
          `{${"revision_number"}}`,
          encodeURIComponent(String(revisionNumber)),
        )
        .replace(
          `{${"revision_height"}}`,
          encodeURIComponent(String(revisionHeight)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Connections queries all the IBC connections of a chain.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connections: async (
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ibc/core/connection/v1beta1/connections`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ConsensusState queries a consensus state associated with a client state at a given height.
     * @param {string} clientId client identifier
     * @param {string} revisionNumber consensus state revision number
     * @param {string} revisionHeight consensus state revision height
     * @param {boolean} [latestHeight] latest_height overrrides the height field and queries the latest stored ConsensusState.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consensusState: async (
      clientId: string,
      revisionNumber: string,
      revisionHeight: string,
      latestHeight?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      if (clientId === null || clientId === undefined) {
        throw new RequiredError(
          "clientId",
          "Required parameter clientId was null or undefined when calling consensusState.",
        );
      }
      // verify required parameter 'revisionNumber' is not null or undefined
      if (revisionNumber === null || revisionNumber === undefined) {
        throw new RequiredError(
          "revisionNumber",
          "Required parameter revisionNumber was null or undefined when calling consensusState.",
        );
      }
      // verify required parameter 'revisionHeight' is not null or undefined
      if (revisionHeight === null || revisionHeight === undefined) {
        throw new RequiredError(
          "revisionHeight",
          "Required parameter revisionHeight was null or undefined when calling consensusState.",
        );
      }
      const localVarPath = `/ibc/core/client/v1beta1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}`
        .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)))
        .replace(
          `{${"revision_number"}}`,
          encodeURIComponent(String(revisionNumber)),
        )
        .replace(
          `{${"revision_height"}}`,
          encodeURIComponent(String(revisionHeight)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (latestHeight !== undefined) {
        localVarQueryParameter["latest_height"] = latestHeight;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ConsensusStates queries all the consensus state associated with a given client.
     * @param {string} clientId client identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consensusStates: async (
      clientId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      if (clientId === null || clientId === undefined) {
        throw new RequiredError(
          "clientId",
          "Required parameter clientId was null or undefined when calling consensusStates.",
        );
      }
      const localVarPath = `/ibc/core/client/v1beta1/consensus_states/{client_id}`.replace(
        `{${"client_id"}}`,
        encodeURIComponent(String(clientId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary CurrentPlan queries the current upgrade plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentPlan: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/upgrade/v1beta1/current_plan`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delegation queries delegate info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegation: async (
      validatorAddr: string,
      delegatorAddr: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'validatorAddr' is not null or undefined
      if (validatorAddr === null || validatorAddr === undefined) {
        throw new RequiredError(
          "validatorAddr",
          "Required parameter validatorAddr was null or undefined when calling delegation.",
        );
      }
      // verify required parameter 'delegatorAddr' is not null or undefined
      if (delegatorAddr === null || delegatorAddr === undefined) {
        throw new RequiredError(
          "delegatorAddr",
          "Required parameter delegatorAddr was null or undefined when calling delegation.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}`
        .replace(
          `{${"validator_addr"}}`,
          encodeURIComponent(String(validatorAddr)),
        )
        .replace(
          `{${"delegator_addr"}}`,
          encodeURIComponent(String(delegatorAddr)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DelegationRewards queries the total rewards accrued by a delegation.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegationRewards: async (
      delegatorAddress: string,
      validatorAddress: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'delegatorAddress' is not null or undefined
      if (delegatorAddress === null || delegatorAddress === undefined) {
        throw new RequiredError(
          "delegatorAddress",
          "Required parameter delegatorAddress was null or undefined when calling delegationRewards.",
        );
      }
      // verify required parameter 'validatorAddress' is not null or undefined
      if (validatorAddress === null || validatorAddress === undefined) {
        throw new RequiredError(
          "validatorAddress",
          "Required parameter validatorAddress was null or undefined when calling delegationRewards.",
        );
      }
      const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}`
        .replace(
          `{${"delegator_address"}}`,
          encodeURIComponent(String(delegatorAddress)),
        )
        .replace(
          `{${"validator_address"}}`,
          encodeURIComponent(String(validatorAddress)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegationTotalRewards: async (
      delegatorAddress: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'delegatorAddress' is not null or undefined
      if (delegatorAddress === null || delegatorAddress === undefined) {
        throw new RequiredError(
          "delegatorAddress",
          "Required parameter delegatorAddress was null or undefined when calling delegationTotalRewards.",
        );
      }
      const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards`.replace(
        `{${"delegator_address"}}`,
        encodeURIComponent(String(delegatorAddress)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DelegatorDelegations queries all delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorDelegations: async (
      delegatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'delegatorAddr' is not null or undefined
      if (delegatorAddr === null || delegatorAddr === undefined) {
        throw new RequiredError(
          "delegatorAddr",
          "Required parameter delegatorAddr was null or undefined when calling delegatorDelegations.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/delegations/{delegator_addr}`.replace(
        `{${"delegator_addr"}}`,
        encodeURIComponent(String(delegatorAddr)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorUnbondingDelegations: async (
      delegatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'delegatorAddr' is not null or undefined
      if (delegatorAddr === null || delegatorAddr === undefined) {
        throw new RequiredError(
          "delegatorAddr",
          "Required parameter delegatorAddr was null or undefined when calling delegatorUnbondingDelegations.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations`.replace(
        `{${"delegator_addr"}}`,
        encodeURIComponent(String(delegatorAddr)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DelegatorValidator queries validator info for given delegator validator pair.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorValidator: async (
      delegatorAddr: string,
      validatorAddr: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'delegatorAddr' is not null or undefined
      if (delegatorAddr === null || delegatorAddr === undefined) {
        throw new RequiredError(
          "delegatorAddr",
          "Required parameter delegatorAddr was null or undefined when calling delegatorValidator.",
        );
      }
      // verify required parameter 'validatorAddr' is not null or undefined
      if (validatorAddr === null || validatorAddr === undefined) {
        throw new RequiredError(
          "validatorAddr",
          "Required parameter validatorAddr was null or undefined when calling delegatorValidator.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}`
        .replace(
          `{${"delegator_addr"}}`,
          encodeURIComponent(String(delegatorAddr)),
        )
        .replace(
          `{${"validator_addr"}}`,
          encodeURIComponent(String(validatorAddr)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DelegatorValidators queries the validators of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorValidators: async (
      delegatorAddress: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'delegatorAddress' is not null or undefined
      if (delegatorAddress === null || delegatorAddress === undefined) {
        throw new RequiredError(
          "delegatorAddress",
          "Required parameter delegatorAddress was null or undefined when calling delegatorValidators.",
        );
      }
      const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators`.replace(
        `{${"delegator_address"}}`,
        encodeURIComponent(String(delegatorAddress)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorWithdrawAddress: async (
      delegatorAddress: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'delegatorAddress' is not null or undefined
      if (delegatorAddress === null || delegatorAddress === undefined) {
        throw new RequiredError(
          "delegatorAddress",
          "Required parameter delegatorAddress was null or undefined when calling delegatorWithdrawAddress.",
        );
      }
      const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address`.replace(
        `{${"delegator_address"}}`,
        encodeURIComponent(String(delegatorAddress)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DenomTrace queries a denomination trace information.
     * @param {string} hash hash (in hex format) of the denomination trace information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    denomTrace: async (
      hash: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'hash' is not null or undefined
      if (hash === null || hash === undefined) {
        throw new RequiredError(
          "hash",
          "Required parameter hash was null or undefined when calling denomTrace.",
        );
      }
      const localVarPath = `/ibc/applications/transfer/v1beta1/denom_traces/{hash}`.replace(
        `{${"hash"}}`,
        encodeURIComponent(String(hash)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DenomTraces queries all denomination traces.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    denomTraces: async (
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ibc/applications/transfer/v1beta1/denom_traces`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deposit queries single deposit information based proposalID, depositAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} depositor depositor defines the deposit addresses from the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deposit: async (
      proposalId: string,
      depositor: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'proposalId' is not null or undefined
      if (proposalId === null || proposalId === undefined) {
        throw new RequiredError(
          "proposalId",
          "Required parameter proposalId was null or undefined when calling deposit.",
        );
      }
      // verify required parameter 'depositor' is not null or undefined
      if (depositor === null || depositor === undefined) {
        throw new RequiredError(
          "depositor",
          "Required parameter depositor was null or undefined when calling deposit.",
        );
      }
      const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}`
        .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)))
        .replace(`{${"depositor"}}`, encodeURIComponent(String(depositor)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deposits queries all deposits of a single proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deposits: async (
      proposalId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'proposalId' is not null or undefined
      if (proposalId === null || proposalId === undefined) {
        throw new RequiredError(
          "proposalId",
          "Required parameter proposalId was null or undefined when calling deposits.",
        );
      }
      const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits`.replace(
        `{${"proposal_id"}}`,
        encodeURIComponent(String(proposalId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Params queries params of the distribution module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionParams: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/distribution/v1beta1/params`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Evidence queries evidence based on evidence hash.
     * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    evidence: async (
      evidenceHash: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'evidenceHash' is not null or undefined
      if (evidenceHash === null || evidenceHash === undefined) {
        throw new RequiredError(
          "evidenceHash",
          "Required parameter evidenceHash was null or undefined when calling evidence.",
        );
      }
      const localVarPath = `/cosmos/evidence/v1beta1/evidence/{evidence_hash}`.replace(
        `{${"evidence_hash"}}`,
        encodeURIComponent(String(evidenceHash)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Params queries all parameters of the gov module.
     * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParams: async (
      paramsType: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'paramsType' is not null or undefined
      if (paramsType === null || paramsType === undefined) {
        throw new RequiredError(
          "paramsType",
          "Required parameter paramsType was null or undefined when calling govParams.",
        );
      }
      const localVarPath = `/cosmos/gov/v1beta1/params/{params_type}`.replace(
        `{${"params_type"}}`,
        encodeURIComponent(String(paramsType)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary HistoricalInfo queries the historical info for given height.
     * @param {string} height height defines at which height to query the historical info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    historicalInfo: async (
      height: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'height' is not null or undefined
      if (height === null || height === undefined) {
        throw new RequiredError(
          "height",
          "Required parameter height was null or undefined when calling historicalInfo.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/historical_info/{height}`.replace(
        `{${"height"}}`,
        encodeURIComponent(String(height)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Params queries all parameters of the ibc-transfer module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    iBCTransferParams: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/ibc/applications/transfer/v1beta1/params`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Inflation returns the current minting inflation value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inflation: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/mint/v1beta1/inflation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Params returns the total set of minting parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintParams: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/mint/v1beta1/params`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary NextSequenceReceive returns the next receive sequence for a given channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nextSequenceReceive: async (
      channelId: string,
      portId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling nextSequenceReceive.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling nextSequenceReceive.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/next_sequence`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary PacketAcknowledgement queries a stored packet acknowledgement hash.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} sequence packet sequence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetAcknowledgement: async (
      channelId: string,
      portId: string,
      sequence: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling packetAcknowledgement.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling packetAcknowledgement.",
        );
      }
      // verify required parameter 'sequence' is not null or undefined
      if (sequence === null || sequence === undefined) {
        throw new RequiredError(
          "sequence",
          "Required parameter sequence was null or undefined when calling packetAcknowledgement.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)))
        .replace(`{${"sequence"}}`, encodeURIComponent(String(sequence)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary PacketAcknowledgements returns all the packet acknowledgements associated with a channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetAcknowledgements: async (
      channelId: string,
      portId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling packetAcknowledgements.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling packetAcknowledgements.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary PacketCommitment queries a stored packet commitment hash.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} sequence packet sequence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetCommitment: async (
      channelId: string,
      portId: string,
      sequence: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling packetCommitment.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling packetCommitment.",
        );
      }
      // verify required parameter 'sequence' is not null or undefined
      if (sequence === null || sequence === undefined) {
        throw new RequiredError(
          "sequence",
          "Required parameter sequence was null or undefined when calling packetCommitment.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)))
        .replace(`{${"sequence"}}`, encodeURIComponent(String(sequence)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary PacketCommitments returns all the packet commitments hashes associated with a channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetCommitments: async (
      channelId: string,
      portId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling packetCommitments.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling packetCommitments.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary PacketReceipt queries if a given packet sequence has been received on the queried chain
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} sequence packet sequence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetReceipt: async (
      channelId: string,
      portId: string,
      sequence: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling packetReceipt.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling packetReceipt.",
        );
      }
      // verify required parameter 'sequence' is not null or undefined
      if (sequence === null || sequence === undefined) {
        throw new RequiredError(
          "sequence",
          "Required parameter sequence was null or undefined when calling packetReceipt.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)))
        .replace(`{${"sequence"}}`, encodeURIComponent(String(sequence)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Params queries a specific parameter of a module, given its subspace and key.
     * @param {string} [subspace] subspace defines the module to query the parameter for.
     * @param {string} [key] key defines the key of the parameter in the subspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    params: async (
      subspace?: string,
      key?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/params/v1beta1/params`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (subspace !== undefined) {
        localVarQueryParameter["subspace"] = subspace;
      }

      if (key !== undefined) {
        localVarQueryParameter["key"] = key;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Pool queries the pool info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pool: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/staking/v1beta1/pool`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Proposal queries proposal details based on ProposalID.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    proposal: async (
      proposalId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'proposalId' is not null or undefined
      if (proposalId === null || proposalId === undefined) {
        throw new RequiredError(
          "proposalId",
          "Required parameter proposalId was null or undefined when calling proposal.",
        );
      }
      const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}`.replace(
        `{${"proposal_id"}}`,
        encodeURIComponent(String(proposalId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Proposals queries all proposals based on given status.
     * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @param {string} [voter] voter defines the voter address for the proposals.
     * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    proposals: async (
      proposalStatus?:
        | "PROPOSAL_STATUS_UNSPECIFIED"
        | "PROPOSAL_STATUS_DEPOSIT_PERIOD"
        | "PROPOSAL_STATUS_VOTING_PERIOD"
        | "PROPOSAL_STATUS_PASSED"
        | "PROPOSAL_STATUS_REJECTED"
        | "PROPOSAL_STATUS_FAILED",
      voter?: string,
      depositor?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/gov/v1beta1/proposals`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (proposalStatus !== undefined) {
        localVarQueryParameter["proposal_status"] = proposalStatus;
      }

      if (voter !== undefined) {
        localVarQueryParameter["voter"] = voter;
      }

      if (depositor !== undefined) {
        localVarQueryParameter["depositor"] = depositor;
      }

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Redelegations queries redelegations of given address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
     * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redelegations: async (
      delegatorAddr: string,
      srcValidatorAddr?: string,
      dstValidatorAddr?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'delegatorAddr' is not null or undefined
      if (delegatorAddr === null || delegatorAddr === undefined) {
        throw new RequiredError(
          "delegatorAddr",
          "Required parameter delegatorAddr was null or undefined when calling redelegations.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations`.replace(
        `{${"delegator_addr"}}`,
        encodeURIComponent(String(delegatorAddr)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (srcValidatorAddr !== undefined) {
        localVarQueryParameter["src_validator_addr"] = srcValidatorAddr;
      }

      if (dstValidatorAddr !== undefined) {
        localVarQueryParameter["dst_validator_addr"] = dstValidatorAddr;
      }

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary SigningInfo queries the signing info of given cons address
     * @param {string} consAddress cons_address is the address to query signing info of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signingInfo: async (
      consAddress: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'consAddress' is not null or undefined
      if (consAddress === null || consAddress === undefined) {
        throw new RequiredError(
          "consAddress",
          "Required parameter consAddress was null or undefined when calling signingInfo.",
        );
      }
      const localVarPath = `/cosmos/slashing/v1beta1/signing_infos/{cons_address}`.replace(
        `{${"cons_address"}}`,
        encodeURIComponent(String(consAddress)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary SigningInfos queries signing info of all validators
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signingInfos: async (
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/slashing/v1beta1/signing_infos`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Params queries the parameters of slashing module
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingParams: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/slashing/v1beta1/params`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary DelegatorValidators queries all validators info for given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorValidators: async (
      delegatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'delegatorAddr' is not null or undefined
      if (delegatorAddr === null || delegatorAddr === undefined) {
        throw new RequiredError(
          "delegatorAddr",
          "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorValidators.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators`.replace(
        `{${"delegator_addr"}}`,
        encodeURIComponent(String(delegatorAddr)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Parameters queries the staking parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingParams: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/staking/v1beta1/params`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary SupplyOf queries the supply of a single coin.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyOf: async (
      denom: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'denom' is not null or undefined
      if (denom === null || denom === undefined) {
        throw new RequiredError(
          "denom",
          "Required parameter denom was null or undefined when calling supplyOf.",
        );
      }
      const localVarPath = `/cosmos/bank/v1beta1/supply/{denom}`.replace(
        `{${"denom"}}`,
        encodeURIComponent(String(denom)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary TallyResult queries the tally of a proposal vote.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tallyResult: async (
      proposalId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'proposalId' is not null or undefined
      if (proposalId === null || proposalId === undefined) {
        throw new RequiredError(
          "proposalId",
          "Required parameter proposalId was null or undefined when calling tallyResult.",
        );
      }
      const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/tally`.replace(
        `{${"proposal_id"}}`,
        encodeURIComponent(String(proposalId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary TotalSupply queries the total supply of all coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    totalSupply: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/bank/v1beta1/supply`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unbondingDelegation: async (
      validatorAddr: string,
      delegatorAddr: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'validatorAddr' is not null or undefined
      if (validatorAddr === null || validatorAddr === undefined) {
        throw new RequiredError(
          "validatorAddr",
          "Required parameter validatorAddr was null or undefined when calling unbondingDelegation.",
        );
      }
      // verify required parameter 'delegatorAddr' is not null or undefined
      if (delegatorAddr === null || delegatorAddr === undefined) {
        throw new RequiredError(
          "delegatorAddr",
          "Required parameter delegatorAddr was null or undefined when calling unbondingDelegation.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation`
        .replace(
          `{${"validator_addr"}}`,
          encodeURIComponent(String(validatorAddr)),
        )
        .replace(
          `{${"delegator_addr"}}`,
          encodeURIComponent(String(delegatorAddr)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a channel and sequences.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {Array<string>} packetAckSequences list of acknowledgement sequences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unreceivedAcks: async (
      channelId: string,
      portId: string,
      packetAckSequences: Array<string>,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling unreceivedAcks.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling unreceivedAcks.",
        );
      }
      // verify required parameter 'packetAckSequences' is not null or undefined
      if (packetAckSequences === null || packetAckSequences === undefined) {
        throw new RequiredError(
          "packetAckSequences",
          "Required parameter packetAckSequences was null or undefined when calling unreceivedAcks.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)))
        .replace(
          `{${"packet_ack_sequences"}}`,
          encodeURIComponent(String(packetAckSequences)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary UnreceivedPackets returns all the unreceived IBC packets associated with a channel and sequences.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {Array<string>} packetCommitmentSequences list of packet sequences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unreceivedPackets: async (
      channelId: string,
      portId: string,
      packetCommitmentSequences: Array<string>,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      if (channelId === null || channelId === undefined) {
        throw new RequiredError(
          "channelId",
          "Required parameter channelId was null or undefined when calling unreceivedPackets.",
        );
      }
      // verify required parameter 'portId' is not null or undefined
      if (portId === null || portId === undefined) {
        throw new RequiredError(
          "portId",
          "Required parameter portId was null or undefined when calling unreceivedPackets.",
        );
      }
      // verify required parameter 'packetCommitmentSequences' is not null or undefined
      if (
        packetCommitmentSequences === null ||
        packetCommitmentSequences === undefined
      ) {
        throw new RequiredError(
          "packetCommitmentSequences",
          "Required parameter packetCommitmentSequences was null or undefined when calling unreceivedPackets.",
        );
      }
      const localVarPath = `/ibc/core/channel/v1beta1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets`
        .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId)))
        .replace(`{${"port_id"}}`, encodeURIComponent(String(portId)))
        .replace(
          `{${"packet_commitment_sequences"}}`,
          encodeURIComponent(String(packetCommitmentSequences)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
     * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upgradedConsensusState: async (
      lastHeight: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'lastHeight' is not null or undefined
      if (lastHeight === null || lastHeight === undefined) {
        throw new RequiredError(
          "lastHeight",
          "Required parameter lastHeight was null or undefined when calling upgradedConsensusState.",
        );
      }
      const localVarPath = `/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}`.replace(
        `{${"last_height"}}`,
        encodeURIComponent(String(lastHeight)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Validator queries validator info for given validator address.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validator: async (
      validatorAddr: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'validatorAddr' is not null or undefined
      if (validatorAddr === null || validatorAddr === undefined) {
        throw new RequiredError(
          "validatorAddr",
          "Required parameter validatorAddr was null or undefined when calling validator.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}`.replace(
        `{${"validator_addr"}}`,
        encodeURIComponent(String(validatorAddr)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ValidatorCommission queries accumulated commission for a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorCommission: async (
      validatorAddress: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'validatorAddress' is not null or undefined
      if (validatorAddress === null || validatorAddress === undefined) {
        throw new RequiredError(
          "validatorAddress",
          "Required parameter validatorAddress was null or undefined when calling validatorCommission.",
        );
      }
      const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}/commission`.replace(
        `{${"validator_address"}}`,
        encodeURIComponent(String(validatorAddress)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ValidatorDelegations queries delegate info for given validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorDelegations: async (
      validatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'validatorAddr' is not null or undefined
      if (validatorAddr === null || validatorAddr === undefined) {
        throw new RequiredError(
          "validatorAddr",
          "Required parameter validatorAddr was null or undefined when calling validatorDelegations.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/delegations`.replace(
        `{${"validator_addr"}}`,
        encodeURIComponent(String(validatorAddr)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ValidatorOutstandingRewards queries rewards of a validator address.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorOutstandingRewards: async (
      validatorAddress: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'validatorAddress' is not null or undefined
      if (validatorAddress === null || validatorAddress === undefined) {
        throw new RequiredError(
          "validatorAddress",
          "Required parameter validatorAddress was null or undefined when calling validatorOutstandingRewards.",
        );
      }
      const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards`.replace(
        `{${"validator_address"}}`,
        encodeURIComponent(String(validatorAddress)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ValidatorSlashes queries slash events of a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
     * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorSlashes: async (
      validatorAddress: string,
      startingHeight?: string,
      endingHeight?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'validatorAddress' is not null or undefined
      if (validatorAddress === null || validatorAddress === undefined) {
        throw new RequiredError(
          "validatorAddress",
          "Required parameter validatorAddress was null or undefined when calling validatorSlashes.",
        );
      }
      const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}/slashes`.replace(
        `{${"validator_address"}}`,
        encodeURIComponent(String(validatorAddress)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (startingHeight !== undefined) {
        localVarQueryParameter["starting_height"] = startingHeight;
      }

      if (endingHeight !== undefined) {
        localVarQueryParameter["ending_height"] = endingHeight;
      }

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorUnbondingDelegations: async (
      validatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'validatorAddr' is not null or undefined
      if (validatorAddr === null || validatorAddr === undefined) {
        throw new RequiredError(
          "validatorAddr",
          "Required parameter validatorAddr was null or undefined when calling validatorUnbondingDelegations.",
        );
      }
      const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations`.replace(
        `{${"validator_addr"}}`,
        encodeURIComponent(String(validatorAddr)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Validators queries all validators that match the given status.
     * @param {string} [status] status enables to query for validators matching a given status.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validators: async (
      status?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/staking/v1beta1/validators`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Vote queries voted information based on proposalID, voterAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} voter voter defines the oter address for the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vote: async (
      proposalId: string,
      voter: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'proposalId' is not null or undefined
      if (proposalId === null || proposalId === undefined) {
        throw new RequiredError(
          "proposalId",
          "Required parameter proposalId was null or undefined when calling vote.",
        );
      }
      // verify required parameter 'voter' is not null or undefined
      if (voter === null || voter === undefined) {
        throw new RequiredError(
          "voter",
          "Required parameter voter was null or undefined when calling vote.",
        );
      }
      const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}`
        .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)))
        .replace(`{${"voter"}}`, encodeURIComponent(String(voter)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Votes queries votes of a given proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    votes: async (
      proposalId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'proposalId' is not null or undefined
      if (proposalId === null || proposalId === undefined) {
        throw new RequiredError(
          "proposalId",
          "Required parameter proposalId was null or undefined when calling votes.",
        );
      }
      const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/votes`.replace(
        `{${"proposal_id"}}`,
        encodeURIComponent(String(proposalId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Account returns account details based on address.
     * @param {string} address address defines the address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async account(
      address: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse200>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).account(address, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary AllBalances queries the balance of all coins for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async allBalances(
      address: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2002>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).allBalances(
        address,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary AllEvidence queries all evidence.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async allEvidence(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20020>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).allEvidence(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary AnnualProvisions current minting annual provisions value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async annualProvisions(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20030>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).annualProvisions(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary AppliedPlan queries a previously applied upgrade plan by its name.
     * @param {string} name name is the name of the applied plan to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appliedPlan(
      name: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20047>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).appliedPlan(name, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Params queries all parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authParams(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2001>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).authParams(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Balance queries the balance of a single coin for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async balance(
      address: string,
      denom: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2003>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).balance(address, denom, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Params queries the parameters of x/bank module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bankParams(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2004>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).bankParams(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Channel queries an IBC Channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channel(
      channelId: string,
      portId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20051>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).channel(channelId, portId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ChannelClientState queries for the client state for the channel associated with the provided channel identifiers.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelClientState(
      channelId: string,
      portId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).channelClientState(channelId, portId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ChannelConsensusState queries for the consensus state for the channel associated with the provided channel identifiers.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} revisionNumber revision number of the consensus state
     * @param {string} revisionHeight revision height of the consensus state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channelConsensusState(
      channelId: string,
      portId: string,
      revisionNumber: string,
      revisionHeight: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod1>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).channelConsensusState(
        channelId,
        portId,
        revisionNumber,
        revisionHeight,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Channels queries all the IBC channels of a chain.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async channels(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20050>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).channels(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ClientConnections queries the connection paths associated with a client state.
     * @param {string} clientId client identifier associated with a connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async clientConnections(
      clientId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryClientConnectionsResponseIsTheResponseTypeForTheQueryClientConnectionsRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).clientConnections(clientId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ClientParams queries all parameters of the ibc client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async clientParams(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20052>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).clientParams(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ClientState queries an IBC light client.
     * @param {string} clientId client state unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async clientState(
      clientId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20054>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).clientState(clientId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ClientStates queries all the IBC light clients of a chain.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async clientStates(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20053>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).clientStates(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary CommunityPool queries the community pool coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async communityPool(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20012>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).communityPool(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Connection queries an IBC connection end.
     * @param {string} connectionId connection unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connection(
      connectionId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20056>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).connection(connectionId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ConnectionChannels queries all the channels associated with a connection end.
     * @param {string} connection connection unique identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connectionChannels(
      connection: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryConnectionChannelsResponseIsTheResponseTypeForTheQueryQueryConnectionChannelsRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).connectionChannels(
        connection,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ConnectionClientState queries the client state associated with the connection.
     * @param {string} connectionId connection identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connectionClientState(
      connectionId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryConnectionClientStateResponseIsTheResponseTypeForTheQueryConnectionClientStateRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).connectionClientState(connectionId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ConnectionConsensusState queries the consensus state associated with the connection.
     * @param {string} connectionId connection identifier
     * @param {string} revisionNumber
     * @param {string} revisionHeight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connectionConsensusState(
      connectionId: string,
      revisionNumber: string,
      revisionHeight: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryConnectionConsensusStateResponseIsTheResponseTypeForTheQueryConnectionConsensusStateRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).connectionConsensusState(
        connectionId,
        revisionNumber,
        revisionHeight,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Connections queries all the IBC connections of a chain.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connections(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20055>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).connections(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ConsensusState queries a consensus state associated with a client state at a given height.
     * @param {string} clientId client identifier
     * @param {string} revisionNumber consensus state revision number
     * @param {string} revisionHeight consensus state revision height
     * @param {boolean} [latestHeight] latest_height overrrides the height field and queries the latest stored ConsensusState.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async consensusState(
      clientId: string,
      revisionNumber: string,
      revisionHeight: string,
      latestHeight?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryConsensusStateResponseIsTheResponseTypeForTheQueryConsensusStateRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).consensusState(
        clientId,
        revisionNumber,
        revisionHeight,
        latestHeight,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ConsensusStates queries all the consensus state associated with a given client.
     * @param {string} clientId client identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async consensusStates(
      clientId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).consensusStates(
        clientId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary CurrentPlan queries the current upgrade plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async currentPlan(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20048>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).currentPlan(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delegation queries delegate info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delegation(
      validatorAddr: string,
      delegatorAddr: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20042>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).delegation(validatorAddr, delegatorAddr, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DelegationRewards queries the total rewards accrued by a delegation.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delegationRewards(
      delegatorAddress: string,
      validatorAddress: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20014>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).delegationRewards(delegatorAddress, validatorAddress, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delegationTotalRewards(
      delegatorAddress: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20013>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).delegationTotalRewards(delegatorAddress, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DelegatorDelegations queries all delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delegatorDelegations(
      delegatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20034>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).delegatorDelegations(
        delegatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delegatorUnbondingDelegations(
      delegatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20036>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).delegatorUnbondingDelegations(
        delegatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DelegatorValidator queries validator info for given delegator validator pair.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delegatorValidator(
      delegatorAddr: string,
      validatorAddr: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20038>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).delegatorValidator(delegatorAddr, validatorAddr, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DelegatorValidators queries the validators of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delegatorValidators(
      delegatorAddress: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20015>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).delegatorValidators(delegatorAddress, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async delegatorWithdrawAddress(
      delegatorAddress: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20016>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).delegatorWithdrawAddress(delegatorAddress, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DenomTrace queries a denomination trace information.
     * @param {string} hash hash (in hex format) of the denomination trace information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async denomTrace(
      hash: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20058>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).denomTrace(hash, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DenomTraces queries all denomination traces.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async denomTraces(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20057>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).denomTraces(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Deposit queries single deposit information based proposalID, depositAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} depositor depositor defines the deposit addresses from the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deposit(
      proposalId: string,
      depositor: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20026>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).deposit(proposalId, depositor, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Deposits queries all deposits of a single proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deposits(
      proposalId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20025>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).deposits(
        proposalId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Params queries params of the distribution module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async distributionParams(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20017>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).distributionParams(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Evidence queries evidence based on evidence hash.
     * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async evidence(
      evidenceHash: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20021>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).evidence(evidenceHash, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Params queries all parameters of the gov module.
     * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async govParams(
      paramsType: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20022>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).govParams(paramsType, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary HistoricalInfo queries the historical info for given height.
     * @param {string} height height defines at which height to query the historical info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async historicalInfo(
      height: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20039>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).historicalInfo(height, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Params queries all parameters of the ibc-transfer module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async iBCTransferParams(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20059>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).iBCTransferParams(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Inflation returns the current minting inflation value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async inflation(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20031>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).inflation(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Params returns the total set of minting parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mintParams(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20032>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).mintParams(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary NextSequenceReceive returns the next receive sequence for a given channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async nextSequenceReceive(
      channelId: string,
      portId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuerySequenceResponseIsTheRequestTypeForTheQueryQueryNextSequenceReceiveResponseRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).nextSequenceReceive(channelId, portId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary PacketAcknowledgement queries a stored packet acknowledgement hash.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} sequence packet sequence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async packetAcknowledgement(
      channelId: string,
      portId: string,
      sequence: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryPacketAcknowledgementResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).packetAcknowledgement(channelId, portId, sequence, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary PacketAcknowledgements returns all the packet acknowledgements associated with a channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async packetAcknowledgements(
      channelId: string,
      portId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).packetAcknowledgements(
        channelId,
        portId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary PacketCommitment queries a stored packet commitment hash.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} sequence packet sequence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async packetCommitment(
      channelId: string,
      portId: string,
      sequence: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryPacketCommitmentResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).packetCommitment(channelId, portId, sequence, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary PacketCommitments returns all the packet commitments hashes associated with a channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async packetCommitments(
      channelId: string,
      portId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryPacketCommitmentsResponseIsTheRequestTypeForTheQueryQueryPacketCommitmentsRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).packetCommitments(
        channelId,
        portId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary PacketReceipt queries if a given packet sequence has been received on the queried chain
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} sequence packet sequence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async packetReceipt(
      channelId: string,
      portId: string,
      sequence: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryPacketReceiptResponseDefinesTheClientQueryResponseForAPacketReceiptWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).packetReceipt(channelId, portId, sequence, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Params queries a specific parameter of a module, given its subspace and key.
     * @param {string} [subspace] subspace defines the module to query the parameter for.
     * @param {string} [key] key defines the key of the parameter in the subspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async params(
      subspace?: string,
      key?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20033>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).params(subspace, key, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Pool queries the pool info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pool(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20041>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).pool(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Proposal queries proposal details based on ProposalID.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async proposal(
      proposalId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20024>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).proposal(proposalId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Proposals queries all proposals based on given status.
     * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @param {string} [voter] voter defines the voter address for the proposals.
     * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async proposals(
      proposalStatus?:
        | "PROPOSAL_STATUS_UNSPECIFIED"
        | "PROPOSAL_STATUS_DEPOSIT_PERIOD"
        | "PROPOSAL_STATUS_VOTING_PERIOD"
        | "PROPOSAL_STATUS_PASSED"
        | "PROPOSAL_STATUS_REJECTED"
        | "PROPOSAL_STATUS_FAILED",
      voter?: string,
      depositor?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20023>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).proposals(
        proposalStatus,
        voter,
        depositor,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Redelegations queries redelegations of given address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
     * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async redelegations(
      delegatorAddr: string,
      srcValidatorAddr?: string,
      dstValidatorAddr?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20035>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).redelegations(
        delegatorAddr,
        srcValidatorAddr,
        dstValidatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary SigningInfo queries the signing info of given cons address
     * @param {string} consAddress cons_address is the address to query signing info of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signingInfo(
      consAddress: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).signingInfo(consAddress, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary SigningInfos queries signing info of all validators
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signingInfos(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).signingInfos(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Params queries the parameters of slashing module
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async slashingParams(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).slashingParams(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary DelegatorValidators queries all validators info for given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stakingDelegatorValidators(
      delegatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20037>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).stakingDelegatorValidators(
        delegatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Parameters queries the staking parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stakingParams(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20040>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).stakingParams(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary SupplyOf queries the supply of a single coin.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async supplyOf(
      denom: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2005>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).supplyOf(denom, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary TallyResult queries the tally of a proposal vote.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async tallyResult(
      proposalId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20027>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).tallyResult(proposalId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary TotalSupply queries the total supply of all coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async totalSupply(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).totalSupply(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unbondingDelegation(
      validatorAddr: string,
      delegatorAddr: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20043>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).unbondingDelegation(validatorAddr, delegatorAddr, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a channel and sequences.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {Array<string>} packetAckSequences list of acknowledgement sequences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unreceivedAcks(
      channelId: string,
      portId: string,
      packetAckSequences: Array<string>,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryUnreceivedAcksResponseIsTheResponseTypeForTheQueryUnreceivedAcksRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).unreceivedAcks(channelId, portId, packetAckSequences, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary UnreceivedPackets returns all the unreceived IBC packets associated with a channel and sequences.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {Array<string>} packetCommitmentSequences list of packet sequences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unreceivedPackets(
      channelId: string,
      portId: string,
      packetCommitmentSequences: Array<string>,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryUnreceivedPacketsResponseIsTheResponseTypeForTheQueryUnreceivedPacketCommitmentsRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).unreceivedPackets(
        channelId,
        portId,
        packetCommitmentSequences,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
     * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async upgradedConsensusState(
      lastHeight: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20049>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).upgradedConsensusState(lastHeight, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Validator queries validator info for given validator address.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validator(
      validatorAddr: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).validator(validatorAddr, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ValidatorCommission queries accumulated commission for a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validatorCommission(
      validatorAddress: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).validatorCommission(validatorAddress, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ValidatorDelegations queries delegate info for given validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validatorDelegations(
      validatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).validatorDelegations(
        validatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ValidatorOutstandingRewards queries rewards of a validator address.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validatorOutstandingRewards(
      validatorAddress: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20018>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).validatorOutstandingRewards(validatorAddress, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ValidatorSlashes queries slash events of a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
     * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validatorSlashes(
      validatorAddress: string,
      startingHeight?: string,
      endingHeight?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20019>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).validatorSlashes(
        validatorAddress,
        startingHeight,
        endingHeight,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validatorUnbondingDelegations(
      validatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20044>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).validatorUnbondingDelegations(
        validatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Validators queries all validators that match the given status.
     * @param {string} [status] status enables to query for validators matching a given status.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validators(
      status?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).validators(
        status,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Vote queries voted information based on proposalID, voterAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} voter voter defines the oter address for the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async vote(
      proposalId: string,
      voter: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20029>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).vote(proposalId, voter, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Votes queries votes of a given proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async votes(
      proposalId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20028>
    > {
      const localVarAxiosArgs = await QueryApiAxiosParamCreator(
        configuration,
      ).votes(
        proposalId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Account returns account details based on address.
     * @param {string} address address defines the address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    account(address: string, options?: any): AxiosPromise<InlineResponse200> {
      return QueryApiFp(configuration)
        .account(address, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary AllBalances queries the balance of all coins for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allBalances(
      address: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse2002> {
      return QueryApiFp(configuration)
        .allBalances(
          address,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary AllEvidence queries all evidence.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allEvidence(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20020> {
      return QueryApiFp(configuration)
        .allEvidence(
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary AnnualProvisions current minting annual provisions value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annualProvisions(options?: any): AxiosPromise<InlineResponse20030> {
      return QueryApiFp(configuration)
        .annualProvisions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary AppliedPlan queries a previously applied upgrade plan by its name.
     * @param {string} name name is the name of the applied plan to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appliedPlan(
      name: string,
      options?: any,
    ): AxiosPromise<InlineResponse20047> {
      return QueryApiFp(configuration)
        .appliedPlan(name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Params queries all parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authParams(options?: any): AxiosPromise<InlineResponse2001> {
      return QueryApiFp(configuration)
        .authParams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Balance queries the balance of a single coin for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balance(
      address: string,
      denom: string,
      options?: any,
    ): AxiosPromise<InlineResponse2003> {
      return QueryApiFp(configuration)
        .balance(address, denom, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Params queries the parameters of x/bank module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankParams(options?: any): AxiosPromise<InlineResponse2004> {
      return QueryApiFp(configuration)
        .bankParams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Channel queries an IBC Channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channel(
      channelId: string,
      portId: string,
      options?: any,
    ): AxiosPromise<InlineResponse20051> {
      return QueryApiFp(configuration)
        .channel(channelId, portId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ChannelClientState queries for the client state for the channel associated with the provided channel identifiers.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelClientState(
      channelId: string,
      portId: string,
      options?: any,
    ): AxiosPromise<QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod> {
      return QueryApiFp(configuration)
        .channelClientState(channelId, portId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ChannelConsensusState queries for the consensus state for the channel associated with the provided channel identifiers.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} revisionNumber revision number of the consensus state
     * @param {string} revisionHeight revision height of the consensus state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelConsensusState(
      channelId: string,
      portId: string,
      revisionNumber: string,
      revisionHeight: string,
      options?: any,
    ): AxiosPromise<QueryChannelClientStateResponseIsTheResponseTypeForTheQueryQueryChannelClientStateRPCMethod1> {
      return QueryApiFp(configuration)
        .channelConsensusState(
          channelId,
          portId,
          revisionNumber,
          revisionHeight,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Channels queries all the IBC channels of a chain.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channels(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20050> {
      return QueryApiFp(configuration)
        .channels(
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ClientConnections queries the connection paths associated with a client state.
     * @param {string} clientId client identifier associated with a connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientConnections(
      clientId: string,
      options?: any,
    ): AxiosPromise<QueryClientConnectionsResponseIsTheResponseTypeForTheQueryClientConnectionsRPCMethod> {
      return QueryApiFp(configuration)
        .clientConnections(clientId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ClientParams queries all parameters of the ibc client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientParams(options?: any): AxiosPromise<InlineResponse20052> {
      return QueryApiFp(configuration)
        .clientParams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ClientState queries an IBC light client.
     * @param {string} clientId client state unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientState(
      clientId: string,
      options?: any,
    ): AxiosPromise<InlineResponse20054> {
      return QueryApiFp(configuration)
        .clientState(clientId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ClientStates queries all the IBC light clients of a chain.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientStates(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20053> {
      return QueryApiFp(configuration)
        .clientStates(
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary CommunityPool queries the community pool coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    communityPool(options?: any): AxiosPromise<InlineResponse20012> {
      return QueryApiFp(configuration)
        .communityPool(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Connection queries an IBC connection end.
     * @param {string} connectionId connection unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connection(
      connectionId: string,
      options?: any,
    ): AxiosPromise<InlineResponse20056> {
      return QueryApiFp(configuration)
        .connection(connectionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ConnectionChannels queries all the channels associated with a connection end.
     * @param {string} connection connection unique identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectionChannels(
      connection: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<QueryConnectionChannelsResponseIsTheResponseTypeForTheQueryQueryConnectionChannelsRPCMethod> {
      return QueryApiFp(configuration)
        .connectionChannels(
          connection,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ConnectionClientState queries the client state associated with the connection.
     * @param {string} connectionId connection identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectionClientState(
      connectionId: string,
      options?: any,
    ): AxiosPromise<QueryConnectionClientStateResponseIsTheResponseTypeForTheQueryConnectionClientStateRPCMethod> {
      return QueryApiFp(configuration)
        .connectionClientState(connectionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ConnectionConsensusState queries the consensus state associated with the connection.
     * @param {string} connectionId connection identifier
     * @param {string} revisionNumber
     * @param {string} revisionHeight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectionConsensusState(
      connectionId: string,
      revisionNumber: string,
      revisionHeight: string,
      options?: any,
    ): AxiosPromise<QueryConnectionConsensusStateResponseIsTheResponseTypeForTheQueryConnectionConsensusStateRPCMethod> {
      return QueryApiFp(configuration)
        .connectionConsensusState(
          connectionId,
          revisionNumber,
          revisionHeight,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Connections queries all the IBC connections of a chain.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connections(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20055> {
      return QueryApiFp(configuration)
        .connections(
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ConsensusState queries a consensus state associated with a client state at a given height.
     * @param {string} clientId client identifier
     * @param {string} revisionNumber consensus state revision number
     * @param {string} revisionHeight consensus state revision height
     * @param {boolean} [latestHeight] latest_height overrrides the height field and queries the latest stored ConsensusState.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consensusState(
      clientId: string,
      revisionNumber: string,
      revisionHeight: string,
      latestHeight?: boolean,
      options?: any,
    ): AxiosPromise<QueryConsensusStateResponseIsTheResponseTypeForTheQueryConsensusStateRPCMethod> {
      return QueryApiFp(configuration)
        .consensusState(
          clientId,
          revisionNumber,
          revisionHeight,
          latestHeight,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ConsensusStates queries all the consensus state associated with a given client.
     * @param {string} clientId client identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consensusStates(
      clientId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<QueryConsensusStatesResponseIsTheResponseTypeForTheQueryConsensusStatesRPCMethod> {
      return QueryApiFp(configuration)
        .consensusStates(
          clientId,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary CurrentPlan queries the current upgrade plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentPlan(options?: any): AxiosPromise<InlineResponse20048> {
      return QueryApiFp(configuration)
        .currentPlan(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delegation queries delegate info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegation(
      validatorAddr: string,
      delegatorAddr: string,
      options?: any,
    ): AxiosPromise<InlineResponse20042> {
      return QueryApiFp(configuration)
        .delegation(validatorAddr, delegatorAddr, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DelegationRewards queries the total rewards accrued by a delegation.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegationRewards(
      delegatorAddress: string,
      validatorAddress: string,
      options?: any,
    ): AxiosPromise<InlineResponse20014> {
      return QueryApiFp(configuration)
        .delegationRewards(delegatorAddress, validatorAddress, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegationTotalRewards(
      delegatorAddress: string,
      options?: any,
    ): AxiosPromise<InlineResponse20013> {
      return QueryApiFp(configuration)
        .delegationTotalRewards(delegatorAddress, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DelegatorDelegations queries all delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorDelegations(
      delegatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20034> {
      return QueryApiFp(configuration)
        .delegatorDelegations(
          delegatorAddr,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorUnbondingDelegations(
      delegatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20036> {
      return QueryApiFp(configuration)
        .delegatorUnbondingDelegations(
          delegatorAddr,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DelegatorValidator queries validator info for given delegator validator pair.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorValidator(
      delegatorAddr: string,
      validatorAddr: string,
      options?: any,
    ): AxiosPromise<InlineResponse20038> {
      return QueryApiFp(configuration)
        .delegatorValidator(delegatorAddr, validatorAddr, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DelegatorValidators queries the validators of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorValidators(
      delegatorAddress: string,
      options?: any,
    ): AxiosPromise<InlineResponse20015> {
      return QueryApiFp(configuration)
        .delegatorValidators(delegatorAddress, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delegatorWithdrawAddress(
      delegatorAddress: string,
      options?: any,
    ): AxiosPromise<InlineResponse20016> {
      return QueryApiFp(configuration)
        .delegatorWithdrawAddress(delegatorAddress, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DenomTrace queries a denomination trace information.
     * @param {string} hash hash (in hex format) of the denomination trace information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    denomTrace(hash: string, options?: any): AxiosPromise<InlineResponse20058> {
      return QueryApiFp(configuration)
        .denomTrace(hash, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DenomTraces queries all denomination traces.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    denomTraces(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20057> {
      return QueryApiFp(configuration)
        .denomTraces(
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Deposit queries single deposit information based proposalID, depositAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} depositor depositor defines the deposit addresses from the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deposit(
      proposalId: string,
      depositor: string,
      options?: any,
    ): AxiosPromise<InlineResponse20026> {
      return QueryApiFp(configuration)
        .deposit(proposalId, depositor, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Deposits queries all deposits of a single proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deposits(
      proposalId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20025> {
      return QueryApiFp(configuration)
        .deposits(
          proposalId,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Params queries params of the distribution module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionParams(options?: any): AxiosPromise<InlineResponse20017> {
      return QueryApiFp(configuration)
        .distributionParams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Evidence queries evidence based on evidence hash.
     * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    evidence(
      evidenceHash: string,
      options?: any,
    ): AxiosPromise<InlineResponse20021> {
      return QueryApiFp(configuration)
        .evidence(evidenceHash, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Params queries all parameters of the gov module.
     * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParams(
      paramsType: string,
      options?: any,
    ): AxiosPromise<InlineResponse20022> {
      return QueryApiFp(configuration)
        .govParams(paramsType, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary HistoricalInfo queries the historical info for given height.
     * @param {string} height height defines at which height to query the historical info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    historicalInfo(
      height: string,
      options?: any,
    ): AxiosPromise<InlineResponse20039> {
      return QueryApiFp(configuration)
        .historicalInfo(height, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Params queries all parameters of the ibc-transfer module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    iBCTransferParams(options?: any): AxiosPromise<InlineResponse20059> {
      return QueryApiFp(configuration)
        .iBCTransferParams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Inflation returns the current minting inflation value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inflation(options?: any): AxiosPromise<InlineResponse20031> {
      return QueryApiFp(configuration)
        .inflation(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Params returns the total set of minting parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintParams(options?: any): AxiosPromise<InlineResponse20032> {
      return QueryApiFp(configuration)
        .mintParams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary NextSequenceReceive returns the next receive sequence for a given channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nextSequenceReceive(
      channelId: string,
      portId: string,
      options?: any,
    ): AxiosPromise<QuerySequenceResponseIsTheRequestTypeForTheQueryQueryNextSequenceReceiveResponseRPCMethod> {
      return QueryApiFp(configuration)
        .nextSequenceReceive(channelId, portId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary PacketAcknowledgement queries a stored packet acknowledgement hash.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} sequence packet sequence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetAcknowledgement(
      channelId: string,
      portId: string,
      sequence: string,
      options?: any,
    ): AxiosPromise<QueryPacketAcknowledgementResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved> {
      return QueryApiFp(configuration)
        .packetAcknowledgement(channelId, portId, sequence, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary PacketAcknowledgements returns all the packet acknowledgements associated with a channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetAcknowledgements(
      channelId: string,
      portId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<QueryPacketAcknowledgemetsResponseIsTheRequestTypeForTheQueryQueryPacketAcknowledgementsRPCMethod> {
      return QueryApiFp(configuration)
        .packetAcknowledgements(
          channelId,
          portId,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary PacketCommitment queries a stored packet commitment hash.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} sequence packet sequence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetCommitment(
      channelId: string,
      portId: string,
      sequence: string,
      options?: any,
    ): AxiosPromise<QueryPacketCommitmentResponseDefinesTheClientQueryResponseForAPacketWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved> {
      return QueryApiFp(configuration)
        .packetCommitment(channelId, portId, sequence, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary PacketCommitments returns all the packet commitments hashes associated with a channel.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetCommitments(
      channelId: string,
      portId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<QueryPacketCommitmentsResponseIsTheRequestTypeForTheQueryQueryPacketCommitmentsRPCMethod> {
      return QueryApiFp(configuration)
        .packetCommitments(
          channelId,
          portId,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary PacketReceipt queries if a given packet sequence has been received on the queried chain
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {string} sequence packet sequence
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    packetReceipt(
      channelId: string,
      portId: string,
      sequence: string,
      options?: any,
    ): AxiosPromise<QueryPacketReceiptResponseDefinesTheClientQueryResponseForAPacketReceiptWhichAlsoIncludesAProofAndTheHeightFromWhichTheProofWasRetrieved> {
      return QueryApiFp(configuration)
        .packetReceipt(channelId, portId, sequence, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Params queries a specific parameter of a module, given its subspace and key.
     * @param {string} [subspace] subspace defines the module to query the parameter for.
     * @param {string} [key] key defines the key of the parameter in the subspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    params(
      subspace?: string,
      key?: string,
      options?: any,
    ): AxiosPromise<InlineResponse20033> {
      return QueryApiFp(configuration)
        .params(subspace, key, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Pool queries the pool info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pool(options?: any): AxiosPromise<InlineResponse20041> {
      return QueryApiFp(configuration)
        .pool(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Proposal queries proposal details based on ProposalID.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    proposal(
      proposalId: string,
      options?: any,
    ): AxiosPromise<InlineResponse20024> {
      return QueryApiFp(configuration)
        .proposal(proposalId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Proposals queries all proposals based on given status.
     * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @param {string} [voter] voter defines the voter address for the proposals.
     * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    proposals(
      proposalStatus?:
        | "PROPOSAL_STATUS_UNSPECIFIED"
        | "PROPOSAL_STATUS_DEPOSIT_PERIOD"
        | "PROPOSAL_STATUS_VOTING_PERIOD"
        | "PROPOSAL_STATUS_PASSED"
        | "PROPOSAL_STATUS_REJECTED"
        | "PROPOSAL_STATUS_FAILED",
      voter?: string,
      depositor?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20023> {
      return QueryApiFp(configuration)
        .proposals(
          proposalStatus,
          voter,
          depositor,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Redelegations queries redelegations of given address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
     * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redelegations(
      delegatorAddr: string,
      srcValidatorAddr?: string,
      dstValidatorAddr?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20035> {
      return QueryApiFp(configuration)
        .redelegations(
          delegatorAddr,
          srcValidatorAddr,
          dstValidatorAddr,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary SigningInfo queries the signing info of given cons address
     * @param {string} consAddress cons_address is the address to query signing info of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signingInfo(
      consAddress: string,
      options?: any,
    ): AxiosPromise<QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod> {
      return QueryApiFp(configuration)
        .signingInfo(consAddress, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary SigningInfos queries signing info of all validators
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signingInfos(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod> {
      return QueryApiFp(configuration)
        .signingInfos(
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Params queries the parameters of slashing module
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingParams(
      options?: any,
    ): AxiosPromise<QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod> {
      return QueryApiFp(configuration)
        .slashingParams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary DelegatorValidators queries all validators info for given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorValidators(
      delegatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20037> {
      return QueryApiFp(configuration)
        .stakingDelegatorValidators(
          delegatorAddr,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Parameters queries the staking parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingParams(options?: any): AxiosPromise<InlineResponse20040> {
      return QueryApiFp(configuration)
        .stakingParams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary SupplyOf queries the supply of a single coin.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyOf(denom: string, options?: any): AxiosPromise<InlineResponse2005> {
      return QueryApiFp(configuration)
        .supplyOf(denom, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary TallyResult queries the tally of a proposal vote.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tallyResult(
      proposalId: string,
      options?: any,
    ): AxiosPromise<InlineResponse20027> {
      return QueryApiFp(configuration)
        .tallyResult(proposalId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary TotalSupply queries the total supply of all coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    totalSupply(
      options?: any,
    ): AxiosPromise<QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod> {
      return QueryApiFp(configuration)
        .totalSupply(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unbondingDelegation(
      validatorAddr: string,
      delegatorAddr: string,
      options?: any,
    ): AxiosPromise<InlineResponse20043> {
      return QueryApiFp(configuration)
        .unbondingDelegation(validatorAddr, delegatorAddr, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a channel and sequences.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {Array<string>} packetAckSequences list of acknowledgement sequences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unreceivedAcks(
      channelId: string,
      portId: string,
      packetAckSequences: Array<string>,
      options?: any,
    ): AxiosPromise<QueryUnreceivedAcksResponseIsTheResponseTypeForTheQueryUnreceivedAcksRPCMethod> {
      return QueryApiFp(configuration)
        .unreceivedAcks(channelId, portId, packetAckSequences, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary UnreceivedPackets returns all the unreceived IBC packets associated with a channel and sequences.
     * @param {string} channelId channel unique identifier
     * @param {string} portId port unique identifier
     * @param {Array<string>} packetCommitmentSequences list of packet sequences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unreceivedPackets(
      channelId: string,
      portId: string,
      packetCommitmentSequences: Array<string>,
      options?: any,
    ): AxiosPromise<QueryUnreceivedPacketsResponseIsTheResponseTypeForTheQueryUnreceivedPacketCommitmentsRPCMethod> {
      return QueryApiFp(configuration)
        .unreceivedPackets(
          channelId,
          portId,
          packetCommitmentSequences,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
     * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upgradedConsensusState(
      lastHeight: string,
      options?: any,
    ): AxiosPromise<InlineResponse20049> {
      return QueryApiFp(configuration)
        .upgradedConsensusState(lastHeight, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Validator queries validator info for given validator address.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validator(
      validatorAddr: string,
      options?: any,
    ): AxiosPromise<QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod> {
      return QueryApiFp(configuration)
        .validator(validatorAddr, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ValidatorCommission queries accumulated commission for a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorCommission(
      validatorAddress: string,
      options?: any,
    ): AxiosPromise<QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod> {
      return QueryApiFp(configuration)
        .validatorCommission(validatorAddress, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ValidatorDelegations queries delegate info for given validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorDelegations(
      validatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod> {
      return QueryApiFp(configuration)
        .validatorDelegations(
          validatorAddr,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ValidatorOutstandingRewards queries rewards of a validator address.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorOutstandingRewards(
      validatorAddress: string,
      options?: any,
    ): AxiosPromise<InlineResponse20018> {
      return QueryApiFp(configuration)
        .validatorOutstandingRewards(validatorAddress, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ValidatorSlashes queries slash events of a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
     * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorSlashes(
      validatorAddress: string,
      startingHeight?: string,
      endingHeight?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20019> {
      return QueryApiFp(configuration)
        .validatorSlashes(
          validatorAddress,
          startingHeight,
          endingHeight,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorUnbondingDelegations(
      validatorAddr: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20044> {
      return QueryApiFp(configuration)
        .validatorUnbondingDelegations(
          validatorAddr,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Validators queries all validators that match the given status.
     * @param {string} [status] status enables to query for validators matching a given status.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validators(
      status?: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod> {
      return QueryApiFp(configuration)
        .validators(
          status,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Vote queries voted information based on proposalID, voterAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} voter voter defines the oter address for the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vote(
      proposalId: string,
      voter: string,
      options?: any,
    ): AxiosPromise<InlineResponse20029> {
      return QueryApiFp(configuration)
        .vote(proposalId, voter, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Votes queries votes of a given proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    votes(
      proposalId: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20028> {
      return QueryApiFp(configuration)
        .votes(
          proposalId,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
  /**
   *
   * @summary Account returns account details based on address.
   * @param {string} address address defines the address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public account(address: string, options?: any) {
    return QueryApiFp(this.configuration)
      .account(address, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary AllBalances queries the balance of all coins for a single account.
   * @param {string} address address is the address to query balances for.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public allBalances(
    address: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .allBalances(
        address,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary AllEvidence queries all evidence.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public allEvidence(
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .allEvidence(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary AnnualProvisions current minting annual provisions value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public annualProvisions(options?: any) {
    return QueryApiFp(this.configuration)
      .annualProvisions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary AppliedPlan queries a previously applied upgrade plan by its name.
   * @param {string} name name is the name of the applied plan to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public appliedPlan(name: string, options?: any) {
    return QueryApiFp(this.configuration)
      .appliedPlan(name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Params queries all parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public authParams(options?: any) {
    return QueryApiFp(this.configuration)
      .authParams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Balance queries the balance of a single coin for a single account.
   * @param {string} address address is the address to query balances for.
   * @param {string} denom denom is the coin denom to query balances for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public balance(address: string, denom: string, options?: any) {
    return QueryApiFp(this.configuration)
      .balance(address, denom, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Params queries the parameters of x/bank module.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public bankParams(options?: any) {
    return QueryApiFp(this.configuration)
      .bankParams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Channel queries an IBC Channel.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public channel(channelId: string, portId: string, options?: any) {
    return QueryApiFp(this.configuration)
      .channel(channelId, portId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ChannelClientState queries for the client state for the channel associated with the provided channel identifiers.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public channelClientState(channelId: string, portId: string, options?: any) {
    return QueryApiFp(this.configuration)
      .channelClientState(channelId, portId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ChannelConsensusState queries for the consensus state for the channel associated with the provided channel identifiers.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {string} revisionNumber revision number of the consensus state
   * @param {string} revisionHeight revision height of the consensus state
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public channelConsensusState(
    channelId: string,
    portId: string,
    revisionNumber: string,
    revisionHeight: string,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .channelConsensusState(
        channelId,
        portId,
        revisionNumber,
        revisionHeight,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Channels queries all the IBC channels of a chain.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public channels(
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .channels(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ClientConnections queries the connection paths associated with a client state.
   * @param {string} clientId client identifier associated with a connection
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public clientConnections(clientId: string, options?: any) {
    return QueryApiFp(this.configuration)
      .clientConnections(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ClientParams queries all parameters of the ibc client.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public clientParams(options?: any) {
    return QueryApiFp(this.configuration)
      .clientParams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ClientState queries an IBC light client.
   * @param {string} clientId client state unique identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public clientState(clientId: string, options?: any) {
    return QueryApiFp(this.configuration)
      .clientState(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ClientStates queries all the IBC light clients of a chain.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public clientStates(
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .clientStates(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary CommunityPool queries the community pool coins.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public communityPool(options?: any) {
    return QueryApiFp(this.configuration)
      .communityPool(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Connection queries an IBC connection end.
   * @param {string} connectionId connection unique identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public connection(connectionId: string, options?: any) {
    return QueryApiFp(this.configuration)
      .connection(connectionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ConnectionChannels queries all the channels associated with a connection end.
   * @param {string} connection connection unique identifier
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public connectionChannels(
    connection: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .connectionChannels(
        connection,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ConnectionClientState queries the client state associated with the connection.
   * @param {string} connectionId connection identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public connectionClientState(connectionId: string, options?: any) {
    return QueryApiFp(this.configuration)
      .connectionClientState(connectionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ConnectionConsensusState queries the consensus state associated with the connection.
   * @param {string} connectionId connection identifier
   * @param {string} revisionNumber
   * @param {string} revisionHeight
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public connectionConsensusState(
    connectionId: string,
    revisionNumber: string,
    revisionHeight: string,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .connectionConsensusState(
        connectionId,
        revisionNumber,
        revisionHeight,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Connections queries all the IBC connections of a chain.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public connections(
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .connections(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ConsensusState queries a consensus state associated with a client state at a given height.
   * @param {string} clientId client identifier
   * @param {string} revisionNumber consensus state revision number
   * @param {string} revisionHeight consensus state revision height
   * @param {boolean} [latestHeight] latest_height overrrides the height field and queries the latest stored ConsensusState.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public consensusState(
    clientId: string,
    revisionNumber: string,
    revisionHeight: string,
    latestHeight?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .consensusState(
        clientId,
        revisionNumber,
        revisionHeight,
        latestHeight,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ConsensusStates queries all the consensus state associated with a given client.
   * @param {string} clientId client identifier
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public consensusStates(
    clientId: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .consensusStates(
        clientId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary CurrentPlan queries the current upgrade plan.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public currentPlan(options?: any) {
    return QueryApiFp(this.configuration)
      .currentPlan(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delegation queries delegate info for given validator delegator pair.
   * @param {string} validatorAddr validator_addr defines the validator address to query for.
   * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public delegation(
    validatorAddr: string,
    delegatorAddr: string,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .delegation(validatorAddr, delegatorAddr, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DelegationRewards queries the total rewards accrued by a delegation.
   * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
   * @param {string} validatorAddress validator_address defines the validator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public delegationRewards(
    delegatorAddress: string,
    validatorAddress: string,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .delegationRewards(delegatorAddress, validatorAddress, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
   * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public delegationTotalRewards(delegatorAddress: string, options?: any) {
    return QueryApiFp(this.configuration)
      .delegationTotalRewards(delegatorAddress, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DelegatorDelegations queries all delegations of a given delegator address.
   * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public delegatorDelegations(
    delegatorAddr: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .delegatorDelegations(
        delegatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
   * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public delegatorUnbondingDelegations(
    delegatorAddr: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .delegatorUnbondingDelegations(
        delegatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DelegatorValidator queries validator info for given delegator validator pair.
   * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
   * @param {string} validatorAddr validator_addr defines the validator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public delegatorValidator(
    delegatorAddr: string,
    validatorAddr: string,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .delegatorValidator(delegatorAddr, validatorAddr, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DelegatorValidators queries the validators of a delegator.
   * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public delegatorValidators(delegatorAddress: string, options?: any) {
    return QueryApiFp(this.configuration)
      .delegatorValidators(delegatorAddress, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
   * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public delegatorWithdrawAddress(delegatorAddress: string, options?: any) {
    return QueryApiFp(this.configuration)
      .delegatorWithdrawAddress(delegatorAddress, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DenomTrace queries a denomination trace information.
   * @param {string} hash hash (in hex format) of the denomination trace information.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public denomTrace(hash: string, options?: any) {
    return QueryApiFp(this.configuration)
      .denomTrace(hash, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DenomTraces queries all denomination traces.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public denomTraces(
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .denomTraces(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Deposit queries single deposit information based proposalID, depositAddr.
   * @param {string} proposalId proposal_id defines the unique id of the proposal.
   * @param {string} depositor depositor defines the deposit addresses from the proposals.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public deposit(proposalId: string, depositor: string, options?: any) {
    return QueryApiFp(this.configuration)
      .deposit(proposalId, depositor, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Deposits queries all deposits of a single proposal.
   * @param {string} proposalId proposal_id defines the unique id of the proposal.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public deposits(
    proposalId: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .deposits(
        proposalId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Params queries params of the distribution module.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public distributionParams(options?: any) {
    return QueryApiFp(this.configuration)
      .distributionParams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Evidence queries evidence based on evidence hash.
   * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public evidence(evidenceHash: string, options?: any) {
    return QueryApiFp(this.configuration)
      .evidence(evidenceHash, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Params queries all parameters of the gov module.
   * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public govParams(paramsType: string, options?: any) {
    return QueryApiFp(this.configuration)
      .govParams(paramsType, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary HistoricalInfo queries the historical info for given height.
   * @param {string} height height defines at which height to query the historical info.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public historicalInfo(height: string, options?: any) {
    return QueryApiFp(this.configuration)
      .historicalInfo(height, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Params queries all parameters of the ibc-transfer module.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public iBCTransferParams(options?: any) {
    return QueryApiFp(this.configuration)
      .iBCTransferParams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Inflation returns the current minting inflation value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public inflation(options?: any) {
    return QueryApiFp(this.configuration)
      .inflation(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Params returns the total set of minting parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public mintParams(options?: any) {
    return QueryApiFp(this.configuration)
      .mintParams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary NextSequenceReceive returns the next receive sequence for a given channel.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public nextSequenceReceive(channelId: string, portId: string, options?: any) {
    return QueryApiFp(this.configuration)
      .nextSequenceReceive(channelId, portId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary PacketAcknowledgement queries a stored packet acknowledgement hash.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {string} sequence packet sequence
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public packetAcknowledgement(
    channelId: string,
    portId: string,
    sequence: string,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .packetAcknowledgement(channelId, portId, sequence, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary PacketAcknowledgements returns all the packet acknowledgements associated with a channel.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public packetAcknowledgements(
    channelId: string,
    portId: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .packetAcknowledgements(
        channelId,
        portId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary PacketCommitment queries a stored packet commitment hash.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {string} sequence packet sequence
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public packetCommitment(
    channelId: string,
    portId: string,
    sequence: string,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .packetCommitment(channelId, portId, sequence, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary PacketCommitments returns all the packet commitments hashes associated with a channel.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public packetCommitments(
    channelId: string,
    portId: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .packetCommitments(
        channelId,
        portId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary PacketReceipt queries if a given packet sequence has been received on the queried chain
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {string} sequence packet sequence
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public packetReceipt(
    channelId: string,
    portId: string,
    sequence: string,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .packetReceipt(channelId, portId, sequence, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Params queries a specific parameter of a module, given its subspace and key.
   * @param {string} [subspace] subspace defines the module to query the parameter for.
   * @param {string} [key] key defines the key of the parameter in the subspace.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public params(subspace?: string, key?: string, options?: any) {
    return QueryApiFp(this.configuration)
      .params(subspace, key, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Pool queries the pool info.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public pool(options?: any) {
    return QueryApiFp(this.configuration)
      .pool(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Proposal queries proposal details based on ProposalID.
   * @param {string} proposalId proposal_id defines the unique id of the proposal.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public proposal(proposalId: string, options?: any) {
    return QueryApiFp(this.configuration)
      .proposal(proposalId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Proposals queries all proposals based on given status.
   * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
   * @param {string} [voter] voter defines the voter address for the proposals.
   * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public proposals(
    proposalStatus?:
      | "PROPOSAL_STATUS_UNSPECIFIED"
      | "PROPOSAL_STATUS_DEPOSIT_PERIOD"
      | "PROPOSAL_STATUS_VOTING_PERIOD"
      | "PROPOSAL_STATUS_PASSED"
      | "PROPOSAL_STATUS_REJECTED"
      | "PROPOSAL_STATUS_FAILED",
    voter?: string,
    depositor?: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .proposals(
        proposalStatus,
        voter,
        depositor,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Redelegations queries redelegations of given address.
   * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
   * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
   * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public redelegations(
    delegatorAddr: string,
    srcValidatorAddr?: string,
    dstValidatorAddr?: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .redelegations(
        delegatorAddr,
        srcValidatorAddr,
        dstValidatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary SigningInfo queries the signing info of given cons address
   * @param {string} consAddress cons_address is the address to query signing info of
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public signingInfo(consAddress: string, options?: any) {
    return QueryApiFp(this.configuration)
      .signingInfo(consAddress, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary SigningInfos queries signing info of all validators
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public signingInfos(
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .signingInfos(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Params queries the parameters of slashing module
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public slashingParams(options?: any) {
    return QueryApiFp(this.configuration)
      .slashingParams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary DelegatorValidators queries all validators info for given delegator address.
   * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public stakingDelegatorValidators(
    delegatorAddr: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .stakingDelegatorValidators(
        delegatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Parameters queries the staking parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public stakingParams(options?: any) {
    return QueryApiFp(this.configuration)
      .stakingParams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary SupplyOf queries the supply of a single coin.
   * @param {string} denom denom is the coin denom to query balances for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public supplyOf(denom: string, options?: any) {
    return QueryApiFp(this.configuration)
      .supplyOf(denom, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary TallyResult queries the tally of a proposal vote.
   * @param {string} proposalId proposal_id defines the unique id of the proposal.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public tallyResult(proposalId: string, options?: any) {
    return QueryApiFp(this.configuration)
      .tallyResult(proposalId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary TotalSupply queries the total supply of all coins.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public totalSupply(options?: any) {
    return QueryApiFp(this.configuration)
      .totalSupply(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
   * @param {string} validatorAddr validator_addr defines the validator address to query for.
   * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public unbondingDelegation(
    validatorAddr: string,
    delegatorAddr: string,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .unbondingDelegation(validatorAddr, delegatorAddr, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a channel and sequences.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {Array<string>} packetAckSequences list of acknowledgement sequences
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public unreceivedAcks(
    channelId: string,
    portId: string,
    packetAckSequences: Array<string>,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .unreceivedAcks(channelId, portId, packetAckSequences, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary UnreceivedPackets returns all the unreceived IBC packets associated with a channel and sequences.
   * @param {string} channelId channel unique identifier
   * @param {string} portId port unique identifier
   * @param {Array<string>} packetCommitmentSequences list of packet sequences
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public unreceivedPackets(
    channelId: string,
    portId: string,
    packetCommitmentSequences: Array<string>,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .unreceivedPackets(channelId, portId, packetCommitmentSequences, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
   * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public upgradedConsensusState(lastHeight: string, options?: any) {
    return QueryApiFp(this.configuration)
      .upgradedConsensusState(lastHeight, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Validator queries validator info for given validator address.
   * @param {string} validatorAddr validator_addr defines the validator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public validator(validatorAddr: string, options?: any) {
    return QueryApiFp(this.configuration)
      .validator(validatorAddr, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ValidatorCommission queries accumulated commission for a validator.
   * @param {string} validatorAddress validator_address defines the validator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public validatorCommission(validatorAddress: string, options?: any) {
    return QueryApiFp(this.configuration)
      .validatorCommission(validatorAddress, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ValidatorDelegations queries delegate info for given validator.
   * @param {string} validatorAddr validator_addr defines the validator address to query for.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public validatorDelegations(
    validatorAddr: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .validatorDelegations(
        validatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ValidatorOutstandingRewards queries rewards of a validator address.
   * @param {string} validatorAddress validator_address defines the validator address to query for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public validatorOutstandingRewards(validatorAddress: string, options?: any) {
    return QueryApiFp(this.configuration)
      .validatorOutstandingRewards(validatorAddress, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ValidatorSlashes queries slash events of a validator.
   * @param {string} validatorAddress validator_address defines the validator address to query for.
   * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
   * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public validatorSlashes(
    validatorAddress: string,
    startingHeight?: string,
    endingHeight?: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .validatorSlashes(
        validatorAddress,
        startingHeight,
        endingHeight,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
   * @param {string} validatorAddr validator_addr defines the validator address to query for.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public validatorUnbondingDelegations(
    validatorAddr: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .validatorUnbondingDelegations(
        validatorAddr,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Validators queries all validators that match the given status.
   * @param {string} [status] status enables to query for validators matching a given status.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public validators(
    status?: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .validators(
        status,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Vote queries voted information based on proposalID, voterAddr.
   * @param {string} proposalId proposal_id defines the unique id of the proposal.
   * @param {string} voter voter defines the oter address for the proposals.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public vote(proposalId: string, voter: string, options?: any) {
    return QueryApiFp(this.configuration)
      .vote(proposalId, voter, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Votes queries votes of a given proposal.
   * @param {string} proposalId proposal_id defines the unique id of the proposal.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QueryApi
   */
  public votes(
    proposalId: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return QueryApiFp(this.configuration)
      .votes(
        proposalId,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary BroadcastTx broadcast transaction.
     * @param {BroadcastTxRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcastTx: async (
      body: BroadcastTxRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling broadcastTx.",
        );
      }
      const localVarPath = `/cosmos/tx/v1beta1/txs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const nonString = typeof body !== "string";
      const needsSerialization =
        nonString && configuration && configuration.isJsonMime
          ? configuration.isJsonMime(
              localVarRequestOptions.headers["Content-Type"],
            )
          : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary GetBlockByHeight queries block for given height.
     * @param {string} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockByHeight: async (
      height: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'height' is not null or undefined
      if (height === null || height === undefined) {
        throw new RequiredError(
          "height",
          "Required parameter height was null or undefined when calling getBlockByHeight.",
        );
      }
      const localVarPath = `/cosmos/base/tendermint/v1beta1/blocks/{height}`.replace(
        `{${"height"}}`,
        encodeURIComponent(String(height)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary GetLatestBlock returns the latest block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestBlock: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/base/tendermint/v1beta1/blocks/latest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary GetLatestValidatorSet queries latest validator-set.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestValidatorSet: async (
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/base/tendermint/v1beta1/validatorsets/latest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary GetNodeInfo queries the current node info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNodeInfo: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/base/tendermint/v1beta1/node_info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary GetSyncing queries node syncing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSyncing: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/base/tendermint/v1beta1/syncing`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary GetTx fetches a tx by hash.
     * @param {string} hash hash is the tx hash to query, encoded as a hex string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTx: async (hash: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'hash' is not null or undefined
      if (hash === null || hash === undefined) {
        throw new RequiredError(
          "hash",
          "Required parameter hash was null or undefined when calling getTx.",
        );
      }
      const localVarPath = `/cosmos/tx/v1beta1/txs/{hash}`.replace(
        `{${"hash"}}`,
        encodeURIComponent(String(hash)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary GetTxsEvent fetches txs by event.
     * @param {Array<string>} [events] events is the list of transaction event type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxsEvent: async (
      events?: Array<string>,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/cosmos/tx/v1beta1/txs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (events) {
        localVarQueryParameter["events"] = events;
      }

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary GetValidatorSetByHeight queries validator-set at a given height.
     * @param {string} height
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getValidatorSetByHeight: async (
      height: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'height' is not null or undefined
      if (height === null || height === undefined) {
        throw new RequiredError(
          "height",
          "Required parameter height was null or undefined when calling getValidatorSetByHeight.",
        );
      }
      const localVarPath = `/cosmos/base/tendermint/v1beta1/validatorsets/{height}`.replace(
        `{${"height"}}`,
        encodeURIComponent(String(height)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (paginationKey !== undefined) {
        localVarQueryParameter["pagination.key"] = paginationKey;
      }

      if (paginationOffset !== undefined) {
        localVarQueryParameter["pagination.offset"] = paginationOffset;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination.limit"] = paginationLimit;
      }

      if (paginationCountTotal !== undefined) {
        localVarQueryParameter["pagination.count_total"] = paginationCountTotal;
      }

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Simulate simulates executing a transaction for estimating gas usage.
     * @param {CosmosTxV1beta1SimulateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    simulate: async (
      body: CosmosTxV1beta1SimulateRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling simulate.",
        );
      }
      const localVarPath = `/cosmos/tx/v1beta1/simulate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const nonString = typeof body !== "string";
      const needsSerialization =
        nonString && configuration && configuration.isJsonMime
          ? configuration.isJsonMime(
              localVarRequestOptions.headers["Content-Type"],
            )
          : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary BroadcastTx broadcast transaction.
     * @param {BroadcastTxRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async broadcastTx(
      body: BroadcastTxRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20046>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).broadcastTx(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary GetBlockByHeight queries block for given height.
     * @param {string} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBlockByHeight(
      height: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2007>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).getBlockByHeight(height, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary GetLatestBlock returns the latest block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestBlock(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2006>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).getLatestBlock(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary GetLatestValidatorSet queries latest validator-set.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestValidatorSet(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20010>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).getLatestValidatorSet(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary GetNodeInfo queries the current node info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNodeInfo(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2008>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).getNodeInfo(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary GetSyncing queries node syncing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSyncing(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse2009>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).getSyncing(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary GetTx fetches a tx by hash.
     * @param {string} hash hash is the tx hash to query, encoded as a hex string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTx(
      hash: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CosmosTxV1beta1GetTxResponse>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).getTx(hash, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary GetTxsEvent fetches txs by event.
     * @param {Array<string>} [events] events is the list of transaction event type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTxsEvent(
      events?: Array<string>,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CosmosTxV1beta1GetTxsEventResponse>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).getTxsEvent(
        events,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary GetValidatorSetByHeight queries validator-set at a given height.
     * @param {string} height
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getValidatorSetByHeight(
      height: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20011>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).getValidatorSetByHeight(
        height,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Simulate simulates executing a transaction for estimating gas usage.
     * @param {CosmosTxV1beta1SimulateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async simulate(
      body: CosmosTxV1beta1SimulateRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<InlineResponse20045>
    > {
      const localVarAxiosArgs = await ServiceApiAxiosParamCreator(
        configuration,
      ).simulate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary BroadcastTx broadcast transaction.
     * @param {BroadcastTxRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    broadcastTx(
      body: BroadcastTxRequest,
      options?: any,
    ): AxiosPromise<InlineResponse20046> {
      return ServiceApiFp(configuration)
        .broadcastTx(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary GetBlockByHeight queries block for given height.
     * @param {string} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockByHeight(
      height: string,
      options?: any,
    ): AxiosPromise<InlineResponse2007> {
      return ServiceApiFp(configuration)
        .getBlockByHeight(height, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary GetLatestBlock returns the latest block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestBlock(options?: any): AxiosPromise<InlineResponse2006> {
      return ServiceApiFp(configuration)
        .getLatestBlock(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary GetLatestValidatorSet queries latest validator-set.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestValidatorSet(
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20010> {
      return ServiceApiFp(configuration)
        .getLatestValidatorSet(
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary GetNodeInfo queries the current node info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNodeInfo(options?: any): AxiosPromise<InlineResponse2008> {
      return ServiceApiFp(configuration)
        .getNodeInfo(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary GetSyncing queries node syncing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSyncing(options?: any): AxiosPromise<InlineResponse2009> {
      return ServiceApiFp(configuration)
        .getSyncing(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary GetTx fetches a tx by hash.
     * @param {string} hash hash is the tx hash to query, encoded as a hex string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTx(
      hash: string,
      options?: any,
    ): AxiosPromise<CosmosTxV1beta1GetTxResponse> {
      return ServiceApiFp(configuration)
        .getTx(hash, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary GetTxsEvent fetches txs by event.
     * @param {Array<string>} [events] events is the list of transaction event type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxsEvent(
      events?: Array<string>,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<CosmosTxV1beta1GetTxsEventResponse> {
      return ServiceApiFp(configuration)
        .getTxsEvent(
          events,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary GetValidatorSetByHeight queries validator-set at a given height.
     * @param {string} height
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getValidatorSetByHeight(
      height: string,
      paginationKey?: string,
      paginationOffset?: string,
      paginationLimit?: string,
      paginationCountTotal?: boolean,
      options?: any,
    ): AxiosPromise<InlineResponse20011> {
      return ServiceApiFp(configuration)
        .getValidatorSetByHeight(
          height,
          paginationKey,
          paginationOffset,
          paginationLimit,
          paginationCountTotal,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Simulate simulates executing a transaction for estimating gas usage.
     * @param {CosmosTxV1beta1SimulateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    simulate(
      body: CosmosTxV1beta1SimulateRequest,
      options?: any,
    ): AxiosPromise<InlineResponse20045> {
      return ServiceApiFp(configuration)
        .simulate(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI {
  /**
   *
   * @summary BroadcastTx broadcast transaction.
   * @param {BroadcastTxRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public broadcastTx(body: BroadcastTxRequest, options?: any) {
    return ServiceApiFp(this.configuration)
      .broadcastTx(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary GetBlockByHeight queries block for given height.
   * @param {string} height
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public getBlockByHeight(height: string, options?: any) {
    return ServiceApiFp(this.configuration)
      .getBlockByHeight(height, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary GetLatestBlock returns the latest block.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public getLatestBlock(options?: any) {
    return ServiceApiFp(this.configuration)
      .getLatestBlock(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary GetLatestValidatorSet queries latest validator-set.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public getLatestValidatorSet(
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return ServiceApiFp(this.configuration)
      .getLatestValidatorSet(
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary GetNodeInfo queries the current node info.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public getNodeInfo(options?: any) {
    return ServiceApiFp(this.configuration)
      .getNodeInfo(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary GetSyncing queries node syncing.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public getSyncing(options?: any) {
    return ServiceApiFp(this.configuration)
      .getSyncing(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary GetTx fetches a tx by hash.
   * @param {string} hash hash is the tx hash to query, encoded as a hex string.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public getTx(hash: string, options?: any) {
    return ServiceApiFp(this.configuration)
      .getTx(hash, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary GetTxsEvent fetches txs by event.
   * @param {Array<string>} [events] events is the list of transaction event type.
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public getTxsEvent(
    events?: Array<string>,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return ServiceApiFp(this.configuration)
      .getTxsEvent(
        events,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary GetValidatorSetByHeight queries validator-set at a given height.
   * @param {string} height
   * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
   * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
   * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
   * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public getValidatorSetByHeight(
    height: string,
    paginationKey?: string,
    paginationOffset?: string,
    paginationLimit?: string,
    paginationCountTotal?: boolean,
    options?: any,
  ) {
    return ServiceApiFp(this.configuration)
      .getValidatorSetByHeight(
        height,
        paginationKey,
        paginationOffset,
        paginationLimit,
        paginationCountTotal,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Simulate simulates executing a transaction for estimating gas usage.
   * @param {CosmosTxV1beta1SimulateRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public simulate(body: CosmosTxV1beta1SimulateRequest, options?: any) {
    return ServiceApiFp(this.configuration)
      .simulate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
